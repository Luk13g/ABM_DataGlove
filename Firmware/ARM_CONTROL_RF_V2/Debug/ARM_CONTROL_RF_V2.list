
ARM_CONTROL_RF_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008df4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008f08  08008f08  00018f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800934c  0800934c  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800934c  0800934c  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800934c  0800934c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009350  08009350  00019350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08009354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000218  08009568  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08009568  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153d9  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333b  00000000  00000000  00035616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  00038958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001448  00000000  00000000  00039f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b40e  00000000  00000000  0003b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ffb  00000000  00000000  00056766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000969e4  00000000  00000000  0006e761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105145  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c10  00000000  00000000  00105198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	08008eec 	.word	0x08008eec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	08008eec 	.word	0x08008eec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2301      	movs	r3, #1
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	f107 030f 	add.w	r3, r7, #15
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	2275      	movs	r2, #117	; 0x75
 8000aa4:	21d0      	movs	r1, #208	; 0xd0
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f002 ffc2 	bl	8003a30 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	2b68      	cmp	r3, #104	; 0x68
 8000ab0:	d141      	bne.n	8000b36 <MPU6050_Init+0xae>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	2301      	movs	r3, #1
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	f107 030e 	add.w	r3, r7, #14
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	226b      	movs	r2, #107	; 0x6b
 8000aca:	21d0      	movs	r1, #208	; 0xd0
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f002 feb5 	bl	800383c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	9302      	str	r3, [sp, #8]
 8000adc:	2301      	movs	r3, #1
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	f107 030e 	add.w	r3, r7, #14
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2219      	movs	r2, #25
 8000aea:	21d0      	movs	r1, #208	; 0xd0
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f002 fea5 	bl	800383c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	2301      	movs	r3, #1
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	f107 030e 	add.w	r3, r7, #14
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	221c      	movs	r2, #28
 8000b0a:	21d0      	movs	r1, #208	; 0xd0
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f002 fe95 	bl	800383c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f107 030e 	add.w	r3, r7, #14
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2301      	movs	r3, #1
 8000b28:	221b      	movs	r2, #27
 8000b2a:	21d0      	movs	r1, #208	; 0xd0
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f002 fe85 	bl	800383c <HAL_I2C_Mem_Write>
        return 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <MPU6050_Init+0xb0>
    }
    return 1;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af04      	add	r7, sp, #16
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	9302      	str	r3, [sp, #8]
 8000b50:	2306      	movs	r3, #6
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	223b      	movs	r2, #59	; 0x3b
 8000b5e:	21d0      	movs	r1, #208	; 0xd0
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f002 ff65 	bl	8003a30 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000b66:	7a3b      	ldrb	r3, [r7, #8]
 8000b68:	021b      	lsls	r3, r3, #8
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	7a7b      	ldrb	r3, [r7, #9]
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000b78:	7abb      	ldrb	r3, [r7, #10]
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	7afb      	ldrb	r3, [r7, #11]
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000b8a:	7b3b      	ldrb	r3, [r7, #12]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	7b7b      	ldrb	r3, [r7, #13]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fc2e 	bl	8000404 <__aeabi_i2d>
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MPU6050_Read_Accel+0xd0>)
 8000bae:	f7ff fdbd 	bl	800072c <__aeabi_ddiv>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fc1e 	bl	8000404 <__aeabi_i2d>
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MPU6050_Read_Accel+0xd0>)
 8000bce:	f7ff fdad 	bl	800072c <__aeabi_ddiv>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	6839      	ldr	r1, [r7, #0]
 8000bd8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fc0e 	bl	8000404 <__aeabi_i2d>
 8000be8:	a307      	add	r3, pc, #28	; (adr r3, 8000c08 <MPU6050_Read_Accel+0xc8>)
 8000bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bee:	f7ff fd9d 	bl	800072c <__aeabi_ddiv>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	6839      	ldr	r1, [r7, #0]
 8000bf8:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	f3af 8000 	nop.w
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40cc2900 	.word	0x40cc2900
 8000c10:	40d00000 	.word	0x40d00000

08000c14 <app_rx_cbk_func>:
void HAL_SYSTICK_Callback(void)
{
}

static void app_rx_cbk_func(nRF24_pipe_number_t pipe, uint8_t *buffer, uint8_t length, nrf24_tx_result_t status)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6039      	str	r1, [r7, #0]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	460b      	mov	r3, r1
 8000c26:	71bb      	strb	r3, [r7, #6]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	717b      	strb	r3, [r7, #5]
	if(status == NRF24_APP_OK)
 8000c2c:	797b      	ldrb	r3, [r7, #5]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d10a      	bne.n	8000c48 <app_rx_cbk_func+0x34>
	{
		last_recv_ms = hw_timer_get_tick_ms();
 8000c32:	f000 f997 	bl	8000f64 <hw_timer_get_tick_ms>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <app_rx_cbk_func+0x3c>)
 8000c3a:	6013      	str	r3, [r2, #0]

		if(buffer[0] == '1')
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b31      	cmp	r3, #49	; 0x31
 8000c42:	d101      	bne.n	8000c48 <app_rx_cbk_func+0x34>
		{
			hw_user_led_toggle();
 8000c44:	f000 f9d6 	bl	8000ff4 <hw_user_led_toggle>
		}
	}
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200002b4 	.word	0x200002b4

08000c54 <app_tx_cbk_func>:

static void app_tx_cbk_func(nRF24_pipe_number_t pipe, uint8_t *buffer, uint8_t length, nrf24_tx_result_t status)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6039      	str	r1, [r7, #0]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4603      	mov	r3, r0
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	460b      	mov	r3, r1
 8000c66:	71bb      	strb	r3, [r7, #6]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	717b      	strb	r3, [r7, #5]
	if(status == NRF24_APP_OK)
	{
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
	...

08000c78 <app_key_pressed>:
    nrf24_app_init(&nrf24_config,app_tx_cbk_func,app_rx_cbk_func);
    hw_nrf24_set_channel(rf_channel);
}

void app_key_pressed(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	static uint8_t buffer[32];
	buffer[0] = '1';
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <app_key_pressed+0x18>)
 8000c7e:	2231      	movs	r2, #49	; 0x31
 8000c80:	701a      	strb	r2, [r3, #0]

	nrf24_app_tx_data(buffer,32);
 8000c82:	2120      	movs	r1, #32
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <app_key_pressed+0x18>)
 8000c86:	f001 f8b3 	bl	8001df0 <nrf24_app_tx_data>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200002b8 	.word	0x200002b8

08000c94 <app_init>:

void app_init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <app_init+0x54>)
 8000c9e:	f002 fc58 	bl	8003552 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <app_init+0x54>)
 8000ca8:	f002 fc53 	bl	8003552 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <app_init+0x54>)
 8000cb2:	f002 fc4e 	bl	8003552 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim4);
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <app_init+0x58>)
 8000cb8:	f004 fd72 	bl	80057a0 <HAL_TIM_Base_Start_IT>
	adc_calibration();
 8000cbc:	f001 f90c 	bl	8001ed8 <adc_calibration>
	hw_init();
 8000cc0:	f000 f9d3 	bl	800106a <hw_init>
    nrf24_app_init(&nrf24_config,app_tx_cbk_func,app_rx_cbk_func);
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <app_init+0x5c>)
 8000cc6:	490b      	ldr	r1, [pc, #44]	; (8000cf4 <app_init+0x60>)
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <app_init+0x64>)
 8000cca:	f001 f8bf 	bl	8001e4c <nrf24_app_init>

    app_started = true;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <app_init+0x68>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
    while (MPU6050_Init(&hi2c1) == 1);// inicializa MPU6050
 8000cd4:	bf00      	nop
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <app_init+0x6c>)
 8000cd8:	f7ff fed6 	bl	8000a88 <MPU6050_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <app_init+0x42>

}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	2000047c 	.word	0x2000047c
 8000cf0:	08000c15 	.word	0x08000c15
 8000cf4:	08000c55 	.word	0x08000c55
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	200002b0 	.word	0x200002b0
 8000d00:	20000388 	.word	0x20000388

08000d04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)//le o sensor a cada 200 ms
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d103      	bne.n	8000d1c <HAL_TIM_PeriodElapsedCallback+0x18>
	{

		MPU6050_Read_Accel(&hi2c1, &MPU6050);//mpu consome 8756 bytes de flash e 20 de ram e radio 7156 bytes de flash
 8000d14:	4904      	ldr	r1, [pc, #16]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d18:	f7ff ff12 	bl	8000b40 <MPU6050_Read_Accel>
		//tx_size = snprintf((char *)tx_buffer,APP_UART_BUFFER_MAX-1,"%d;%d;%d;%f\n", (short int)MPU6050.Accel_X_RAW, (short int)MPU6050.Accel_Y_RAW, (short int)MPU6050.Accel_Z_RAW, (float)cont_time);
		tx_size = snprintf((char *)tx_buffer,APP_UART_BUFFER_MAX-1,"Accel_X: %d;  Accel_Y: %d;  Accel_Z: %d; %f \n", (short int)MPU6050.Accel_X_RAW, (short int)MPU6050.Accel_Y_RAW, (short int)MPU6050.Accel_Z_RAW, (float)cont_time);
		hw_uart_tx(tx_buffer,tx_size);
#endif
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000047c 	.word	0x2000047c
 8000d28:	20000238 	.word	0x20000238
 8000d2c:	20000388 	.word	0x20000388

08000d30 <app_loop>:

void app_loop(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af02      	add	r7, sp, #8
		//hw_sleep();

	    uint16_t adc1_val_ch1, adc1_val_ch4;


	    buffer_test[DATA_ACEL_X] = map(MPU6050.Accel_X_RAW,-17000,17000, 0 ,255);
 8000d36:	4b46      	ldr	r3, [pc, #280]	; (8000e50 <app_loop+0x120>)
 8000d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	23ff      	movs	r3, #255	; 0xff
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	f244 2268 	movw	r2, #17000	; 0x4268
 8000d48:	4942      	ldr	r1, [pc, #264]	; (8000e54 <app_loop+0x124>)
 8000d4a:	f001 fb87 	bl	800245c <map>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b41      	ldr	r3, [pc, #260]	; (8000e58 <app_loop+0x128>)
 8000d54:	701a      	strb	r2, [r3, #0]
	    buffer_test[DATA_ACEL_Y] = map(MPU6050.Accel_Y_RAW,-17000,17000, 0 ,255);
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <app_loop+0x120>)
 8000d58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	23ff      	movs	r3, #255	; 0xff
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2300      	movs	r3, #0
 8000d64:	f244 2268 	movw	r2, #17000	; 0x4268
 8000d68:	493a      	ldr	r1, [pc, #232]	; (8000e54 <app_loop+0x124>)
 8000d6a:	f001 fb77 	bl	800245c <map>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <app_loop+0x128>)
 8000d74:	705a      	strb	r2, [r3, #1]
	    buffer_test[DATA_ACEL_Z] = map(MPU6050.Accel_Z_RAW,-17000,17000, 0 ,255);
 8000d76:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <app_loop+0x120>)
 8000d78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	23ff      	movs	r3, #255	; 0xff
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2300      	movs	r3, #0
 8000d84:	f244 2268 	movw	r2, #17000	; 0x4268
 8000d88:	4932      	ldr	r1, [pc, #200]	; (8000e54 <app_loop+0x124>)
 8000d8a:	f001 fb67 	bl	800245c <map>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <app_loop+0x128>)
 8000d94:	709a      	strb	r2, [r3, #2]
	    buffer_test[DATA_KEY] = (HAL_GPIO_ReadPin(KEY_SELECT_GPIO_Port, KEY_SELECT_Pin)==GPIO_PIN_SET) ? (true) : (false);
 8000d96:	2108      	movs	r1, #8
 8000d98:	4830      	ldr	r0, [pc, #192]	; (8000e5c <app_loop+0x12c>)
 8000d9a:	f002 fbc3 	bl	8003524 <HAL_GPIO_ReadPin>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	bf0c      	ite	eq
 8000da4:	2301      	moveq	r3, #1
 8000da6:	2300      	movne	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <app_loop+0x128>)
 8000dae:	70da      	strb	r2, [r3, #3]


	    if(buffer_test[DATA_KEY])
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <app_loop+0x128>)
 8000db2:	78db      	ldrb	r3, [r3, #3]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d005      	beq.n	8000dc4 <app_loop+0x94>
	    	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	4827      	ldr	r0, [pc, #156]	; (8000e5c <app_loop+0x12c>)
 8000dbe:	f002 fbc8 	bl	8003552 <HAL_GPIO_WritePin>
 8000dc2:	e004      	b.n	8000dce <app_loop+0x9e>
	    else
	    	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	4824      	ldr	r0, [pc, #144]	; (8000e5c <app_loop+0x12c>)
 8000dca:	f002 fbc2 	bl	8003552 <HAL_GPIO_WritePin>


	    hw_adc_start();
 8000dce:	f001 f88d 	bl	8001eec <hw_adc_start>
	    adc_read_channels(&adc1_val_ch1);
 8000dd2:	1cbb      	adds	r3, r7, #2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 f89d 	bl	8001f14 <adc_read_channels>
	    buffer_test[DATA_LUX] = map(adc1_val_ch1, 0, 4096, 0, 255);//S1_LUXFLEX
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	23ff      	movs	r3, #255	; 0xff
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000de8:	2100      	movs	r1, #0
 8000dea:	f001 fb37 	bl	800245c <map>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <app_loop+0x128>)
 8000df4:	711a      	strb	r2, [r3, #4]
	    adc_read_channels(&adc1_val_ch4);
 8000df6:	463b      	mov	r3, r7
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 f88b 	bl	8001f14 <adc_read_channels>

		// map(adc1_val_ch0, 0, 4096, 0, 255);//S2_LUXFLEX

		buffer_test[DATA_POT] = map(adc1_val_ch4, 0, 4096, 0, 255);//S_POT // 0 a 50
 8000dfe:	883b      	ldrh	r3, [r7, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	23ff      	movs	r3, #255	; 0xff
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2300      	movs	r3, #0
 8000e08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f001 fb25 	bl	800245c <map>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <app_loop+0x128>)
 8000e18:	715a      	strb	r2, [r3, #5]

#ifdef SERIAL_DEBUG_ANALOG_SENSORS
		static uint8_t tx_buffer[APP_UART_BUFFER_MAX];
		uint32_t tx_size;
		tx_size = snprintf((char *)tx_buffer,APP_UART_BUFFER_MAX-1,"S1_LUXFLEX = %d /S_POT = %d\n", (unsigned short)buffer_test[DATA_LUX], (unsigned short)adc1_val_ch4);
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <app_loop+0x128>)
 8000e1c:	791b      	ldrb	r3, [r3, #4]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	883b      	ldrh	r3, [r7, #0]
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	4613      	mov	r3, r2
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <app_loop+0x130>)
 8000e28:	217f      	movs	r1, #127	; 0x7f
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <app_loop+0x134>)
 8000e2c:	f005 fdde 	bl	80069ec <sniprintf>
 8000e30:	4603      	mov	r3, r0
 8000e32:	607b      	str	r3, [r7, #4]
		hw_uart_tx(tx_buffer,tx_size);
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	480b      	ldr	r0, [pc, #44]	; (8000e64 <app_loop+0x134>)
 8000e38:	f000 f8fc 	bl	8001034 <hw_uart_tx>
#endif

	    hw_adc_stop();
 8000e3c:	f001 f860 	bl	8001f00 <hw_adc_stop>

	    nrf24_app_tx_data(buffer_test,32);
 8000e40:	2120      	movs	r1, #32
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <app_loop+0x128>)
 8000e44:	f000 ffd4 	bl	8001df0 <nrf24_app_tx_data>

	    HAL_Delay(50);
 8000e48:	2032      	movs	r0, #50	; 0x32
 8000e4a:	f001 fbab 	bl	80025a4 <HAL_Delay>
	{
 8000e4e:	e772      	b.n	8000d36 <app_loop+0x6>
 8000e50:	20000238 	.word	0x20000238
 8000e54:	ffffbd98 	.word	0xffffbd98
 8000e58:	20000290 	.word	0x20000290
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	08008f08 	.word	0x08008f08
 8000e64:	200002d8 	.word	0x200002d8

08000e68 <HAL_GPIO_EXTI_Callback>:
#define HW_NRF24_IRQ_PIN     RF_IRQ_Pin
#define HW_NRF24_IRQ_NUMBER  RF_IRQ_EXTI_IRQn


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HW_NRF24_IRQ_PIN)
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d102      	bne.n	8000e7e <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_Interrupt();
 8000e78:	f000 fe5c 	bl	8001b34 <nRF24_Interrupt>
	}
	else if(GPIO_Pin == SW_INT_Pin)
	{
		app_key_pressed();
	}
}
 8000e7c:	e004      	b.n	8000e88 <HAL_GPIO_EXTI_Callback+0x20>
	else if(GPIO_Pin == SW_INT_Pin)
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d101      	bne.n	8000e88 <HAL_GPIO_EXTI_Callback+0x20>
		app_key_pressed();
 8000e84:	f7ff fef8 	bl	8000c78 <app_key_pressed>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <hw_nrf24_ce_low>:

void hw_nrf24_ce_low(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HW_NRF24_CE_PORT, HW_NRF24_CE_PIN, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9a:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <hw_nrf24_ce_low+0x14>)
 8000e9c:	f002 fb59 	bl	8003552 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40010800 	.word	0x40010800

08000ea8 <hw_nrf24_ce_high>:

void hw_nrf24_ce_high(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HW_NRF24_CE_PORT, HW_NRF24_CE_PIN, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb2:	4802      	ldr	r0, [pc, #8]	; (8000ebc <hw_nrf24_ce_high+0x14>)
 8000eb4:	f002 fb4d 	bl	8003552 <HAL_GPIO_WritePin>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40010800 	.word	0x40010800

08000ec0 <hw_nrf24_csn_low>:

// CSN (chip select negative) pin (PB12)
void hw_nrf24_csn_low(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HW_NRF24_CSN_PORT, HW_NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eca:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <hw_nrf24_csn_low+0x14>)
 8000ecc:	f002 fb41 	bl	8003552 <HAL_GPIO_WritePin>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40010800 	.word	0x40010800

08000ed8 <hw_nrf24_csn_high>:

void hw_nrf24_csn_high(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HW_NRF24_CSN_PORT, HW_NRF24_CSN_PIN, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee2:	4802      	ldr	r0, [pc, #8]	; (8000eec <hw_nrf24_csn_high+0x14>)
 8000ee4:	f002 fb35 	bl	8003552 <HAL_GPIO_WritePin>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40010800 	.word	0x40010800

08000ef0 <hw_nrf24_interrupt_set_state>:

void hw_nrf24_interrupt_set_state(bool state)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	if(state)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <hw_nrf24_interrupt_set_state+0x18>
		HAL_NVIC_EnableIRQ(HW_NRF24_IRQ_NUMBER);
 8000f00:	2009      	movs	r0, #9
 8000f02:	f002 f962 	bl	80031ca <HAL_NVIC_EnableIRQ>
	else
		HAL_NVIC_DisableIRQ(HW_NRF24_IRQ_NUMBER);
}
 8000f06:	e002      	b.n	8000f0e <hw_nrf24_interrupt_set_state+0x1e>
		HAL_NVIC_DisableIRQ(HW_NRF24_IRQ_NUMBER);
 8000f08:	2009      	movs	r0, #9
 8000f0a:	f002 f96c 	bl	80031e6 <HAL_NVIC_DisableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <hw_nrf24_init>:
	hw_nrf24_ce_low();
	nRF24_SetRFChannel(HW_NRF23_CHANNEL_CALC(channel));
}

void hw_nrf24_init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
	hw_nrf24_interrupt_set_state(false);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffe8 	bl	8000ef0 <hw_nrf24_interrupt_set_state>
	hw_nrf24_csn_high();
 8000f20:	f7ff ffda 	bl	8000ed8 <hw_nrf24_csn_high>
	hw_nrf24_ce_low();
 8000f24:	f7ff ffb4 	bl	8000e90 <hw_nrf24_ce_low>
	nRF24_Init();
 8000f28:	f000 fb95 	bl	8001656 <nRF24_Init>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <hw_nrf24_spi_rw>:
// Low level SPI transmit/receive function (hardware depended)
// input:
//   data - value to transmit via SPI
// return: value received from SPI
uint8_t hw_nrf24_spi_rw(uint8_t tx_data)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	if(HAL_SPI_TransmitReceive(&HW_NRF24_SPI_PORT,&tx_data,&rx_data,1,100) == HAL_OK)
 8000f3a:	f107 020f 	add.w	r2, r7, #15
 8000f3e:	1df9      	adds	r1, r7, #7
 8000f40:	2364      	movs	r3, #100	; 0x64
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <hw_nrf24_spi_rw+0x30>)
 8000f48:	f004 f948 	bl	80051dc <HAL_SPI_TransmitReceive>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <hw_nrf24_spi_rw+0x26>
		return rx_data;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	e000      	b.n	8000f58 <hw_nrf24_spi_rw+0x28>
	else
		return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200003dc 	.word	0x200003dc

08000f64 <hw_timer_get_tick_ms>:

uint32_t hw_timer_get_tick_ms(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000f68:	f001 fb12 	bl	8002590 <HAL_GetTick>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <hw_timer_get_tick_us>:

uint32_t hw_timer_get_tick_us(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&HW_TIMER_US_PORT);
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <hw_timer_get_tick_us+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000434 	.word	0x20000434

08000f8c <hw_timer_init_us>:

void hw_timer_init_us(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&HW_TIMER_US_PORT);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <hw_timer_init_us+0x10>)
 8000f92:	f004 fbbb 	bl	800570c <HAL_TIM_Base_Start>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000434 	.word	0x20000434

08000fa0 <hw_timer_delay_us>:

	return elapsed;
}

void hw_timer_delay_us(uint32_t delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	  uint32_t start = hw_timer_get_tick_us();
 8000fa8:	f7ff ffe4 	bl	8000f74 <hw_timer_get_tick_us>
 8000fac:	6138      	str	r0, [r7, #16]
	  uint32_t elapsed;
	  uint32_t now;

	  do
	  {
		  now = hw_timer_get_tick_us();
 8000fae:	f7ff ffe1 	bl	8000f74 <hw_timer_get_tick_us>
 8000fb2:	60f8      	str	r0, [r7, #12]

		  if(now < start)
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d204      	bcs.n	8000fc6 <hw_timer_delay_us+0x26>
			  elapsed = (HAL_MAX_DELAY - start) + now + 1;
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e003      	b.n	8000fce <hw_timer_delay_us+0x2e>
		  else
			  elapsed = now - start;
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
	  }
	  while(elapsed < delay);
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d3eb      	bcc.n	8000fae <hw_timer_delay_us+0xe>
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <hw_user_led_set>:

void hw_user_led_set(bool state)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	//GPIO_PinState pin_state = state ? GPIO_PIN_RESET : GPIO_PIN_SET;
	//HAL_GPIO_WritePin(USER_LED_GPIO_Port,USER_LED_Pin,pin_state);
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <hw_user_led_toggle>:

void hw_user_led_toggle(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <hw_uart_tx_byte>:

//##############################################################################################//
//Serial communication configuration

static void hw_uart_tx_byte(uint8_t c)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef *h = huart1.Instance;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <hw_uart_tx_byte+0x30>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]

	// garante que o shift register esta vazio
	while(!(h->SR & UART_FLAG_TXE))
 8001010:	bf00      	nop
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f9      	beq.n	8001012 <hw_uart_tx_byte+0x12>
	{}

	// coloca o valor no shift register
	h->DR = c;
 800101e:	79fa      	ldrb	r2, [r7, #7]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	605a      	str	r2, [r3, #4]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200004c4 	.word	0x200004c4

08001034 <hw_uart_tx>:


void hw_uart_tx(uint8_t *buffer, uint32_t size)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
	for(size_t pos = 0 ; pos < size ; pos++)
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e009      	b.n	8001058 <hw_uart_tx+0x24>
		hw_uart_tx_byte(buffer[pos]);
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ffd7 	bl	8001000 <hw_uart_tx_byte>
	for(size_t pos = 0 ; pos < size ; pos++)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3f1      	bcc.n	8001044 <hw_uart_tx+0x10>
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <hw_init>:
{
	__WFI();
}

void hw_init(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
	hw_timer_init_us();
 800106e:	f7ff ff8d 	bl	8000f8c <hw_timer_init_us>
	hw_user_led_set(false);
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff ffb4 	bl	8000fe0 <hw_user_led_set>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001080:	f001 fa2e 	bl	80024e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001084:	f000 f813 	bl	80010ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001088:	f000 f9de 	bl	8001448 <MX_GPIO_Init>
  MX_I2C1_Init();
 800108c:	f000 f8b4 	bl	80011f8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001090:	f000 f8e0 	bl	8001254 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001094:	f000 f914 	bl	80012c0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001098:	f000 f860 	bl	800115c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800109c:	f000 f9aa 	bl	80013f4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80010a0:	f000 f95a 	bl	8001358 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 80010a4:	f7ff fdf6 	bl	8000c94 <app_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	app_loop();
 80010a8:	f7ff fe42 	bl	8000d30 <app_loop>
 80010ac:	e7fc      	b.n	80010a8 <main+0x2c>

080010ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b094      	sub	sp, #80	; 0x50
 80010b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b8:	2228      	movs	r2, #40	; 0x28
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f005 f82d 	bl	800611c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010de:	2302      	movs	r3, #2
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e2:	2301      	movs	r3, #1
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e6:	2310      	movs	r3, #16
 80010e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2302      	movs	r3, #2
 80010ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010ee:	2300      	movs	r3, #0
 80010f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010f2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fa59 	bl	80045b4 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001108:	f000 fa0a 	bl	8001520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2102      	movs	r1, #2
 8001128:	4618      	mov	r0, r3
 800112a:	f003 fcc5 	bl	8004ab8 <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001134:	f000 f9f4 	bl	8001520 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001138:	2302      	movs	r3, #2
 800113a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800113c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001140:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fe4f 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001150:	f000 f9e6 	bl	8001520 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3750      	adds	r7, #80	; 0x50
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_ADC1_Init+0x94>)
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <MX_ADC1_Init+0x98>)
 8001170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_ADC1_Init+0x94>)
 8001174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_ADC1_Init+0x94>)
 800117c:	2201      	movs	r2, #1
 800117e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_ADC1_Init+0x94>)
 8001182:	2200      	movs	r2, #0
 8001184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_ADC1_Init+0x94>)
 8001188:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800118c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_ADC1_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_ADC1_Init+0x94>)
 8001196:	2202      	movs	r2, #2
 8001198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119a:	4815      	ldr	r0, [pc, #84]	; (80011f0 <MX_ADC1_Init+0x94>)
 800119c:	f001 fa26 	bl	80025ec <HAL_ADC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011a6:	f000 f9bb 	bl	8001520 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80011b2:	2302      	movs	r3, #2
 80011b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_ADC1_Init+0x94>)
 80011bc:	f001 fcce 	bl	8002b5c <HAL_ADC_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011c6:	f000 f9ab 	bl	8001520 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011ca:	2304      	movs	r3, #4
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <MX_ADC1_Init+0x94>)
 80011d8:	f001 fcc0 	bl	8002b5c <HAL_ADC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80011e2:	f000 f99d 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000358 	.word	0x20000358
 80011f4:	40012400 	.word	0x40012400

080011f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x50>)
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <MX_I2C1_Init+0x54>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C1_Init+0x50>)
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_I2C1_Init+0x58>)
 8001206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_I2C1_Init+0x50>)
 8001216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_I2C1_Init+0x50>)
 8001236:	f002 f9bd 	bl	80035b4 <HAL_I2C_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001240:	f000 f96e 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000388 	.word	0x20000388
 800124c:	40005400 	.word	0x40005400
 8001250:	00061a80 	.word	0x00061a80

08001254 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_SPI2_Init+0x64>)
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <MX_SPI2_Init+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001260:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001264:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_SPI2_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_SPI2_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001284:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001288:	2210      	movs	r2, #16
 800128a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_SPI2_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_SPI2_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_SPI2_Init+0x64>)
 80012a0:	220a      	movs	r2, #10
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_SPI2_Init+0x64>)
 80012a6:	f003 ff15 	bl	80050d4 <HAL_SPI_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012b0:	f000 f936 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200003dc 	.word	0x200003dc
 80012bc:	40003800 	.word	0x40003800

080012c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_TIM2_Init+0x94>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_TIM2_Init+0x94>)
 80012e6:	223f      	movs	r2, #63	; 0x3f
 80012e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_TIM2_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_TIM2_Init+0x94>)
 80012f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_TIM2_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_TIM2_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001304:	4813      	ldr	r0, [pc, #76]	; (8001354 <MX_TIM2_Init+0x94>)
 8001306:	f004 f9b1 	bl	800566c <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001310:	f000 f906 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_TIM2_Init+0x94>)
 8001322:	f004 fb97 	bl	8005a54 <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800132c:	f000 f8f8 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_TIM2_Init+0x94>)
 800133e:	f004 fd69 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 f8ea 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000434 	.word	0x20000434

08001358 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_TIM4_Init+0x94>)
 8001376:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <MX_TIM4_Init+0x98>)
 8001378:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63999;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_TIM4_Init+0x94>)
 800137c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001380:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_TIM4_Init+0x94>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_TIM4_Init+0x94>)
 800138a:	22c7      	movs	r2, #199	; 0xc7
 800138c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_TIM4_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_TIM4_Init+0x94>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800139a:	4814      	ldr	r0, [pc, #80]	; (80013ec <MX_TIM4_Init+0x94>)
 800139c:	f004 f966 	bl	800566c <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013a6:	f000 f8bb 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_TIM4_Init+0x94>)
 80013b8:	f004 fb4c 	bl	8005a54 <HAL_TIM_ConfigClockSource>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f000 f8ad 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_TIM4_Init+0x94>)
 80013d4:	f004 fd1e 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013de:	f000 f89f 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000047c 	.word	0x2000047c
 80013f0:	40000800 	.word	0x40000800

080013f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_USART1_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001400:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 800142c:	f004 fd62 	bl	8005ef4 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f000 f873 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200004c4 	.word	0x200004c4
 8001444:	40013800 	.word	0x40013800

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_GPIO_Init+0xc8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <MX_GPIO_Init+0xc8>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_GPIO_Init+0xc8>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_GPIO_Init+0xc8>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a25      	ldr	r2, [pc, #148]	; (8001510 <MX_GPIO_Init+0xc8>)
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b23      	ldr	r3, [pc, #140]	; (8001510 <MX_GPIO_Init+0xc8>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|RF_CE_Pin
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 51c7 	mov.w	r1, #6368	; 0x18e0
 8001492:	4820      	ldr	r0, [pc, #128]	; (8001514 <MX_GPIO_Init+0xcc>)
 8001494:	f002 f85d 	bl	8003552 <HAL_GPIO_WritePin>
                          |RF_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : KEY_SELECT_Pin */
  GPIO_InitStruct.Pin = KEY_SELECT_Pin;
 8001498:	2308      	movs	r3, #8
 800149a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY_SELECT_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	481a      	ldr	r0, [pc, #104]	; (8001514 <MX_GPIO_Init+0xcc>)
 80014ac:	f001 feb6 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin RF_CE_Pin
                           RF_CSN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|RF_CE_Pin
 80014b0:	f44f 53c7 	mov.w	r3, #6368	; 0x18e0
 80014b4:	60bb      	str	r3, [r7, #8]
                          |RF_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2302      	movs	r3, #2
 80014c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	4619      	mov	r1, r3
 80014c8:	4812      	ldr	r0, [pc, #72]	; (8001514 <MX_GPIO_Init+0xcc>)
 80014ca:	f001 fea7 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_INT_Pin RF_IRQ_Pin */
  GPIO_InitStruct.Pin = SW_INT_Pin|RF_IRQ_Pin;
 80014ce:	2309      	movs	r3, #9
 80014d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	480e      	ldr	r0, [pc, #56]	; (800151c <MX_GPIO_Init+0xd4>)
 80014e2:	f001 fe9b 	bl	800321c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2105      	movs	r1, #5
 80014ea:	2006      	movs	r0, #6
 80014ec:	f001 fe51 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014f0:	2006      	movs	r0, #6
 80014f2:	f001 fe6a 	bl	80031ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2102      	movs	r1, #2
 80014fa:	2009      	movs	r0, #9
 80014fc:	f001 fe49 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001500:	2009      	movs	r0, #9
 8001502:	f001 fe62 	bl	80031ca <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	40010800 	.word	0x40010800
 8001518:	10210000 	.word	0x10210000
 800151c:	40010c00 	.word	0x40010c00

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	hw_nrf24_csn_low();
 8001536:	f7ff fcc3 	bl	8000ec0 <hw_nrf24_csn_low>
	hw_nrf24_spi_rw(reg & nRF24_MASK_REG_MAP);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fcf4 	bl	8000f30 <hw_nrf24_spi_rw>
	value = hw_nrf24_spi_rw(nRF24_CMD_NOP);
 8001548:	20ff      	movs	r0, #255	; 0xff
 800154a:	f7ff fcf1 	bl	8000f30 <hw_nrf24_spi_rw>
 800154e:	4603      	mov	r3, r0
 8001550:	73fb      	strb	r3, [r7, #15]
	hw_nrf24_csn_high();
 8001552:	f7ff fcc1 	bl	8000ed8 <hw_nrf24_csn_high>

	return value;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
	hw_nrf24_csn_low();
 8001570:	f7ff fca6 	bl	8000ec0 <hw_nrf24_csn_low>
	if (reg < nRF24_CMD_W_REGISTER) {
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b1f      	cmp	r3, #31
 8001578:	d810      	bhi.n	800159c <nRF24_WriteReg+0x3c>
		// This is a register access
		hw_nrf24_spi_rw(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	f003 031f 	and.w	r3, r3, #31
 8001582:	b25b      	sxtb	r3, r3
 8001584:	f043 0320 	orr.w	r3, r3, #32
 8001588:	b25b      	sxtb	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fccf 	bl	8000f30 <hw_nrf24_spi_rw>
		hw_nrf24_spi_rw(value);
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fccb 	bl	8000f30 <hw_nrf24_spi_rw>
 800159a:	e013      	b.n	80015c4 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		hw_nrf24_spi_rw(reg);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fcc6 	bl	8000f30 <hw_nrf24_spi_rw>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2be1      	cmp	r3, #225	; 0xe1
 80015a8:	d00c      	beq.n	80015c4 <nRF24_WriteReg+0x64>
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2be2      	cmp	r3, #226	; 0xe2
 80015ae:	d009      	beq.n	80015c4 <nRF24_WriteReg+0x64>
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2be3      	cmp	r3, #227	; 0xe3
 80015b4:	d006      	beq.n	80015c4 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2bff      	cmp	r3, #255	; 0xff
 80015ba:	d003      	beq.n	80015c4 <nRF24_WriteReg+0x64>
			// Send register value
			hw_nrf24_spi_rw(value);
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fcb6 	bl	8000f30 <hw_nrf24_spi_rw>
		}
	}
	hw_nrf24_csn_high();
 80015c4:	f7ff fc88 	bl	8000ed8 <hw_nrf24_csn_high>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	4613      	mov	r3, r2
 80015de:	71bb      	strb	r3, [r7, #6]
	hw_nrf24_csn_low();
 80015e0:	f7ff fc6e 	bl	8000ec0 <hw_nrf24_csn_low>
	hw_nrf24_spi_rw(reg);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fca2 	bl	8000f30 <hw_nrf24_spi_rw>
	while (count--) {
 80015ec:	e007      	b.n	80015fe <nRF24_ReadMBReg+0x2e>
		*pBuf++ = hw_nrf24_spi_rw(nRF24_CMD_NOP);
 80015ee:	683c      	ldr	r4, [r7, #0]
 80015f0:	1c63      	adds	r3, r4, #1
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	20ff      	movs	r0, #255	; 0xff
 80015f6:	f7ff fc9b 	bl	8000f30 <hw_nrf24_spi_rw>
 80015fa:	4603      	mov	r3, r0
 80015fc:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80015fe:	79bb      	ldrb	r3, [r7, #6]
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	71ba      	strb	r2, [r7, #6]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f2      	bne.n	80015ee <nRF24_ReadMBReg+0x1e>
	}
	hw_nrf24_csn_high();
 8001608:	f7ff fc66 	bl	8000ed8 <hw_nrf24_csn_high>
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bd90      	pop	{r4, r7, pc}

08001614 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
 8001620:	4613      	mov	r3, r2
 8001622:	71bb      	strb	r3, [r7, #6]
	hw_nrf24_csn_low();
 8001624:	f7ff fc4c 	bl	8000ec0 <hw_nrf24_csn_low>
	hw_nrf24_spi_rw(reg);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fc80 	bl	8000f30 <hw_nrf24_spi_rw>
	while (count--) {
 8001630:	e006      	b.n	8001640 <nRF24_WriteMBReg+0x2c>
		hw_nrf24_spi_rw(*pBuf++);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	603a      	str	r2, [r7, #0]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fc78 	bl	8000f30 <hw_nrf24_spi_rw>
	while (count--) {
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	1e5a      	subs	r2, r3, #1
 8001644:	71ba      	strb	r2, [r7, #6]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f3      	bne.n	8001632 <nRF24_WriteMBReg+0x1e>
	}
	hw_nrf24_csn_high();
 800164a:	f7ff fc45 	bl	8000ed8 <hw_nrf24_csn_high>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
	// Write to registers their initial values

	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800165a:	2108      	movs	r1, #8
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff ff7f 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8001662:	213f      	movs	r1, #63	; 0x3f
 8001664:	2001      	movs	r0, #1
 8001666:	f7ff ff7b 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800166a:	2103      	movs	r1, #3
 800166c:	2002      	movs	r0, #2
 800166e:	f7ff ff77 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8001672:	2103      	movs	r1, #3
 8001674:	2003      	movs	r0, #3
 8001676:	f7ff ff73 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 800167a:	2103      	movs	r1, #3
 800167c:	2004      	movs	r0, #4
 800167e:	f7ff ff6f 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8001682:	2102      	movs	r1, #2
 8001684:	2005      	movs	r0, #5
 8001686:	f7ff ff6b 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800168a:	210e      	movs	r1, #14
 800168c:	2006      	movs	r0, #6
 800168e:	f7ff ff67 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8001692:	2100      	movs	r1, #0
 8001694:	2007      	movs	r0, #7
 8001696:	f7ff ff63 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800169a:	2100      	movs	r1, #0
 800169c:	2011      	movs	r0, #17
 800169e:	f7ff ff5f 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 80016a2:	2100      	movs	r1, #0
 80016a4:	2012      	movs	r0, #18
 80016a6:	f7ff ff5b 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 80016aa:	2100      	movs	r1, #0
 80016ac:	2013      	movs	r0, #19
 80016ae:	f7ff ff57 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80016b2:	2100      	movs	r1, #0
 80016b4:	2014      	movs	r0, #20
 80016b6:	f7ff ff53 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80016ba:	2100      	movs	r1, #0
 80016bc:	2015      	movs	r0, #21
 80016be:	f7ff ff4f 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80016c2:	2100      	movs	r1, #0
 80016c4:	2016      	movs	r0, #22
 80016c6:	f7ff ff4b 	bl	8001560 <nRF24_WriteReg>

	// enable advanced features
	nRF24_WriteReg(nRF24_CMD_ACTIVATE, 0x73);
 80016ca:	2173      	movs	r1, #115	; 0x73
 80016cc:	2050      	movs	r0, #80	; 0x50
 80016ce:	f7ff ff47 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x3F);
 80016d2:	213f      	movs	r1, #63	; 0x3f
 80016d4:	201c      	movs	r0, #28
 80016d6:	f7ff ff43 	bl	8001560 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80016da:	2100      	movs	r1, #0
 80016dc:	201d      	movs	r0, #29
 80016de:	f7ff ff3f 	bl	8001560 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80016e2:	f000 f9d7 	bl	8001a94 <nRF24_FlushRX>
	nRF24_FlushTX();
 80016e6:	f000 f9cd 	bl	8001a84 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80016ea:	f000 f9db 	bl	8001aa4 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	hw_nrf24_csn_high();
 80016ee:	f7ff fbf3 	bl	8000ed8 <hw_nrf24_csn_high>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <nRF24_SetPowerMode>:
}

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff ff13 	bl	800152c <nRF24_ReadReg>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d104      	bne.n	800171a <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e003      	b.n	8001722 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	f023 0302 	bic.w	r3, r3, #2
 8001720:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	4619      	mov	r1, r3
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff ff1a 	bl	8001560 <nRF24_WriteReg>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff fef4 	bl	800152c <nRF24_ReadReg>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	b25a      	sxtb	r2, r3
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	4313      	orrs	r3, r2
 8001760:	b25b      	sxtb	r3, r3
 8001762:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	4619      	mov	r1, r3
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff fef9 	bl	8001560 <nRF24_WriteReg>
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff fed3 	bl	800152c <nRF24_ReadReg>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	f023 030c 	bic.w	r3, r3, #12
 8001790:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme | nRF24_MASK_CRC);
 8001792:	79fa      	ldrb	r2, [r7, #7]
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	4313      	orrs	r3, r2
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f043 030c 	orr.w	r3, r3, #12
 800179e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	4619      	mov	r1, r3
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fedb 	bl	8001560 <nRF24_WriteReg>
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4619      	mov	r1, r3
 80017c0:	2005      	movs	r0, #5
 80017c2:	f7ff fecd 	bl	8001560 <nRF24_WriteReg>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	460a      	mov	r2, r1
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	4613      	mov	r3, r2
 80017dc:	71bb      	strb	r3, [r7, #6]
	// Set auto retransmit settings (SETUP_RETR register)
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4619      	mov	r1, r3
 80017f6:	2004      	movs	r0, #4
 80017f8:	f7ff feb2 	bl	8001560 <nRF24_WriteReg>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	3b02      	subs	r3, #2
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4619      	mov	r1, r3
 8001816:	2003      	movs	r0, #3
 8001818:	f7ff fea2 	bl	8001560 <nRF24_WriteReg>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b06      	cmp	r3, #6
 8001834:	d00a      	beq.n	800184c <nRF24_SetAddr+0x28>
 8001836:	2b06      	cmp	r3, #6
 8001838:	dc36      	bgt.n	80018a8 <nRF24_SetAddr+0x84>
 800183a:	2b01      	cmp	r3, #1
 800183c:	dc02      	bgt.n	8001844 <nRF24_SetAddr+0x20>
 800183e:	2b00      	cmp	r3, #0
 8001840:	da04      	bge.n	800184c <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8001842:	e031      	b.n	80018a8 <nRF24_SetAddr+0x84>
 8001844:	3b02      	subs	r3, #2
	switch (pipe) {
 8001846:	2b03      	cmp	r3, #3
 8001848:	d82e      	bhi.n	80018a8 <nRF24_SetAddr+0x84>
 800184a:	e023      	b.n	8001894 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 800184c:	2003      	movs	r0, #3
 800184e:	f7ff fe6d 	bl	800152c <nRF24_ReadReg>
 8001852:	4603      	mov	r3, r0
 8001854:	3301      	adds	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	603b      	str	r3, [r7, #0]
			hw_nrf24_csn_low();
 8001860:	f7ff fb2e 	bl	8000ec0 <hw_nrf24_csn_low>
			hw_nrf24_spi_rw(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <nRF24_SetAddr+0x90>)
 8001868:	5cd3      	ldrb	r3, [r2, r3]
 800186a:	f043 0320 	orr.w	r3, r3, #32
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb5d 	bl	8000f30 <hw_nrf24_spi_rw>
				hw_nrf24_spi_rw(*addr--);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	1e5a      	subs	r2, r3, #1
 800187a:	603a      	str	r2, [r7, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fb56 	bl	8000f30 <hw_nrf24_spi_rw>
			} while (addr_width--);
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	1e5a      	subs	r2, r3, #1
 8001888:	73fa      	strb	r2, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f3      	bne.n	8001876 <nRF24_SetAddr+0x52>
			hw_nrf24_csn_high();
 800188e:	f7ff fb23 	bl	8000ed8 <hw_nrf24_csn_high>
			break;
 8001892:	e00a      	b.n	80018aa <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <nRF24_SetAddr+0x90>)
 8001898:	5cd2      	ldrb	r2, [r2, r3]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f7ff fe5d 	bl	8001560 <nRF24_WriteReg>
			break;
 80018a6:	e000      	b.n	80018aa <nRF24_SetAddr+0x86>
			break;
 80018a8:	bf00      	nop
	}
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08008f50 	.word	0x08008f50

080018b8 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80018c2:	2006      	movs	r0, #6
 80018c4:	f7ff fe32 	bl	800152c <nRF24_ReadReg>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	f023 0306 	bic.w	r3, r3, #6
 80018d2:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4313      	orrs	r3, r2
 80018da:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	4619      	mov	r1, r3
 80018e0:	2006      	movs	r0, #6
 80018e2:	f7ff fe3d 	bl	8001560 <nRF24_WriteReg>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80018f8:	2006      	movs	r0, #6
 80018fa:	f7ff fe17 	bl	800152c <nRF24_ReadReg>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001908:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4313      	orrs	r3, r2
 8001910:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	4619      	mov	r1, r3
 8001916:	2006      	movs	r0, #6
 8001918:	f7ff fe22 	bl	8001560 <nRF24_WriteReg>
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
 800192e:	460b      	mov	r3, r1
 8001930:	71bb      	strb	r3, [r7, #6]
 8001932:	4613      	mov	r3, r2
 8001934:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8001936:	2002      	movs	r0, #2
 8001938:	f7ff fdf8 	bl	800152c <nRF24_ReadReg>
 800193c:	4603      	mov	r3, r0
 800193e:	b25a      	sxtb	r2, r3
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	b25b      	sxtb	r3, r3
 800194a:	4313      	orrs	r3, r2
 800194c:	b25b      	sxtb	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	4619      	mov	r1, r3
 800195a:	2002      	movs	r0, #2
 800195c:	f7ff fe00 	bl	8001560 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <nRF24_SetRXPipe+0xa4>)
 8001964:	5cd2      	ldrb	r2, [r2, r3]
 8001966:	797b      	ldrb	r3, [r7, #5]
 8001968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f7ff fdf5 	bl	8001560 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8001976:	2001      	movs	r0, #1
 8001978:	f7ff fdd8 	bl	800152c <nRF24_ReadReg>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8001980:	79bb      	ldrb	r3, [r7, #6]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d10a      	bne.n	800199c <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2201      	movs	r2, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	b25a      	sxtb	r2, r3
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001994:	4313      	orrs	r3, r2
 8001996:	b25b      	sxtb	r3, r3
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e00b      	b.n	80019b4 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2201      	movs	r2, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	b25a      	sxtb	r2, r3
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ae:	4013      	ands	r3, r2
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	4619      	mov	r1, r3
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff fdd1 	bl	8001560 <nRF24_WriteReg>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08008f48 	.word	0x08008f48

080019cc <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff fda8 	bl	800152c <nRF24_ReadReg>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2201      	movs	r2, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	b25a      	sxtb	r2, r3
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	4619      	mov	r1, r3
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fdb1 	bl	8001560 <nRF24_WriteReg>
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <nRF24_SetFeatureReg>:
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}

void nRF24_SetFeatureReg(uint8_t features)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = nRF24_ReadReg(nRF24_REG_FEATURE);
 8001a10:	201d      	movs	r0, #29
 8001a12:	f7ff fd8b 	bl	800152c <nRF24_ReadReg>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]

	reg &= ~nRF24_MASK_FEATURE_REG;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	f023 0307 	bic.w	r3, r3, #7
 8001a20:	73fb      	strb	r3, [r7, #15]
	reg |= features;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteReg(nRF24_REG_FEATURE, reg);
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	201d      	movs	r0, #29
 8001a30:	f7ff fd96 	bl	8001560 <nRF24_WriteReg>
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8001a40:	2007      	movs	r0, #7
 8001a42:	f7ff fd73 	bl	800152c <nRF24_ReadReg>
 8001a46:	4603      	mov	r3, r0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8001a50:	2017      	movs	r0, #23
 8001a52:	f7ff fd6b 	bl	800152c <nRF24_ReadReg>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	b2db      	uxtb	r3, r3
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <nRF24_ResetPLOS>:
uint8_t nRF24_GetFeatureReg(void)
{
	return nRF24_ReadReg(nRF24_REG_FEATURE);
}
// Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
void nRF24_ResetPLOS(void) {
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 8001a68:	2005      	movs	r0, #5
 8001a6a:	f7ff fd5f 	bl	800152c <nRF24_ReadReg>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4619      	mov	r1, r3
 8001a76:	2005      	movs	r0, #5
 8001a78:	f7ff fd72 	bl	8001560 <nRF24_WriteReg>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <nRF24_FlushTX>:

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8001a88:	21ff      	movs	r1, #255	; 0xff
 8001a8a:	20e1      	movs	r0, #225	; 0xe1
 8001a8c:	f7ff fd68 	bl	8001560 <nRF24_WriteReg>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8001a98:	21ff      	movs	r1, #255	; 0xff
 8001a9a:	20e2      	movs	r0, #226	; 0xe2
 8001a9c:	f7ff fd60 	bl	8001560 <nRF24_WriteReg>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8001aaa:	2007      	movs	r0, #7
 8001aac:	f7ff fd3e 	bl	800152c <nRF24_ReadReg>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001aba:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	2007      	movs	r0, #7
 8001ac2:	f7ff fd4d 	bl	8001560 <nRF24_WriteReg>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	461a      	mov	r2, r3
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	20a0      	movs	r0, #160	; 0xa0
 8001ae2:	f7ff fd97 	bl	8001614 <nRF24_WriteMBReg>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <nRF24_ReadPipePayload>:
	return nRF24_STATUS_RXFIFO_DATA;
}

// pipe must be valid (< 6) and must have data available (check befor calling)
void nRF24_ReadPipePayload(uint8_t pipe, uint8_t *pBuf, uint8_t *length)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	73fb      	strb	r3, [r7, #15]
	// Get payload length
	*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <nRF24_ReadPipePayload+0x40>)
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fd11 	bl	800152c <nRF24_ReadReg>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	701a      	strb	r2, [r3, #0]

	// Read a payload from the RX FIFO
	if (*length) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <nRF24_ReadPipePayload+0x38>
		nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	2061      	movs	r0, #97	; 0x61
 8001b24:	f7ff fd54 	bl	80015d0 <nRF24_ReadMBReg>
	}
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	08008f48 	.word	0x08008f48

08001b34 <nRF24_Interrupt>:
void nRF24_WriteAckPayload(uint8_t pipe, uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_ACK_PAYLOAD | (pipe & 0x07), pBuf, length);
}

void nRF24_Interrupt(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
	uint8_t status;
	uint8_t fifo_status;
	uint8_t pipe;

	status = nRF24_GetStatus();
 8001b3a:	f7ff ff7f 	bl	8001a3c <nRF24_GetStatus>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	fifo_status = nRF24_GetStatus_RXFIFO();
 8001b42:	f7ff ff83 	bl	8001a4c <nRF24_GetStatus_RXFIFO>
 8001b46:	4603      	mov	r3, r0
 8001b48:	71bb      	strb	r3, [r7, #6]
	pipe = (status & nRF24_MASK_RX_P_NO) >> 1;
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	105b      	asrs	r3, r3, #1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	717b      	strb	r3, [r7, #5]

	if(status & nRF24_FLAG_RX_DR) // data received
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00d      	beq.n	8001b7c <nRF24_Interrupt+0x48>
	{
		// 0: data; 1: empty; 2: full; 3: invalid state
		if((fifo_status != nRF24_STATUS_RXFIFO_EMPTY) && (pipe < 6))
 8001b60:	79bb      	ldrb	r3, [r7, #6]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d006      	beq.n	8001b74 <nRF24_Interrupt+0x40>
 8001b66:	797b      	ldrb	r3, [r7, #5]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d803      	bhi.n	8001b74 <nRF24_Interrupt+0x40>
			nrf24_app_rx_data_cbk(pipe);
 8001b6c:	797b      	ldrb	r3, [r7, #5]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f8aa 	bl	8001cc8 <nrf24_app_rx_data_cbk>

		nRF24_WriteReg(nRF24_REG_STATUS, nRF24_FLAG_RX_DR);
 8001b74:	2140      	movs	r1, #64	; 0x40
 8001b76:	2007      	movs	r0, #7
 8001b78:	f7ff fcf2 	bl	8001560 <nRF24_WriteReg>
	}

	if(status & nRF24_FLAG_TX_DS) // data sent
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <nRF24_Interrupt+0x60>
	{
		nRF24_WriteReg(nRF24_REG_STATUS, nRF24_FLAG_TX_DS);
 8001b86:	2120      	movs	r1, #32
 8001b88:	2007      	movs	r0, #7
 8001b8a:	f7ff fce9 	bl	8001560 <nRF24_WriteReg>
		nrf24_app_tx_data_cbk(NRF24_APP_OK);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f000 f886 	bl	8001ca0 <nrf24_app_tx_data_cbk>
	}

	if(status & nRF24_FLAG_MAX_RT) // max RT reached
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00a      	beq.n	8001bb4 <nRF24_Interrupt+0x80>
	{
		nRF24_WriteReg(nRF24_REG_STATUS, nRF24_FLAG_MAX_RT);
 8001b9e:	2110      	movs	r1, #16
 8001ba0:	2007      	movs	r0, #7
 8001ba2:	f7ff fcdd 	bl	8001560 <nRF24_WriteReg>
		nRF24_FlushTX();
 8001ba6:	f7ff ff6d 	bl	8001a84 <nRF24_FlushTX>
		nRF24_ResetPLOS();
 8001baa:	f7ff ff5a 	bl	8001a62 <nRF24_ResetPLOS>
		nrf24_app_tx_data_cbk(NRF24_APP_TIMEOUT);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f000 f876 	bl	8001ca0 <nrf24_app_tx_data_cbk>
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <all_all_tx_int>:
#define UART_SendBufHex(x,y)

#endif

static void all_all_tx_int(nrf24_driver_t *driver, nrf24_tx_result_t status)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
	nrf24_app_cbk_func cbk = driver->client_tx_cbk;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	60fb      	str	r3, [r7, #12]

	if(cbk)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <all_all_tx_int+0x24>
		cbk(nRF24_PIPE_INVALID, 0, 0, status);
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	68fc      	ldr	r4, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	20ff      	movs	r0, #255	; 0xff
 8001bde:	47a0      	blx	r4

	driver->role = NRF24_APP_ROLE_PRX;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2020 	strb.w	r2, [r3, #32]
	driver->cfg[driver->role].cbk(&driver->config);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3202      	adds	r2, #2
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	3221      	adds	r2, #33	; 0x21
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4798      	blx	r3
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <all_all_rx_int>:

static void all_all_rx_int(nrf24_driver_t *driver, uint8_t pipe)
{
 8001c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c0c:	b087      	sub	sp, #28
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	70fb      	strb	r3, [r7, #3]
 8001c16:	466b      	mov	r3, sp
 8001c18:	461e      	mov	r6, r3
	uint8_t len = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	72fb      	strb	r3, [r7, #11]
	uint8_t buffer[MAX_PAYLOAD_LEN];
 8001c1e:	2320      	movs	r3, #32
 8001c20:	3b01      	subs	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	2320      	movs	r3, #32
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	4691      	mov	r9, r2
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c42:	2320      	movs	r3, #32
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2200      	movs	r2, #0
 8001c48:	461c      	mov	r4, r3
 8001c4a:	4615      	mov	r5, r2
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	00eb      	lsls	r3, r5, #3
 8001c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5a:	00e2      	lsls	r2, r4, #3
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	3307      	adds	r3, #7
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	ebad 0d03 	sub.w	sp, sp, r3
 8001c68:	466b      	mov	r3, sp
 8001c6a:	3300      	adds	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
	nrf24_app_cbk_func cbk = driver->client_rx_cbk;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	60fb      	str	r3, [r7, #12]
//	nRF24_CE_L();

	// Pass PTX request to application
	nRF24_ReadPipePayload(pipe, buffer, &len);
 8001c74:	f107 020b 	add.w	r2, r7, #11
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	6939      	ldr	r1, [r7, #16]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff37 	bl	8001af0 <nRF24_ReadPipePayload>

	if(cbk)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <all_all_rx_int+0x8c>
		cbk(pipe, buffer, MAX_PAYLOAD_LEN, NRF24_APP_OK);
 8001c88:	2220      	movs	r2, #32
 8001c8a:	78f8      	ldrb	r0, [r7, #3]
 8001c8c:	68fc      	ldr	r4, [r7, #12]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	6939      	ldr	r1, [r7, #16]
 8001c92:	47a0      	blx	r4
 8001c94:	46b5      	mov	sp, r6

//	nRF24_CE_H();
}
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001ca0 <nrf24_app_tx_data_cbk>:

void nrf24_app_tx_data_cbk(nrf24_tx_result_t status)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
	driver->tx_int.cbk(driver, status);
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <nrf24_app_tx_data_cbk+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <nrf24_app_tx_data_cbk+0x24>)
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	79f9      	ldrb	r1, [r7, #7]
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4798      	blx	r3
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000504 	.word	0x20000504

08001cc8 <nrf24_app_rx_data_cbk>:

void nrf24_app_rx_data_cbk(uint8_t pipe)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
	driver->rx_int.cbk(driver, pipe);
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <nrf24_app_rx_data_cbk+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <nrf24_app_rx_data_cbk+0x24>)
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	79f9      	ldrb	r1, [r7, #7]
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4798      	blx	r3
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000504 	.word	0x20000504

08001cf0 <all_ptx_cfg>:

static void all_ptx_cfg(nrf24_config_t *config)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
//	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR_PTX);
//	nRF24_DisableAA(nRF24_PIPE1);
//	nRF24_EnableAA(nRF24_PIPETX);
//	nRF24_SetOperationalMode(nRF24_MODE_TX);

	nRF24_SetAddr(nRF24_PIPETX, config->network_address);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3305      	adds	r3, #5
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2006      	movs	r0, #6
 8001d00:	f7ff fd90 	bl	8001824 <nRF24_SetAddr>
	nRF24_SetAddr(nRF24_PIPE0, config->network_address);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3305      	adds	r3, #5
 8001d08:	4619      	mov	r1, r3
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7ff fd8a 	bl	8001824 <nRF24_SetAddr>
	nRF24_EnableAA(nRF24_PIPE0);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff fe5b 	bl	80019cc <nRF24_EnableAA>
	nRF24_SetOperationalMode(nRF24_MODE_TX);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff fd0c 	bl	8001734 <nRF24_SetOperationalMode>

	hw_nrf24_ce_high();
 8001d1c:	f7ff f8c4 	bl	8000ea8 <hw_nrf24_ce_high>

	nRF24_FlushTX();
 8001d20:	f7ff feb0 	bl	8001a84 <nRF24_FlushTX>
	nRF24_FlushRX();
 8001d24:	f7ff feb6 	bl	8001a94 <nRF24_FlushRX>

	hw_timer_delay_us(140);
 8001d28:	208c      	movs	r0, #140	; 0x8c
 8001d2a:	f7ff f939 	bl	8000fa0 <hw_timer_delay_us>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <all_prx_cfg>:

static void all_prx_cfg(nrf24_config_t *config)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
//	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR_PRX); // program address for pipe
//	nRF24_DisableAA(nRF24_PIPETX);
//	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, MAX_PAYLOAD_LEN); // Auto-ACK: enabled, payload length: MAX_PAYLOAD_LEN bytes
//	nRF24_SetOperationalMode(nRF24_MODE_RX);

	nRF24_SetAddr(nRF24_PIPE0, config->network_address); // program address for pipe
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3305      	adds	r3, #5
 8001d42:	4619      	mov	r1, r3
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff fd6d 	bl	8001824 <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE0, nRF24_AA_ON, MAX_PAYLOAD_LEN); // Auto-ACK: enabled, payload length: MAX_PAYLOAD_LEN bytes
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fde7 	bl	8001924 <nRF24_SetRXPipe>
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f7ff fcec 	bl	8001734 <nRF24_SetOperationalMode>

	hw_nrf24_ce_high();
 8001d5c:	f7ff f8a4 	bl	8000ea8 <hw_nrf24_ce_high>

	nRF24_FlushTX();
 8001d60:	f7ff fe90 	bl	8001a84 <nRF24_FlushTX>
	nRF24_FlushRX();
 8001d64:	f7ff fe96 	bl	8001a94 <nRF24_FlushRX>

	hw_timer_delay_us(140);
 8001d68:	208c      	movs	r0, #140	; 0x8c
 8001d6a:	f7ff f919 	bl	8000fa0 <hw_timer_delay_us>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <all_all_pre_common_cfg>:

static void all_all_pre_common_cfg(nrf24_config_t *config)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
	nRF24_SetRFChannel(config->channel);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fd15 	bl	80017b2 <nRF24_SetRFChannel>
	nRF24_SetDataRate(config->data_rate);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	785b      	ldrb	r3, [r3, #1]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fdae 	bl	80018ee <nRF24_SetDataRate>
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8001d92:	200c      	movs	r0, #12
 8001d94:	f7ff fcef 	bl	8001776 <nRF24_SetCRCScheme>
	nRF24_SetAddrWidth(config->address_size);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7a9b      	ldrb	r3, [r3, #10]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fd31 	bl	8001804 <nRF24_SetAddrWidth>
	nRF24_SetAutoRetr(config->rdelay,config->rcount);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	789a      	ldrb	r2, [r3, #2]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f7ff fd0e 	bl	80017ce <nRF24_SetAutoRetr>
	nRF24_SetTXPower(config->tx_power);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	791b      	ldrb	r3, [r3, #4]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fd7e 	bl	80018b8 <nRF24_SetTXPower>
	nRF24_SetFeatureReg(0);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff fe22 	bl	8001a06 <nRF24_SetFeatureReg>
	//nRF24_SetFeatureReg(nRF24_MASK_EN_DPL | nRF24_MASK_EN_ACK_PAY);
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <all_all_post_common_cfg>:

static void all_all_post_common_cfg(nrf24_config_t *config)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
	hw_nrf24_ce_high();
 8001dd2:	f7ff f869 	bl	8000ea8 <hw_nrf24_ce_high>
	nRF24_SetPowerMode(nRF24_PWR_UP);
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	f7ff fc8d 	bl	80016f6 <nRF24_SetPowerMode>
	nRF24_ClearIRQFlags();
 8001ddc:	f7ff fe62 	bl	8001aa4 <nRF24_ClearIRQFlags>
	hw_nrf24_interrupt_set_state(true);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7ff f885 	bl	8000ef0 <hw_nrf24_interrupt_set_state>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <nrf24_app_tx_data>:
{
	return MAX_PAYLOAD_LEN;
}

bool nrf24_app_tx_data(uint8_t *pBuf, uint8_t length)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
	if(driver->role == NRF24_APP_ROLE_PRX)
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <nrf24_app_tx_data+0x58>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d119      	bne.n	8001e3c <nrf24_app_tx_data+0x4c>
	{
		driver->role = NRF24_APP_ROLE_PTX;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <nrf24_app_tx_data+0x58>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]
		driver->cfg[driver->role].cbk(&driver->config);
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <nrf24_app_tx_data+0x58>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <nrf24_app_tx_data+0x58>)
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e1e:	3202      	adds	r2, #2
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <nrf24_app_tx_data+0x58>)
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	3221      	adds	r2, #33	; 0x21
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4798      	blx	r3

		nRF24_WritePayload(pBuf, length);
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	4619      	mov	r1, r3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fe4b 	bl	8001ace <nRF24_WritePayload>

//		nRF24_CE_H(); // CE must be held high at least 10us
//		HAL_Delay_us(15);
//		nRF24_CE_L();

		return true;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <nrf24_app_tx_data+0x4e>
	}
	else // there is some pending transmission !
		return false;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000504 	.word	0x20000504

08001e4c <nrf24_app_init>:

void nrf24_app_init(nrf24_config_t *config, nrf24_app_cbk_func tx_cbk, nrf24_app_cbk_func rx_cbk)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
	hw_nrf24_init();
 8001e58:	f7ff f85d 	bl	8000f16 <hw_nrf24_init>

	driver = &driver_inst;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <nrf24_app_init+0x84>)
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <nrf24_app_init+0x88>)
 8001e60:	601a      	str	r2, [r3, #0]
	memcpy(&driver->config,config,sizeof(nrf24_config_t));
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <nrf24_app_init+0x84>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3321      	adds	r3, #33	; 0x21
 8001e68:	220b      	movs	r2, #11
 8001e6a:	68f9      	ldr	r1, [r7, #12]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 f947 	bl	8006100 <memcpy>

	driver->role = NRF24_APP_ROLE_PRX;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <nrf24_app_init+0x84>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]
	driver->client_tx_cbk = tx_cbk;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <nrf24_app_init+0x84>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	619a      	str	r2, [r3, #24]
	driver->client_rx_cbk = rx_cbk;
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <nrf24_app_init+0x84>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	61da      	str	r2, [r3, #28]

	driver->pre_common_cfg(&driver->config);
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <nrf24_app_init+0x84>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <nrf24_app_init+0x84>)
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	3221      	adds	r2, #33	; 0x21
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4798      	blx	r3
	driver->cfg[driver->role].cbk(&driver->config);
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <nrf24_app_init+0x84>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <nrf24_app_init+0x84>)
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ea8:	3202      	adds	r2, #2
 8001eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <nrf24_app_init+0x84>)
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	3221      	adds	r2, #33	; 0x21
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4798      	blx	r3
	driver->post_common_cfg(&driver->config);
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <nrf24_app_init+0x84>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <nrf24_app_init+0x84>)
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	3221      	adds	r2, #33	; 0x21
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4798      	blx	r3
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000504 	.word	0x20000504
 8001ed4:	2000000c 	.word	0x2000000c

08001ed8 <adc_calibration>:
//uint16_t adc_data[ADC_NUM_CHANNELS];
//volatile uint32_t adc_data_avg[ADC_NUM_CHANNELS];
//volatile uint32_t distance;

void adc_calibration(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <adc_calibration+0x10>)
 8001ede:	f000 ffc1 	bl	8002e64 <HAL_ADCEx_Calibration_Start>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000358 	.word	0x20000358

08001eec <hw_adc_start>:

void hw_adc_start(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <hw_adc_start+0x10>)
 8001ef2:	f000 fc53 	bl	800279c <HAL_ADC_Start>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000358 	.word	0x20000358

08001f00 <hw_adc_stop>:

void hw_adc_stop(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <hw_adc_stop+0x10>)
 8001f06:	f000 fcf7 	bl	80028f8 <HAL_ADC_Stop>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000358 	.word	0x20000358

08001f14 <adc_read_channels>:

bool adc_read_channels(uint16_t *adc_val_ch)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef adc_hal_status;

	while(1)
	{
			adc_hal_status = HAL_ADC_PollForConversion(&hadc1, 100);
 8001f1c:	2164      	movs	r1, #100	; 0x64
 8001f1e:	480c      	ldr	r0, [pc, #48]	; (8001f50 <adc_read_channels+0x3c>)
 8001f20:	f000 fd16 	bl	8002950 <HAL_ADC_PollForConversion>
 8001f24:	4603      	mov	r3, r0
 8001f26:	73fb      	strb	r3, [r7, #15]
			if (adc_hal_status == HAL_OK)
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d108      	bne.n	8001f40 <adc_read_channels+0x2c>
			{
			*adc_val_ch = (uint16_t) HAL_ADC_GetValue(&hadc1);
 8001f2e:	4808      	ldr	r0, [pc, #32]	; (8001f50 <adc_read_channels+0x3c>)
 8001f30:	f000 fe08 	bl	8002b44 <HAL_ADC_GetValue>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	801a      	strh	r2, [r3, #0]

			return true;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e003      	b.n	8001f48 <adc_read_channels+0x34>
			}

			else if (adc_hal_status != HAL_OK){
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0ea      	beq.n	8001f1c <adc_read_channels+0x8>
				return false;
 8001f46:	2300      	movs	r3, #0
			}
	}
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000358 	.word	0x20000358

08001f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6193      	str	r3, [r2, #24]
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	61d3      	str	r3, [r2, #28]
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_MspInit+0x5c>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_MspInit+0x60>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_MspInit+0x60>)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010000 	.word	0x40010000

08001fb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <HAL_ADC_MspInit+0x6c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d121      	bne.n	800201c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_ADC_MspInit+0x70>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	4a12      	ldr	r2, [pc, #72]	; (8002028 <HAL_ADC_MspInit+0x70>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe2:	6193      	str	r3, [r2, #24]
 8001fe4:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_ADC_MspInit+0x70>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_ADC_MspInit+0x70>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <HAL_ADC_MspInit+0x70>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_ADC_MspInit+0x70>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8002008:	2311      	movs	r3, #17
 800200a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200c:	2303      	movs	r3, #3
 800200e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	4619      	mov	r1, r3
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <HAL_ADC_MspInit+0x74>)
 8002018:	f001 f900 	bl	800321c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40012400 	.word	0x40012400
 8002028:	40021000 	.word	0x40021000
 800202c:	40010800 	.word	0x40010800

08002030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <HAL_I2C_MspInit+0x70>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d123      	bne.n	8002098 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_I2C_MspInit+0x74>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <HAL_I2C_MspInit+0x74>)
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_I2C_MspInit+0x74>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002068:	23c0      	movs	r3, #192	; 0xc0
 800206a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206c:	2312      	movs	r3, #18
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4619      	mov	r1, r3
 800207a:	480b      	ldr	r0, [pc, #44]	; (80020a8 <HAL_I2C_MspInit+0x78>)
 800207c:	f001 f8ce 	bl	800321c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_I2C_MspInit+0x74>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_I2C_MspInit+0x74>)
 8002086:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800208a:	61d3      	str	r3, [r2, #28]
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_I2C_MspInit+0x74>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002098:	bf00      	nop
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40005400 	.word	0x40005400
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010c00 	.word	0x40010c00

080020ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_SPI_MspInit+0x8c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d131      	bne.n	8002130 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_SPI_MspInit+0x90>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HAL_SPI_MspInit+0x90>)
 80020d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d6:	61d3      	str	r3, [r2, #28]
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_SPI_MspInit+0x90>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_SPI_MspInit+0x90>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <HAL_SPI_MspInit+0x90>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_SPI_MspInit+0x90>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80020fc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	4619      	mov	r1, r3
 8002110:	480b      	ldr	r0, [pc, #44]	; (8002140 <HAL_SPI_MspInit+0x94>)
 8002112:	f001 f883 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002116:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800211a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002120:	2302      	movs	r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	4619      	mov	r1, r3
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <HAL_SPI_MspInit+0x94>)
 800212c:	f001 f876 	bl	800321c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002130:	bf00      	nop
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40003800 	.word	0x40003800
 800213c:	40021000 	.word	0x40021000
 8002140:	40010c00 	.word	0x40010c00

08002144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002154:	d10c      	bne.n	8002170 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_TIM_Base_MspInit+0x68>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a14      	ldr	r2, [pc, #80]	; (80021ac <HAL_TIM_Base_MspInit+0x68>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	61d3      	str	r3, [r2, #28]
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_TIM_Base_MspInit+0x68>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800216e:	e018      	b.n	80021a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d113      	bne.n	80021a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <HAL_TIM_Base_MspInit+0x68>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <HAL_TIM_Base_MspInit+0x68>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_TIM_Base_MspInit+0x68>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2103      	movs	r1, #3
 8002196:	201e      	movs	r0, #30
 8002198:	f000 fffb 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800219c:	201e      	movs	r0, #30
 800219e:	f001 f814 	bl	80031ca <HAL_NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40000800 	.word	0x40000800

080021b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <HAL_UART_MspInit+0x8c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d131      	bne.n	8002238 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_UART_MspInit+0x90>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <HAL_UART_MspInit+0x90>)
 80021da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <HAL_UART_MspInit+0x90>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_UART_MspInit+0x90>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <HAL_UART_MspInit+0x90>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_UART_MspInit+0x90>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002208:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0310 	add.w	r3, r7, #16
 8002216:	4619      	mov	r1, r3
 8002218:	480b      	ldr	r0, [pc, #44]	; (8002248 <HAL_UART_MspInit+0x94>)
 800221a:	f000 ffff 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800221e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	4619      	mov	r1, r3
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <HAL_UART_MspInit+0x94>)
 8002234:	f000 fff2 	bl	800321c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002238:	bf00      	nop
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40013800 	.word	0x40013800
 8002244:	40021000 	.word	0x40021000
 8002248:	40010800 	.word	0x40010800

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <HardFault_Handler+0x4>

0800225e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <MemManage_Handler+0x4>

08002264 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <BusFault_Handler+0x4>

0800226a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <UsageFault_Handler+0x4>

08002270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002298:	f000 f968 	bl	800256c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f001 f96d 	bl	8003584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}

080022ae <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80022b2:	2008      	movs	r0, #8
 80022b4:	f001 f966 	bl	8003584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <TIM4_IRQHandler+0x10>)
 80022c2:	f003 fabf 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000047c 	.word	0x2000047c

080022d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
	return 1;
 80022d4:	2301      	movs	r3, #1
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <_kill>:

int _kill(int pid, int sig)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022e8:	f003 fee0 	bl	80060ac <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2216      	movs	r2, #22
 80022f0:	601a      	str	r2, [r3, #0]
	return -1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_exit>:

void _exit (int status)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002306:	f04f 31ff 	mov.w	r1, #4294967295
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffe7 	bl	80022de <_kill>
	while (1) {}		/* Make sure we hang here */
 8002310:	e7fe      	b.n	8002310 <_exit+0x12>

08002312 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e00a      	b.n	800233a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002324:	f3af 8000 	nop.w
 8002328:	4601      	mov	r1, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	60ba      	str	r2, [r7, #8]
 8002330:	b2ca      	uxtb	r2, r1
 8002332:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	dbf0      	blt.n	8002324 <_read+0x12>
	}

return len;
 8002342:	687b      	ldr	r3, [r7, #4]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e009      	b.n	8002372 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	60ba      	str	r2, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	dbf1      	blt.n	800235e <_write+0x12>
	}
	return len;
 800237a:	687b      	ldr	r3, [r7, #4]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_close>:

int _close(int file)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	return -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023aa:	605a      	str	r2, [r3, #4]
	return 0;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <_isatty>:

int _isatty(int file)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	return 1;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
	return 0;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <_sbrk+0x5c>)
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <_sbrk+0x60>)
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <_sbrk+0x64>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <_sbrk+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d207      	bcs.n	8002424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002414:	f003 fe4a 	bl	80060ac <__errno>
 8002418:	4603      	mov	r3, r0
 800241a:	220c      	movs	r2, #12
 800241c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e009      	b.n	8002438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <_sbrk+0x64>)
 8002434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20005000 	.word	0x20005000
 8002444:	00000400 	.word	0x00000400
 8002448:	20000508 	.word	0x20000508
 800244c:	20000520 	.word	0x20000520

08002450 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <map>:
#include <stdlib.h>
#include "string.h"
#include "stm32f1xx_hal.h"
#include "main.h"

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	1a8a      	subs	r2, r1, r2
 8002476:	fb03 f202 	mul.w	r2, r3, r2
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	1acb      	subs	r3, r1, r3
 8002480:	fb92 f2f3 	sdiv	r2, r2, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4413      	add	r3, r2
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
	...

08002494 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002494:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002496:	e003      	b.n	80024a0 <LoopCopyDataInit>

08002498 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800249a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800249c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800249e:	3104      	adds	r1, #4

080024a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80024a0:	480a      	ldr	r0, [pc, #40]	; (80024cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80024a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80024a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80024a8:	d3f6      	bcc.n	8002498 <CopyDataInit>
  ldr r2, =_sbss
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80024ac:	e002      	b.n	80024b4 <LoopFillZerobss>

080024ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80024b0:	f842 3b04 	str.w	r3, [r2], #4

080024b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80024b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024b8:	d3f9      	bcc.n	80024ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ba:	f7ff ffc9 	bl	8002450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024be:	f003 fdfb 	bl	80060b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024c2:	f7fe fddb 	bl	800107c <main>
  bx lr
 80024c6:	4770      	bx	lr
  ldr r3, =_sidata
 80024c8:	08009354 	.word	0x08009354
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024d0:	20000214 	.word	0x20000214
  ldr r2, =_sbss
 80024d4:	20000218 	.word	0x20000218
  ldr r3, = _ebss
 80024d8:	20000520 	.word	0x20000520

080024dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024dc:	e7fe      	b.n	80024dc <ADC1_2_IRQHandler>
	...

080024e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_Init+0x28>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a07      	ldr	r2, [pc, #28]	; (8002508 <HAL_Init+0x28>)
 80024ea:	f043 0310 	orr.w	r3, r3, #16
 80024ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f000 fe43 	bl	800317c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f000 f808 	bl	800250c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024fc:	f7ff fd2a 	bl	8001f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40022000 	.word	0x40022000

0800250c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_InitTick+0x54>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_InitTick+0x58>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	fbb3 f3f1 	udiv	r3, r3, r1
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fe69 	bl	8003202 <HAL_SYSTICK_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e00e      	b.n	8002558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0f      	cmp	r3, #15
 800253e:	d80a      	bhi.n	8002556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002540:	2200      	movs	r2, #0
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f000 fe23 	bl	8003192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <HAL_InitTick+0x5c>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000038 	.word	0x20000038
 8002564:	20000040 	.word	0x20000040
 8002568:	2000003c 	.word	0x2000003c

0800256c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_IncTick+0x1c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_IncTick+0x20>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4413      	add	r3, r2
 800257c:	4a03      	ldr	r2, [pc, #12]	; (800258c <HAL_IncTick+0x20>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000040 	.word	0x20000040
 800258c:	2000050c 	.word	0x2000050c

08002590 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return uwTick;
 8002594:	4b02      	ldr	r3, [pc, #8]	; (80025a0 <HAL_GetTick+0x10>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	2000050c 	.word	0x2000050c

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff fff0 	bl	8002590 <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffe0 	bl	8002590 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000040 	.word	0x20000040

080025ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0be      	b.n	800278c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fcc4 	bl	8001fb8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fbdd 	bl	8002df0 <ADC_ConversionStop_Disable>
 8002636:	4603      	mov	r3, r0
 8002638:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 8099 	bne.w	800277a <HAL_ADC_Init+0x18e>
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 8095 	bne.w	800277a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002658:	f023 0302 	bic.w	r3, r3, #2
 800265c:	f043 0202 	orr.w	r2, r3, #2
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800266c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7b1b      	ldrb	r3, [r3, #12]
 8002672:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002674:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	4313      	orrs	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002684:	d003      	beq.n	800268e <HAL_ADC_Init+0xa2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d102      	bne.n	8002694 <HAL_ADC_Init+0xa8>
 800268e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002692:	e000      	b.n	8002696 <HAL_ADC_Init+0xaa>
 8002694:	2300      	movs	r3, #0
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7d1b      	ldrb	r3, [r3, #20]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d119      	bne.n	80026d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7b1b      	ldrb	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d109      	bne.n	80026c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	035a      	lsls	r2, r3, #13
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	e00b      	b.n	80026d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	4b28      	ldr	r3, [pc, #160]	; (8002794 <HAL_ADC_Init+0x1a8>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002708:	d003      	beq.n	8002712 <HAL_ADC_Init+0x126>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d104      	bne.n	800271c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	3b01      	subs	r3, #1
 8002718:	051b      	lsls	r3, r3, #20
 800271a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	430a      	orrs	r2, r1
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_ADC_Init+0x1ac>)
 8002738:	4013      	ands	r3, r2
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	429a      	cmp	r2, r3
 800273e:	d10b      	bne.n	8002758 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002756:	e018      	b.n	800278a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f023 0312 	bic.w	r3, r3, #18
 8002760:	f043 0210 	orr.w	r2, r3, #16
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f043 0201 	orr.w	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002778:	e007      	b.n	800278a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	ffe1f7fd 	.word	0xffe1f7fd
 8002798:	ff1f0efe 	.word	0xff1f0efe

0800279c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_Start+0x1a>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e098      	b.n	80028e8 <HAL_ADC_Start+0x14c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fac4 	bl	8002d4c <ADC_Enable>
 80027c4:	4603      	mov	r3, r0
 80027c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 8087 	bne.w	80028de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a41      	ldr	r2, [pc, #260]	; (80028f0 <HAL_ADC_Start+0x154>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d105      	bne.n	80027fa <HAL_ADC_Start+0x5e>
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_ADC_Start+0x158>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	2b00      	cmp	r3, #0
 8002812:	d026      	beq.n	8002862 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800281c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002824:	e01d      	b.n	8002862 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2f      	ldr	r2, [pc, #188]	; (80028f4 <HAL_ADC_Start+0x158>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_ADC_Start+0xaa>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2b      	ldr	r2, [pc, #172]	; (80028f0 <HAL_ADC_Start+0x154>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10d      	bne.n	8002862 <HAL_ADC_Start+0xc6>
 8002846:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_ADC_Start+0x158>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800285a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d006      	beq.n	800287c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	f023 0206 	bic.w	r2, r3, #6
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	62da      	str	r2, [r3, #44]	; 0x2c
 800287a:	e002      	b.n	8002882 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0202 	mvn.w	r2, #2
 8002892:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800289e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028a2:	d113      	bne.n	80028cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028a8:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <HAL_ADC_Start+0x154>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d105      	bne.n	80028ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_ADC_Start+0x158>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d108      	bne.n	80028cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	e00c      	b.n	80028e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	e003      	b.n	80028e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40012800 	.word	0x40012800
 80028f4:	40012400 	.word	0x40012400

080028f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ADC_Stop+0x1a>
 800290e:	2302      	movs	r3, #2
 8002910:	e01a      	b.n	8002948 <HAL_ADC_Stop+0x50>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fa68 	bl	8002df0 <ADC_ConversionStop_Disable>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002966:	f7ff fe13 	bl	8002590 <HAL_GetTick>
 800296a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e0c8      	b.n	8002b24 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d12a      	bne.n	80029f6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d123      	bne.n	80029f6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029ae:	e01a      	b.n	80029e6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d016      	beq.n	80029e6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <HAL_ADC_PollForConversion+0x7e>
 80029be:	f7ff fde7 	bl	8002590 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d20b      	bcs.n	80029e6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	f043 0204 	orr.w	r2, r3, #4
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e09e      	b.n	8002b24 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0dd      	beq.n	80029b0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029f4:	e06c      	b.n	8002ad0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029f6:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <HAL_ADC_PollForConversion+0x1dc>)
 80029f8:	681c      	ldr	r4, [r3, #0]
 80029fa:	2002      	movs	r0, #2
 80029fc:	f002 faaa 	bl	8004f54 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a00:	4603      	mov	r3, r0
 8002a02:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6919      	ldr	r1, [r3, #16]
 8002a0c:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <HAL_ADC_PollForConversion+0x1e0>)
 8002a0e:	400b      	ands	r3, r1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d118      	bne.n	8002a46 <HAL_ADC_PollForConversion+0xf6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68d9      	ldr	r1, [r3, #12]
 8002a1a:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_ADC_PollForConversion+0x1e4>)
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d111      	bne.n	8002a46 <HAL_ADC_PollForConversion+0xf6>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6919      	ldr	r1, [r3, #16]
 8002a28:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_ADC_PollForConversion+0x1e8>)
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d108      	bne.n	8002a42 <HAL_ADC_PollForConversion+0xf2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68d9      	ldr	r1, [r3, #12]
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <HAL_ADC_PollForConversion+0x1ec>)
 8002a38:	400b      	ands	r3, r1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_PollForConversion+0xf2>
 8002a3e:	2314      	movs	r3, #20
 8002a40:	e020      	b.n	8002a84 <HAL_ADC_PollForConversion+0x134>
 8002a42:	2329      	movs	r3, #41	; 0x29
 8002a44:	e01e      	b.n	8002a84 <HAL_ADC_PollForConversion+0x134>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6919      	ldr	r1, [r3, #16]
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_ADC_PollForConversion+0x1e8>)
 8002a4e:	400b      	ands	r3, r1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <HAL_ADC_PollForConversion+0x112>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68d9      	ldr	r1, [r3, #12]
 8002a5a:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <HAL_ADC_PollForConversion+0x1ec>)
 8002a5c:	400b      	ands	r3, r1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <HAL_ADC_PollForConversion+0x12e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6919      	ldr	r1, [r3, #16]
 8002a68:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <HAL_ADC_PollForConversion+0x1f0>)
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d108      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x132>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68d9      	ldr	r1, [r3, #12]
 8002a76:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <HAL_ADC_PollForConversion+0x1f0>)
 8002a78:	400b      	ands	r3, r1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x132>
 8002a7e:	2354      	movs	r3, #84	; 0x54
 8002a80:	e000      	b.n	8002a84 <HAL_ADC_PollForConversion+0x134>
 8002a82:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a8a:	e01d      	b.n	8002ac8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a92:	d016      	beq.n	8002ac2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_ADC_PollForConversion+0x15a>
 8002a9a:	f7ff fd79 	bl	8002590 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d20b      	bcs.n	8002ac2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	f043 0204 	orr.w	r2, r3, #4
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e030      	b.n	8002b24 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d8dd      	bhi.n	8002a8c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0212 	mvn.w	r2, #18
 8002ad8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002af0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002af4:	d115      	bne.n	8002b22 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d111      	bne.n	8002b22 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	20000038 	.word	0x20000038
 8002b30:	24924924 	.word	0x24924924
 8002b34:	00924924 	.word	0x00924924
 8002b38:	12492492 	.word	0x12492492
 8002b3c:	00492492 	.word	0x00492492
 8002b40:	00249249 	.word	0x00249249

08002b44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x20>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0dc      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x1da>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b06      	cmp	r3, #6
 8002b8a:	d81c      	bhi.n	8002bc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b05      	subs	r3, #5
 8002b9e:	221f      	movs	r2, #31
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	4019      	ands	r1, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3b05      	subs	r3, #5
 8002bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc4:	e03c      	b.n	8002c40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d81c      	bhi.n	8002c08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	3b23      	subs	r3, #35	; 0x23
 8002be0:	221f      	movs	r2, #31
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	4019      	ands	r1, r3
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3b23      	subs	r3, #35	; 0x23
 8002bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
 8002c06:	e01b      	b.n	8002c40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	3b41      	subs	r3, #65	; 0x41
 8002c1a:	221f      	movs	r2, #31
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	4019      	ands	r1, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	3b41      	subs	r3, #65	; 0x41
 8002c34:	fa00 f203 	lsl.w	r2, r0, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b09      	cmp	r3, #9
 8002c46:	d91c      	bls.n	8002c82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68d9      	ldr	r1, [r3, #12]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	3b1e      	subs	r3, #30
 8002c5a:	2207      	movs	r2, #7
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	4019      	ands	r1, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6898      	ldr	r0, [r3, #8]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	3b1e      	subs	r3, #30
 8002c74:	fa00 f203 	lsl.w	r2, r0, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	e019      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6919      	ldr	r1, [r3, #16]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	2207      	movs	r2, #7
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	4019      	ands	r1, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6898      	ldr	r0, [r3, #8]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	fa00 f203 	lsl.w	r2, r0, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d003      	beq.n	8002cc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cc2:	2b11      	cmp	r3, #17
 8002cc4:	d132      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <HAL_ADC_ConfigChannel+0x1e4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d125      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d126      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b10      	cmp	r3, #16
 8002cf4:	d11a      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_ADC_ConfigChannel+0x1e8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <HAL_ADC_ConfigChannel+0x1ec>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	0c9a      	lsrs	r2, r3, #18
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d0c:	e002      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f9      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x1b2>
 8002d1a:	e007      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40012400 	.word	0x40012400
 8002d44:	20000038 	.word	0x20000038
 8002d48:	431bde83 	.word	0x431bde83

08002d4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d039      	beq.n	8002dde <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <ADC_Enable+0x9c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <ADC_Enable+0xa0>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	0c9b      	lsrs	r3, r3, #18
 8002d86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d88:	e002      	b.n	8002d90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f9      	bne.n	8002d8a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d96:	f7ff fbfb 	bl	8002590 <HAL_GetTick>
 8002d9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d9c:	e018      	b.n	8002dd0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d9e:	f7ff fbf7 	bl	8002590 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d911      	bls.n	8002dd0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f043 0210 	orr.w	r2, r3, #16
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d1df      	bne.n	8002d9e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000038 	.word	0x20000038
 8002dec:	431bde83 	.word	0x431bde83

08002df0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d127      	bne.n	8002e5a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e1a:	f7ff fbb9 	bl	8002590 <HAL_GetTick>
 8002e1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e20:	e014      	b.n	8002e4c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e22:	f7ff fbb5 	bl	8002590 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d90d      	bls.n	8002e4c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	f043 0210 	orr.w	r2, r3, #16
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e007      	b.n	8002e5c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d0e3      	beq.n	8002e22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADCEx_Calibration_Start+0x1e>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e086      	b.n	8002f90 <HAL_ADCEx_Calibration_Start+0x12c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ffb0 	bl	8002df0 <ADC_ConversionStop_Disable>
 8002e90:	4603      	mov	r3, r0
 8002e92:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d175      	bne.n	8002f86 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ea2:	f023 0302 	bic.w	r3, r3, #2
 8002ea6:	f043 0202 	orr.w	r2, r3, #2
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002eae:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_ADCEx_Calibration_Start+0x134>)
 8002eb0:	681c      	ldr	r4, [r3, #0]
 8002eb2:	2002      	movs	r0, #2
 8002eb4:	f002 f84e 	bl	8004f54 <HAL_RCCEx_GetPeriphCLKFreq>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002ebe:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002ec0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002ec2:	e002      	b.n	8002eca <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f9      	bne.n	8002ec4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff3b 	bl	8002d4c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0208 	orr.w	r2, r2, #8
 8002ee4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002ee6:	f7ff fb53 	bl	8002590 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002eec:	e014      	b.n	8002f18 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002eee:	f7ff fb4f 	bl	8002590 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b0a      	cmp	r3, #10
 8002efa:	d90d      	bls.n	8002f18 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	f023 0312 	bic.w	r3, r3, #18
 8002f04:	f043 0210 	orr.w	r2, r3, #16
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e03b      	b.n	8002f90 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e3      	bne.n	8002eee <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0204 	orr.w	r2, r2, #4
 8002f34:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002f36:	f7ff fb2b 	bl	8002590 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f3c:	e014      	b.n	8002f68 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f3e:	f7ff fb27 	bl	8002590 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b0a      	cmp	r3, #10
 8002f4a:	d90d      	bls.n	8002f68 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	f023 0312 	bic.w	r3, r3, #18
 8002f54:	f043 0210 	orr.w	r2, r3, #16
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e013      	b.n	8002f90 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e3      	bne.n	8002f3e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	20000038 	.word	0x20000038

08002f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fce:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	60d3      	str	r3, [r2, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <__NVIC_GetPriorityGrouping+0x18>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	f003 0307 	and.w	r3, r3, #7
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	2b00      	cmp	r3, #0
 8003010:	db0b      	blt.n	800302a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	4906      	ldr	r1, [pc, #24]	; (8003034 <__NVIC_EnableIRQ+0x34>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	2001      	movs	r0, #1
 8003022:	fa00 f202 	lsl.w	r2, r0, r2
 8003026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	e000e100 	.word	0xe000e100

08003038 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	db12      	blt.n	8003070 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	490a      	ldr	r1, [pc, #40]	; (800307c <__NVIC_DisableIRQ+0x44>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2001      	movs	r0, #1
 800305a:	fa00 f202 	lsl.w	r2, r0, r2
 800305e:	3320      	adds	r3, #32
 8003060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003064:	f3bf 8f4f 	dsb	sy
}
 8003068:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800306a:	f3bf 8f6f 	isb	sy
}
 800306e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000e100 	.word	0xe000e100

08003080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	; (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	bf28      	it	cs
 80030f2:	2304      	movcs	r3, #4
 80030f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <NVIC_EncodePriority+0x30>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3b03      	subs	r3, #3
 8003102:	e000      	b.n	8003106 <NVIC_EncodePriority+0x32>
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43d9      	mvns	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	4313      	orrs	r3, r2
         );
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003148:	d301      	bcc.n	800314e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314a:	2301      	movs	r3, #1
 800314c:	e00f      	b.n	800316e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <SysTick_Config+0x40>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003156:	210f      	movs	r1, #15
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	f7ff ff90 	bl	8003080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <SysTick_Config+0x40>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <SysTick_Config+0x40>)
 8003168:	2207      	movs	r2, #7
 800316a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	e000e010 	.word	0xe000e010

0800317c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff09 	bl	8002f9c <__NVIC_SetPriorityGrouping>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a4:	f7ff ff1e 	bl	8002fe4 <__NVIC_GetPriorityGrouping>
 80031a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f7ff ff90 	bl	80030d4 <NVIC_EncodePriority>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff5f 	bl	8003080 <__NVIC_SetPriority>
}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff11 	bl	8003000 <__NVIC_EnableIRQ>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	4603      	mov	r3, r0
 80031ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff1f 	bl	8003038 <__NVIC_DisableIRQ>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ff94 	bl	8003138 <SysTick_Config>
 8003210:	4603      	mov	r3, r0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800321c:	b480      	push	{r7}
 800321e:	b08b      	sub	sp, #44	; 0x2c
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800322e:	e169      	b.n	8003504 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003230:	2201      	movs	r2, #1
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	429a      	cmp	r2, r3
 800324a:	f040 8158 	bne.w	80034fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a9a      	ldr	r2, [pc, #616]	; (80034bc <HAL_GPIO_Init+0x2a0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d05e      	beq.n	8003316 <HAL_GPIO_Init+0xfa>
 8003258:	4a98      	ldr	r2, [pc, #608]	; (80034bc <HAL_GPIO_Init+0x2a0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d875      	bhi.n	800334a <HAL_GPIO_Init+0x12e>
 800325e:	4a98      	ldr	r2, [pc, #608]	; (80034c0 <HAL_GPIO_Init+0x2a4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d058      	beq.n	8003316 <HAL_GPIO_Init+0xfa>
 8003264:	4a96      	ldr	r2, [pc, #600]	; (80034c0 <HAL_GPIO_Init+0x2a4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d86f      	bhi.n	800334a <HAL_GPIO_Init+0x12e>
 800326a:	4a96      	ldr	r2, [pc, #600]	; (80034c4 <HAL_GPIO_Init+0x2a8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d052      	beq.n	8003316 <HAL_GPIO_Init+0xfa>
 8003270:	4a94      	ldr	r2, [pc, #592]	; (80034c4 <HAL_GPIO_Init+0x2a8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d869      	bhi.n	800334a <HAL_GPIO_Init+0x12e>
 8003276:	4a94      	ldr	r2, [pc, #592]	; (80034c8 <HAL_GPIO_Init+0x2ac>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d04c      	beq.n	8003316 <HAL_GPIO_Init+0xfa>
 800327c:	4a92      	ldr	r2, [pc, #584]	; (80034c8 <HAL_GPIO_Init+0x2ac>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d863      	bhi.n	800334a <HAL_GPIO_Init+0x12e>
 8003282:	4a92      	ldr	r2, [pc, #584]	; (80034cc <HAL_GPIO_Init+0x2b0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d046      	beq.n	8003316 <HAL_GPIO_Init+0xfa>
 8003288:	4a90      	ldr	r2, [pc, #576]	; (80034cc <HAL_GPIO_Init+0x2b0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d85d      	bhi.n	800334a <HAL_GPIO_Init+0x12e>
 800328e:	2b12      	cmp	r3, #18
 8003290:	d82a      	bhi.n	80032e8 <HAL_GPIO_Init+0xcc>
 8003292:	2b12      	cmp	r3, #18
 8003294:	d859      	bhi.n	800334a <HAL_GPIO_Init+0x12e>
 8003296:	a201      	add	r2, pc, #4	; (adr r2, 800329c <HAL_GPIO_Init+0x80>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	08003317 	.word	0x08003317
 80032a0:	080032f1 	.word	0x080032f1
 80032a4:	08003303 	.word	0x08003303
 80032a8:	08003345 	.word	0x08003345
 80032ac:	0800334b 	.word	0x0800334b
 80032b0:	0800334b 	.word	0x0800334b
 80032b4:	0800334b 	.word	0x0800334b
 80032b8:	0800334b 	.word	0x0800334b
 80032bc:	0800334b 	.word	0x0800334b
 80032c0:	0800334b 	.word	0x0800334b
 80032c4:	0800334b 	.word	0x0800334b
 80032c8:	0800334b 	.word	0x0800334b
 80032cc:	0800334b 	.word	0x0800334b
 80032d0:	0800334b 	.word	0x0800334b
 80032d4:	0800334b 	.word	0x0800334b
 80032d8:	0800334b 	.word	0x0800334b
 80032dc:	0800334b 	.word	0x0800334b
 80032e0:	080032f9 	.word	0x080032f9
 80032e4:	0800330d 	.word	0x0800330d
 80032e8:	4a79      	ldr	r2, [pc, #484]	; (80034d0 <HAL_GPIO_Init+0x2b4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032ee:	e02c      	b.n	800334a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	623b      	str	r3, [r7, #32]
          break;
 80032f6:	e029      	b.n	800334c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	3304      	adds	r3, #4
 80032fe:	623b      	str	r3, [r7, #32]
          break;
 8003300:	e024      	b.n	800334c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	3308      	adds	r3, #8
 8003308:	623b      	str	r3, [r7, #32]
          break;
 800330a:	e01f      	b.n	800334c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	330c      	adds	r3, #12
 8003312:	623b      	str	r3, [r7, #32]
          break;
 8003314:	e01a      	b.n	800334c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800331e:	2304      	movs	r3, #4
 8003320:	623b      	str	r3, [r7, #32]
          break;
 8003322:	e013      	b.n	800334c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800332c:	2308      	movs	r3, #8
 800332e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	611a      	str	r2, [r3, #16]
          break;
 8003336:	e009      	b.n	800334c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003338:	2308      	movs	r3, #8
 800333a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	615a      	str	r2, [r3, #20]
          break;
 8003342:	e003      	b.n	800334c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003344:	2300      	movs	r3, #0
 8003346:	623b      	str	r3, [r7, #32]
          break;
 8003348:	e000      	b.n	800334c <HAL_GPIO_Init+0x130>
          break;
 800334a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2bff      	cmp	r3, #255	; 0xff
 8003350:	d801      	bhi.n	8003356 <HAL_GPIO_Init+0x13a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	e001      	b.n	800335a <HAL_GPIO_Init+0x13e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2bff      	cmp	r3, #255	; 0xff
 8003360:	d802      	bhi.n	8003368 <HAL_GPIO_Init+0x14c>
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	e002      	b.n	800336e <HAL_GPIO_Init+0x152>
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	3b08      	subs	r3, #8
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	210f      	movs	r1, #15
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	fa01 f303 	lsl.w	r3, r1, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	401a      	ands	r2, r3
 8003380:	6a39      	ldr	r1, [r7, #32]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	431a      	orrs	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80b1 	beq.w	80034fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800339c:	4b4d      	ldr	r3, [pc, #308]	; (80034d4 <HAL_GPIO_Init+0x2b8>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	4a4c      	ldr	r2, [pc, #304]	; (80034d4 <HAL_GPIO_Init+0x2b8>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6193      	str	r3, [r2, #24]
 80033a8:	4b4a      	ldr	r3, [pc, #296]	; (80034d4 <HAL_GPIO_Init+0x2b8>)
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033b4:	4a48      	ldr	r2, [pc, #288]	; (80034d8 <HAL_GPIO_Init+0x2bc>)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	3302      	adds	r3, #2
 80033bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	220f      	movs	r2, #15
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a40      	ldr	r2, [pc, #256]	; (80034dc <HAL_GPIO_Init+0x2c0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <HAL_GPIO_Init+0x1ec>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3f      	ldr	r2, [pc, #252]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00d      	beq.n	8003404 <HAL_GPIO_Init+0x1e8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3e      	ldr	r2, [pc, #248]	; (80034e4 <HAL_GPIO_Init+0x2c8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <HAL_GPIO_Init+0x1e4>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3d      	ldr	r2, [pc, #244]	; (80034e8 <HAL_GPIO_Init+0x2cc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_GPIO_Init+0x1e0>
 80033f8:	2303      	movs	r3, #3
 80033fa:	e006      	b.n	800340a <HAL_GPIO_Init+0x1ee>
 80033fc:	2304      	movs	r3, #4
 80033fe:	e004      	b.n	800340a <HAL_GPIO_Init+0x1ee>
 8003400:	2302      	movs	r3, #2
 8003402:	e002      	b.n	800340a <HAL_GPIO_Init+0x1ee>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_GPIO_Init+0x1ee>
 8003408:	2300      	movs	r3, #0
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	f002 0203 	and.w	r2, r2, #3
 8003410:	0092      	lsls	r2, r2, #2
 8003412:	4093      	lsls	r3, r2
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800341a:	492f      	ldr	r1, [pc, #188]	; (80034d8 <HAL_GPIO_Init+0x2bc>)
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	3302      	adds	r3, #2
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d006      	beq.n	8003442 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003434:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	492c      	ldr	r1, [pc, #176]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
 8003440:	e006      	b.n	8003450 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003442:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	43db      	mvns	r3, r3
 800344a:	4928      	ldr	r1, [pc, #160]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 800344c:	4013      	ands	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800345c:	4b23      	ldr	r3, [pc, #140]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	4922      	ldr	r1, [pc, #136]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
 8003468:	e006      	b.n	8003478 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	43db      	mvns	r3, r3
 8003472:	491e      	ldr	r1, [pc, #120]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 8003474:	4013      	ands	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d006      	beq.n	8003492 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	4918      	ldr	r1, [pc, #96]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	608b      	str	r3, [r1, #8]
 8003490:	e006      	b.n	80034a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003492:	4b16      	ldr	r3, [pc, #88]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	43db      	mvns	r3, r3
 800349a:	4914      	ldr	r1, [pc, #80]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 800349c:	4013      	ands	r3, r2
 800349e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d021      	beq.n	80034f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	490e      	ldr	r1, [pc, #56]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60cb      	str	r3, [r1, #12]
 80034b8:	e021      	b.n	80034fe <HAL_GPIO_Init+0x2e2>
 80034ba:	bf00      	nop
 80034bc:	10320000 	.word	0x10320000
 80034c0:	10310000 	.word	0x10310000
 80034c4:	10220000 	.word	0x10220000
 80034c8:	10210000 	.word	0x10210000
 80034cc:	10120000 	.word	0x10120000
 80034d0:	10110000 	.word	0x10110000
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40010000 	.word	0x40010000
 80034dc:	40010800 	.word	0x40010800
 80034e0:	40010c00 	.word	0x40010c00
 80034e4:	40011000 	.word	0x40011000
 80034e8:	40011400 	.word	0x40011400
 80034ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_GPIO_Init+0x304>)
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	4909      	ldr	r1, [pc, #36]	; (8003520 <HAL_GPIO_Init+0x304>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	3301      	adds	r3, #1
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	f47f ae8e 	bne.w	8003230 <HAL_GPIO_Init+0x14>
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	372c      	adds	r7, #44	; 0x2c
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	887b      	ldrh	r3, [r7, #2]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e001      	b.n	8003546 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	807b      	strh	r3, [r7, #2]
 800355e:	4613      	mov	r3, r2
 8003560:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003562:	787b      	ldrb	r3, [r7, #1]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003568:	887a      	ldrh	r2, [r7, #2]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800356e:	e003      	b.n	8003578 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	041a      	lsls	r2, r3, #16
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	611a      	str	r2, [r3, #16]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr
	...

08003584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fd fc60 	bl	8000e68 <HAL_GPIO_EXTI_Callback>
  }
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40010400 	.word	0x40010400

080035b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e12b      	b.n	800381e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe fd28 	bl	8002030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003618:	f001 fba0 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 800361c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4a81      	ldr	r2, [pc, #516]	; (8003828 <HAL_I2C_Init+0x274>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d807      	bhi.n	8003638 <HAL_I2C_Init+0x84>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a80      	ldr	r2, [pc, #512]	; (800382c <HAL_I2C_Init+0x278>)
 800362c:	4293      	cmp	r3, r2
 800362e:	bf94      	ite	ls
 8003630:	2301      	movls	r3, #1
 8003632:	2300      	movhi	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e006      	b.n	8003646 <HAL_I2C_Init+0x92>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a7d      	ldr	r2, [pc, #500]	; (8003830 <HAL_I2C_Init+0x27c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	bf94      	ite	ls
 8003640:	2301      	movls	r3, #1
 8003642:	2300      	movhi	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0e7      	b.n	800381e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a78      	ldr	r2, [pc, #480]	; (8003834 <HAL_I2C_Init+0x280>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0c9b      	lsrs	r3, r3, #18
 8003658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a6a      	ldr	r2, [pc, #424]	; (8003828 <HAL_I2C_Init+0x274>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d802      	bhi.n	8003688 <HAL_I2C_Init+0xd4>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	e009      	b.n	800369c <HAL_I2C_Init+0xe8>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	4a69      	ldr	r2, [pc, #420]	; (8003838 <HAL_I2C_Init+0x284>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	099b      	lsrs	r3, r3, #6
 800369a:	3301      	adds	r3, #1
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	495c      	ldr	r1, [pc, #368]	; (8003828 <HAL_I2C_Init+0x274>)
 80036b8:	428b      	cmp	r3, r1
 80036ba:	d819      	bhi.n	80036f0 <HAL_I2C_Init+0x13c>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1e59      	subs	r1, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ca:	1c59      	adds	r1, r3, #1
 80036cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036d0:	400b      	ands	r3, r1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_I2C_Init+0x138>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e59      	subs	r1, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ea:	e051      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 80036ec:	2304      	movs	r3, #4
 80036ee:	e04f      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d111      	bne.n	800371c <HAL_I2C_Init+0x168>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	440b      	add	r3, r1
 8003706:	fbb0 f3f3 	udiv	r3, r0, r3
 800370a:	3301      	adds	r3, #1
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e012      	b.n	8003742 <HAL_I2C_Init+0x18e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e58      	subs	r0, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	0099      	lsls	r1, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Init+0x196>
 8003746:	2301      	movs	r3, #1
 8003748:	e022      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10e      	bne.n	8003770 <HAL_I2C_Init+0x1bc>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e58      	subs	r0, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	440b      	add	r3, r1
 8003760:	fbb0 f3f3 	udiv	r3, r0, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376e:	e00f      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	0099      	lsls	r1, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	6809      	ldr	r1, [r1, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6911      	ldr	r1, [r2, #16]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68d2      	ldr	r2, [r2, #12]
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	000186a0 	.word	0x000186a0
 800382c:	001e847f 	.word	0x001e847f
 8003830:	003d08ff 	.word	0x003d08ff
 8003834:	431bde83 	.word	0x431bde83
 8003838:	10624dd3 	.word	0x10624dd3

0800383c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4603      	mov	r3, r0
 800384c:	817b      	strh	r3, [r7, #10]
 800384e:	460b      	mov	r3, r1
 8003850:	813b      	strh	r3, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003856:	f7fe fe9b 	bl	8002590 <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b20      	cmp	r3, #32
 8003866:	f040 80d9 	bne.w	8003a1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2319      	movs	r3, #25
 8003870:	2201      	movs	r2, #1
 8003872:	496d      	ldr	r1, [pc, #436]	; (8003a28 <HAL_I2C_Mem_Write+0x1ec>)
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fcc1 	bl	80041fc <I2C_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
 8003882:	e0cc      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Mem_Write+0x56>
 800388e:	2302      	movs	r3, #2
 8003890:	e0c5      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d007      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2221      	movs	r2, #33	; 0x21
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2240      	movs	r2, #64	; 0x40
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a4d      	ldr	r2, [pc, #308]	; (8003a2c <HAL_I2C_Mem_Write+0x1f0>)
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038fa:	88f8      	ldrh	r0, [r7, #6]
 80038fc:	893a      	ldrh	r2, [r7, #8]
 80038fe:	8979      	ldrh	r1, [r7, #10]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4603      	mov	r3, r0
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 faf8 	bl	8003f00 <I2C_RequestMemoryWrite>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d052      	beq.n	80039bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e081      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fd42 	bl	80043a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b04      	cmp	r3, #4
 8003930:	d107      	bne.n	8003942 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003940:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e06b      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d11b      	bne.n	80039bc <HAL_I2C_Mem_Write+0x180>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	d017      	beq.n	80039bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1aa      	bne.n	800391a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fd2e 	bl	800442a <I2C_WaitOnBTFFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d107      	bne.n	80039ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e016      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	00100002 	.word	0x00100002
 8003a2c:	ffff0000 	.word	0xffff0000

08003a30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08c      	sub	sp, #48	; 0x30
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	817b      	strh	r3, [r7, #10]
 8003a42:	460b      	mov	r3, r1
 8003a44:	813b      	strh	r3, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a4e:	f7fe fd9f 	bl	8002590 <HAL_GetTick>
 8003a52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	f040 8244 	bne.w	8003eea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2319      	movs	r3, #25
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4982      	ldr	r1, [pc, #520]	; (8003c74 <HAL_I2C_Mem_Read+0x244>)
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fbc5 	bl	80041fc <I2C_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e237      	b.n	8003eec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Mem_Read+0x5a>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e230      	b.n	8003eec <HAL_I2C_Mem_Read+0x4bc>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d007      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2222      	movs	r2, #34	; 0x22
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a62      	ldr	r2, [pc, #392]	; (8003c78 <HAL_I2C_Mem_Read+0x248>)
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003af2:	88f8      	ldrh	r0, [r7, #6]
 8003af4:	893a      	ldrh	r2, [r7, #8]
 8003af6:	8979      	ldrh	r1, [r7, #10]
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	4603      	mov	r3, r0
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fa92 	bl	800402c <I2C_RequestMemoryRead>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e1ec      	b.n	8003eec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d113      	bne.n	8003b42 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e1c0      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d11e      	bne.n	8003b88 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b5a:	b672      	cpsid	i
}
 8003b5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b84:	b662      	cpsie	i
}
 8003b86:	e035      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d11e      	bne.n	8003bce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba0:	b672      	cpsid	i
}
 8003ba2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bca:	b662      	cpsie	i
}
 8003bcc:	e012      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bdc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003bf4:	e166      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	f200 811f 	bhi.w	8003e3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d123      	bne.n	8003c50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fc4d 	bl	80044ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e167      	b.n	8003eec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c4e:	e139      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d152      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	2200      	movs	r2, #0
 8003c60:	4906      	ldr	r1, [pc, #24]	; (8003c7c <HAL_I2C_Mem_Read+0x24c>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 faca 	bl	80041fc <I2C_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e13c      	b.n	8003eec <HAL_I2C_Mem_Read+0x4bc>
 8003c72:	bf00      	nop
 8003c74:	00100002 	.word	0x00100002
 8003c78:	ffff0000 	.word	0xffff0000
 8003c7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c80:	b672      	cpsid	i
}
 8003c82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc6:	b662      	cpsie	i
}
 8003cc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cfc:	e0e2      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	2200      	movs	r2, #0
 8003d06:	497b      	ldr	r1, [pc, #492]	; (8003ef4 <HAL_I2C_Mem_Read+0x4c4>)
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fa77 	bl	80041fc <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0e9      	b.n	8003eec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d28:	b672      	cpsid	i
}
 8003d2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d5e:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <HAL_I2C_Mem_Read+0x4c8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	08db      	lsrs	r3, r3, #3
 8003d64:	4a65      	ldr	r2, [pc, #404]	; (8003efc <HAL_I2C_Mem_Read+0x4cc>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	0a1a      	lsrs	r2, r3, #8
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00da      	lsls	r2, r3, #3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d118      	bne.n	8003db6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003da6:	b662      	cpsie	i
}
 8003da8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e09a      	b.n	8003eec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d1d9      	bne.n	8003d78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e06:	b662      	cpsie	i
}
 8003e08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e3c:	e042      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fb32 	bl	80044ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e04c      	b.n	8003eec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d118      	bne.n	8003ec4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f47f ae94 	bne.w	8003bf6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3728      	adds	r7, #40	; 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	00010004 	.word	0x00010004
 8003ef8:	20000038 	.word	0x20000038
 8003efc:	14f8b589 	.word	0x14f8b589

08003f00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	4608      	mov	r0, r1
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	817b      	strh	r3, [r7, #10]
 8003f12:	460b      	mov	r3, r1
 8003f14:	813b      	strh	r3, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f960 	bl	80041fc <I2C_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f50:	d103      	bne.n	8003f5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e05f      	b.n	800401e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f5e:	897b      	ldrh	r3, [r7, #10]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	6a3a      	ldr	r2, [r7, #32]
 8003f72:	492d      	ldr	r1, [pc, #180]	; (8004028 <I2C_RequestMemoryWrite+0x128>)
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f998 	bl	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e04c      	b.n	800401e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	6a39      	ldr	r1, [r7, #32]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fa02 	bl	80043a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d107      	bne.n	8003fc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e02b      	b.n	800401e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fcc:	893b      	ldrh	r3, [r7, #8]
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	611a      	str	r2, [r3, #16]
 8003fd6:	e021      	b.n	800401c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fd8:	893b      	ldrh	r3, [r7, #8]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe8:	6a39      	ldr	r1, [r7, #32]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f9dc 	bl	80043a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00d      	beq.n	8004012 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d107      	bne.n	800400e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e005      	b.n	800401e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004012:	893b      	ldrh	r3, [r7, #8]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	00010002 	.word	0x00010002

0800402c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	4608      	mov	r0, r1
 8004036:	4611      	mov	r1, r2
 8004038:	461a      	mov	r2, r3
 800403a:	4603      	mov	r3, r0
 800403c:	817b      	strh	r3, [r7, #10]
 800403e:	460b      	mov	r3, r1
 8004040:	813b      	strh	r3, [r7, #8]
 8004042:	4613      	mov	r3, r2
 8004044:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004054:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004064:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	2200      	movs	r2, #0
 800406e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f8c2 	bl	80041fc <I2C_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408c:	d103      	bne.n	8004096 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e0aa      	b.n	80041f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800409a:	897b      	ldrh	r3, [r7, #10]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	6a3a      	ldr	r2, [r7, #32]
 80040ae:	4952      	ldr	r1, [pc, #328]	; (80041f8 <I2C_RequestMemoryRead+0x1cc>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f8fa 	bl	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e097      	b.n	80041f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d8:	6a39      	ldr	r1, [r7, #32]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f964 	bl	80043a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00d      	beq.n	8004102 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d107      	bne.n	80040fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e076      	b.n	80041f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d105      	bne.n	8004114 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004108:	893b      	ldrh	r3, [r7, #8]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	611a      	str	r2, [r3, #16]
 8004112:	e021      	b.n	8004158 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004114:	893b      	ldrh	r3, [r7, #8]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	b29b      	uxth	r3, r3
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004124:	6a39      	ldr	r1, [r7, #32]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f93e 	bl	80043a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b04      	cmp	r3, #4
 8004138:	d107      	bne.n	800414a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004148:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e050      	b.n	80041f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800414e:	893b      	ldrh	r3, [r7, #8]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415a:	6a39      	ldr	r1, [r7, #32]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f923 	bl	80043a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2b04      	cmp	r3, #4
 800416e:	d107      	bne.n	8004180 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e035      	b.n	80041f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004192:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2200      	movs	r2, #0
 800419c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f82b 	bl	80041fc <I2C_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00d      	beq.n	80041c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ba:	d103      	bne.n	80041c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e013      	b.n	80041f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041c8:	897b      	ldrh	r3, [r7, #10]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	6a3a      	ldr	r2, [r7, #32]
 80041dc:	4906      	ldr	r1, [pc, #24]	; (80041f8 <I2C_RequestMemoryRead+0x1cc>)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f863 	bl	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	00010002 	.word	0x00010002

080041fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800420c:	e025      	b.n	800425a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d021      	beq.n	800425a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004216:	f7fe f9bb 	bl	8002590 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d302      	bcc.n	800422c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d116      	bne.n	800425a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e023      	b.n	80042a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10d      	bne.n	8004280 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	e00c      	b.n	800429a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	43da      	mvns	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	429a      	cmp	r2, r3
 800429e:	d0b6      	beq.n	800420e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b8:	e051      	b.n	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c8:	d123      	bne.n	8004312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f043 0204 	orr.w	r2, r3, #4
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e046      	b.n	80043a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d021      	beq.n	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431a:	f7fe f939 	bl	8002590 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d116      	bne.n	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f043 0220 	orr.w	r2, r3, #32
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e020      	b.n	80043a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d10c      	bne.n	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	43da      	mvns	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4013      	ands	r3, r2
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf14      	ite	ne
 800437a:	2301      	movne	r3, #1
 800437c:	2300      	moveq	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	e00b      	b.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	43da      	mvns	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4013      	ands	r3, r2
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf14      	ite	ne
 8004394:	2301      	movne	r3, #1
 8004396:	2300      	moveq	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d18d      	bne.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b4:	e02d      	b.n	8004412 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f8ce 	bl	8004558 <I2C_IsAcknowledgeFailed>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e02d      	b.n	8004422 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d021      	beq.n	8004412 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fe f8df 	bl	8002590 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e007      	b.n	8004422 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d1ca      	bne.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004436:	e02d      	b.n	8004494 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f88d 	bl	8004558 <I2C_IsAcknowledgeFailed>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e02d      	b.n	80044a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444e:	d021      	beq.n	8004494 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004450:	f7fe f89e 	bl	8002590 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	d302      	bcc.n	8004466 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e007      	b.n	80044a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d1ca      	bne.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b8:	e042      	b.n	8004540 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d119      	bne.n	80044fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0210 	mvn.w	r2, #16
 80044d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e029      	b.n	8004550 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fc:	f7fe f848 	bl	8002590 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d116      	bne.n	8004540 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e007      	b.n	8004550 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d1b5      	bne.n	80044ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456e:	d11b      	bne.n	80045a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004578:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	f043 0204 	orr.w	r2, r3, #4
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e272      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8087 	beq.w	80046e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045d4:	4b92      	ldr	r3, [pc, #584]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d00c      	beq.n	80045fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045e0:	4b8f      	ldr	r3, [pc, #572]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d112      	bne.n	8004612 <HAL_RCC_OscConfig+0x5e>
 80045ec:	4b8c      	ldr	r3, [pc, #560]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f8:	d10b      	bne.n	8004612 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fa:	4b89      	ldr	r3, [pc, #548]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d06c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x12c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d168      	bne.n	80046e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e24c      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461a:	d106      	bne.n	800462a <HAL_RCC_OscConfig+0x76>
 800461c:	4b80      	ldr	r3, [pc, #512]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a7f      	ldr	r2, [pc, #508]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	e02e      	b.n	8004688 <HAL_RCC_OscConfig+0xd4>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x98>
 8004632:	4b7b      	ldr	r3, [pc, #492]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a7a      	ldr	r2, [pc, #488]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	4b78      	ldr	r3, [pc, #480]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a77      	ldr	r2, [pc, #476]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e01d      	b.n	8004688 <HAL_RCC_OscConfig+0xd4>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004654:	d10c      	bne.n	8004670 <HAL_RCC_OscConfig+0xbc>
 8004656:	4b72      	ldr	r3, [pc, #456]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a71      	ldr	r2, [pc, #452]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 800465c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	4b6f      	ldr	r3, [pc, #444]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a6e      	ldr	r2, [pc, #440]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e00b      	b.n	8004688 <HAL_RCC_OscConfig+0xd4>
 8004670:	4b6b      	ldr	r3, [pc, #428]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a6a      	ldr	r2, [pc, #424]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	4b68      	ldr	r3, [pc, #416]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a67      	ldr	r2, [pc, #412]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004686:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d013      	beq.n	80046b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fd ff7e 	bl	8002590 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7fd ff7a 	bl	8002590 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e200      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	4b5d      	ldr	r3, [pc, #372]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0xe4>
 80046b6:	e014      	b.n	80046e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fd ff6a 	bl	8002590 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c0:	f7fd ff66 	bl	8002590 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	; 0x64
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e1ec      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d2:	4b53      	ldr	r3, [pc, #332]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x10c>
 80046de:	e000      	b.n	80046e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d063      	beq.n	80047b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ee:	4b4c      	ldr	r3, [pc, #304]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046fa:	4b49      	ldr	r3, [pc, #292]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b08      	cmp	r3, #8
 8004704:	d11c      	bne.n	8004740 <HAL_RCC_OscConfig+0x18c>
 8004706:	4b46      	ldr	r3, [pc, #280]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d116      	bne.n	8004740 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	4b43      	ldr	r3, [pc, #268]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_RCC_OscConfig+0x176>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d001      	beq.n	800472a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e1c0      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472a:	4b3d      	ldr	r3, [pc, #244]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4939      	ldr	r1, [pc, #228]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473e:	e03a      	b.n	80047b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d020      	beq.n	800478a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004748:	4b36      	ldr	r3, [pc, #216]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474e:	f7fd ff1f 	bl	8002590 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004756:	f7fd ff1b 	bl	8002590 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e1a1      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004768:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004774:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4927      	ldr	r1, [pc, #156]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	600b      	str	r3, [r1, #0]
 8004788:	e015      	b.n	80047b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <HAL_RCC_OscConfig+0x270>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fd fefe 	bl	8002590 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004798:	f7fd fefa 	bl	8002590 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e180      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047aa:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d03a      	beq.n	8004838 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d019      	beq.n	80047fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ca:	4b17      	ldr	r3, [pc, #92]	; (8004828 <HAL_RCC_OscConfig+0x274>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d0:	f7fd fede 	bl	8002590 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d8:	f7fd feda 	bl	8002590 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e160      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047f6:	2001      	movs	r0, #1
 80047f8:	f000 fad8 	bl	8004dac <RCC_Delay>
 80047fc:	e01c      	b.n	8004838 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <HAL_RCC_OscConfig+0x274>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004804:	f7fd fec4 	bl	8002590 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480a:	e00f      	b.n	800482c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800480c:	f7fd fec0 	bl	8002590 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d908      	bls.n	800482c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e146      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
 8004824:	42420000 	.word	0x42420000
 8004828:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482c:	4b92      	ldr	r3, [pc, #584]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e9      	bne.n	800480c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80a6 	beq.w	8004992 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484a:	4b8b      	ldr	r3, [pc, #556]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10d      	bne.n	8004872 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004856:	4b88      	ldr	r3, [pc, #544]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	4a87      	ldr	r2, [pc, #540]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800485c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004860:	61d3      	str	r3, [r2, #28]
 8004862:	4b85      	ldr	r3, [pc, #532]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800486e:	2301      	movs	r3, #1
 8004870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004872:	4b82      	ldr	r3, [pc, #520]	; (8004a7c <HAL_RCC_OscConfig+0x4c8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d118      	bne.n	80048b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800487e:	4b7f      	ldr	r3, [pc, #508]	; (8004a7c <HAL_RCC_OscConfig+0x4c8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a7e      	ldr	r2, [pc, #504]	; (8004a7c <HAL_RCC_OscConfig+0x4c8>)
 8004884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488a:	f7fd fe81 	bl	8002590 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004892:	f7fd fe7d 	bl	8002590 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b64      	cmp	r3, #100	; 0x64
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e103      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a4:	4b75      	ldr	r3, [pc, #468]	; (8004a7c <HAL_RCC_OscConfig+0x4c8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d106      	bne.n	80048c6 <HAL_RCC_OscConfig+0x312>
 80048b8:	4b6f      	ldr	r3, [pc, #444]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	4a6e      	ldr	r2, [pc, #440]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	6213      	str	r3, [r2, #32]
 80048c4:	e02d      	b.n	8004922 <HAL_RCC_OscConfig+0x36e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x334>
 80048ce:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	4a69      	ldr	r2, [pc, #420]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	6213      	str	r3, [r2, #32]
 80048da:	4b67      	ldr	r3, [pc, #412]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	4a66      	ldr	r2, [pc, #408]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048e0:	f023 0304 	bic.w	r3, r3, #4
 80048e4:	6213      	str	r3, [r2, #32]
 80048e6:	e01c      	b.n	8004922 <HAL_RCC_OscConfig+0x36e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	d10c      	bne.n	800490a <HAL_RCC_OscConfig+0x356>
 80048f0:	4b61      	ldr	r3, [pc, #388]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4a60      	ldr	r2, [pc, #384]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	f043 0304 	orr.w	r3, r3, #4
 80048fa:	6213      	str	r3, [r2, #32]
 80048fc:	4b5e      	ldr	r3, [pc, #376]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	4a5d      	ldr	r2, [pc, #372]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6213      	str	r3, [r2, #32]
 8004908:	e00b      	b.n	8004922 <HAL_RCC_OscConfig+0x36e>
 800490a:	4b5b      	ldr	r3, [pc, #364]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4a5a      	ldr	r2, [pc, #360]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6213      	str	r3, [r2, #32]
 8004916:	4b58      	ldr	r3, [pc, #352]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	4a57      	ldr	r2, [pc, #348]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d015      	beq.n	8004956 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492a:	f7fd fe31 	bl	8002590 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fd fe2d 	bl	8002590 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e0b1      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004948:	4b4b      	ldr	r3, [pc, #300]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0ee      	beq.n	8004932 <HAL_RCC_OscConfig+0x37e>
 8004954:	e014      	b.n	8004980 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004956:	f7fd fe1b 	bl	8002590 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495c:	e00a      	b.n	8004974 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f7fd fe17 	bl	8002590 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f241 3288 	movw	r2, #5000	; 0x1388
 800496c:	4293      	cmp	r3, r2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e09b      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004974:	4b40      	ldr	r3, [pc, #256]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ee      	bne.n	800495e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004980:	7dfb      	ldrb	r3, [r7, #23]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d105      	bne.n	8004992 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004986:	4b3c      	ldr	r3, [pc, #240]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	4a3b      	ldr	r2, [pc, #236]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800498c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004990:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 8087 	beq.w	8004aaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800499c:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 030c 	and.w	r3, r3, #12
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d061      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d146      	bne.n	8004a3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b0:	4b33      	ldr	r3, [pc, #204]	; (8004a80 <HAL_RCC_OscConfig+0x4cc>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b6:	f7fd fdeb 	bl	8002590 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049be:	f7fd fde7 	bl	8002590 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e06d      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049d0:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e4:	d108      	bne.n	80049f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049e6:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4921      	ldr	r1, [pc, #132]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f8:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a19      	ldr	r1, [r3, #32]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	491b      	ldr	r1, [pc, #108]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a10:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <HAL_RCC_OscConfig+0x4cc>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7fd fdbb 	bl	8002590 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fd fdb7 	bl	8002590 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e03d      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x46a>
 8004a3c:	e035      	b.n	8004aaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <HAL_RCC_OscConfig+0x4cc>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7fd fda4 	bl	8002590 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fd fda0 	bl	8002590 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e026      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_RCC_OscConfig+0x4c4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x498>
 8004a6a:	e01e      	b.n	8004aaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d107      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e019      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40007000 	.word	0x40007000
 8004a80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_RCC_OscConfig+0x500>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000

08004ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0d0      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b67      	ldr	r3, [pc, #412]	; (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 0207 	bic.w	r2, r3, #7
 8004ae2:	4965      	ldr	r1, [pc, #404]	; (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b63      	ldr	r3, [pc, #396]	; (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b8      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d020      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b14:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a58      	ldr	r2, [pc, #352]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b2c:	4b53      	ldr	r3, [pc, #332]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4a52      	ldr	r2, [pc, #328]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b50      	ldr	r3, [pc, #320]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	494d      	ldr	r1, [pc, #308]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d040      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	4b47      	ldr	r3, [pc, #284]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d115      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d107      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b76:	4b41      	ldr	r3, [pc, #260]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e073      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b86:	4b3d      	ldr	r3, [pc, #244]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e06b      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b96:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f023 0203 	bic.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4936      	ldr	r1, [pc, #216]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba8:	f7fd fcf2 	bl	8002590 <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb0:	f7fd fcee 	bl	8002590 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e053      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 020c 	and.w	r2, r3, #12
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d1eb      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b27      	ldr	r3, [pc, #156]	; (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d210      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be6:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 0207 	bic.w	r2, r3, #7
 8004bee:	4922      	ldr	r1, [pc, #136]	; (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e032      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c14:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4916      	ldr	r1, [pc, #88]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	490e      	ldr	r1, [pc, #56]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c46:	f000 f821 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	490a      	ldr	r1, [pc, #40]	; (8004c80 <HAL_RCC_ClockConfig+0x1c8>)
 8004c58:	5ccb      	ldrb	r3, [r1, r3]
 8004c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <HAL_RCC_ClockConfig+0x1cc>)
 8004c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c62:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <HAL_RCC_ClockConfig+0x1d0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fd fc50 	bl	800250c <HAL_InitTick>

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40022000 	.word	0x40022000
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	08008f58 	.word	0x08008f58
 8004c84:	20000038 	.word	0x20000038
 8004c88:	2000003c 	.word	0x2000003c

08004c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c8c:	b490      	push	{r4, r7}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c92:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xac>)
 8004c94:	1d3c      	adds	r4, r7, #4
 8004c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c9c:	f240 2301 	movw	r3, #513	; 0x201
 8004ca0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cb6:	4b21      	ldr	r3, [pc, #132]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d002      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x40>
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d003      	beq.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x46>
 8004cca:	e02b      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cce:	623b      	str	r3, [r7, #32]
      break;
 8004cd0:	e02b      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	0c9b      	lsrs	r3, r3, #18
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	3328      	adds	r3, #40	; 0x28
 8004cdc:	443b      	add	r3, r7
 8004cde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ce2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d012      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	0c5b      	lsrs	r3, r3, #17
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	3328      	adds	r3, #40	; 0x28
 8004cfa:	443b      	add	r3, r7
 8004cfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d06:	fb03 f202 	mul.w	r2, r3, r2
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
 8004d12:	e004      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	4a0b      	ldr	r2, [pc, #44]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	623b      	str	r3, [r7, #32]
      break;
 8004d22:	e002      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d26:	623b      	str	r3, [r7, #32]
      break;
 8004d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3728      	adds	r7, #40	; 0x28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc90      	pop	{r4, r7}
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	08008f28 	.word	0x08008f28
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	007a1200 	.word	0x007a1200
 8004d44:	003d0900 	.word	0x003d0900

08004d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d4c:	4b02      	ldr	r3, [pc, #8]	; (8004d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr
 8004d58:	20000038 	.word	0x20000038

08004d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d60:	f7ff fff2 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4903      	ldr	r1, [pc, #12]	; (8004d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	08008f68 	.word	0x08008f68

08004d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d88:	f7ff ffde 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	0adb      	lsrs	r3, r3, #11
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4903      	ldr	r1, [pc, #12]	; (8004da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40021000 	.word	0x40021000
 8004da8:	08008f68 	.word	0x08008f68

08004dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <RCC_Delay+0x34>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <RCC_Delay+0x38>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	0a5b      	lsrs	r3, r3, #9
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004dc8:	bf00      	nop
  }
  while (Delay --);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	60fa      	str	r2, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f9      	bne.n	8004dc8 <RCC_Delay+0x1c>
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr
 8004de0:	20000038 	.word	0x20000038
 8004de4:	10624dd3 	.word	0x10624dd3

08004de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d07d      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004e04:	2300      	movs	r3, #0
 8004e06:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e08:	4b4f      	ldr	r3, [pc, #316]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10d      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e14:	4b4c      	ldr	r3, [pc, #304]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	4a4b      	ldr	r2, [pc, #300]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	61d3      	str	r3, [r2, #28]
 8004e20:	4b49      	ldr	r3, [pc, #292]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e30:	4b46      	ldr	r3, [pc, #280]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d118      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3c:	4b43      	ldr	r3, [pc, #268]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a42      	ldr	r2, [pc, #264]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e48:	f7fd fba2 	bl	8002590 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4e:	e008      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e50:	f7fd fb9e 	bl	8002590 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e06d      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e62:	4b3a      	ldr	r3, [pc, #232]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e6e:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d02e      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d027      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e8c:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e96:	4b2e      	ldr	r3, [pc, #184]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e9c:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ea2:	4a29      	ldr	r2, [pc, #164]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d014      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb2:	f7fd fb6d 	bl	8002590 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fd fb69 	bl	8002590 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e036      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed0:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ee      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4917      	ldr	r1, [pc, #92]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d105      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef4:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004efe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	490b      	ldr	r1, [pc, #44]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	4904      	ldr	r1, [pc, #16]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	40007000 	.word	0x40007000
 8004f50:	42420440 	.word	0x42420440

08004f54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b08d      	sub	sp, #52	; 0x34
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f5c:	4b58      	ldr	r3, [pc, #352]	; (80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004f5e:	f107 040c 	add.w	r4, r7, #12
 8004f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f68:	f240 2301 	movw	r3, #513	; 0x201
 8004f6c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	2300      	movs	r3, #0
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d00a      	beq.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	f200 808e 	bhi.w	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d049      	beq.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d079      	beq.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004f9c:	e086      	b.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004f9e:	4b49      	ldr	r3, [pc, #292]	; (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004fa4:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d07f      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	0c9b      	lsrs	r3, r3, #18
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	3330      	adds	r3, #48	; 0x30
 8004fba:	443b      	add	r3, r7
 8004fbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004fc0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d017      	beq.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fcc:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	0c5b      	lsrs	r3, r3, #17
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	3330      	adds	r3, #48	; 0x30
 8004fd8:	443b      	add	r3, r7
 8004fda:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00d      	beq.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004fea:	4a37      	ldr	r2, [pc, #220]	; (80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffa:	e004      	b.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	4a33      	ldr	r2, [pc, #204]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005000:	fb02 f303 	mul.w	r3, r2, r3
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005012:	d102      	bne.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005018:	e04a      	b.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005028:	e042      	b.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800502a:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503a:	d108      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
 800504c:	e01f      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005058:	d109      	bne.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800505a:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8005066:	f649 4340 	movw	r3, #40000	; 0x9c40
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
 800506c:	e00f      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005078:	d11c      	bne.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8005086:	f24f 4324 	movw	r3, #62500	; 0xf424
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800508c:	e012      	b.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800508e:	e011      	b.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005090:	f7ff fe78 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 8005094:	4602      	mov	r2, r0
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	0b9b      	lsrs	r3, r3, #14
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	3301      	adds	r3, #1
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050aa:	e004      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80050ac:	bf00      	nop
 80050ae:	e002      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80050b0:	bf00      	nop
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80050b4:	bf00      	nop
    }
  }
  return (frequency);
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3734      	adds	r7, #52	; 0x34
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}
 80050c0:	08008f38 	.word	0x08008f38
 80050c4:	40021000 	.word	0x40021000
 80050c8:	007a1200 	.word	0x007a1200
 80050cc:	003d0900 	.word	0x003d0900
 80050d0:	aaaaaaab 	.word	0xaaaaaaab

080050d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e076      	b.n	80051d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d108      	bne.n	8005100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050f6:	d009      	beq.n	800510c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	61da      	str	r2, [r3, #28]
 80050fe:	e005      	b.n	800510c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fc ffc0 	bl	80020ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005142:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005190:	ea42 0103 	orr.w	r1, r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	0c1a      	lsrs	r2, r3, #16
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f002 0204 	and.w	r2, r2, #4
 80051b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08c      	sub	sp, #48	; 0x30
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051ea:	2301      	movs	r3, #1
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_SPI_TransmitReceive+0x26>
 80051fe:	2302      	movs	r3, #2
 8005200:	e18a      	b.n	8005518 <HAL_SPI_TransmitReceive+0x33c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800520a:	f7fd f9c1 	bl	8002590 <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005228:	2b01      	cmp	r3, #1
 800522a:	d00f      	beq.n	800524c <HAL_SPI_TransmitReceive+0x70>
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005232:	d107      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x68>
 800523c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005240:	2b04      	cmp	r3, #4
 8005242:	d003      	beq.n	800524c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005244:	2302      	movs	r3, #2
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800524a:	e15b      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_SPI_TransmitReceive+0x82>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_TransmitReceive+0x82>
 8005258:	887b      	ldrh	r3, [r7, #2]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005264:	e14e      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b04      	cmp	r3, #4
 8005270:	d003      	beq.n	800527a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2205      	movs	r2, #5
 8005276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	887a      	ldrh	r2, [r7, #2]
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	887a      	ldrh	r2, [r7, #2]
 800529c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	887a      	ldrh	r2, [r7, #2]
 80052a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	d007      	beq.n	80052ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d6:	d178      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_SPI_TransmitReceive+0x10a>
 80052e0:	8b7b      	ldrh	r3, [r7, #26]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d166      	bne.n	80053b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	881a      	ldrh	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	1c9a      	adds	r2, r3, #2
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530a:	e053      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b02      	cmp	r3, #2
 8005318:	d11b      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x176>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d016      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x176>
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d113      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	881a      	ldrh	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	1c9a      	adds	r2, r3, #2
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b01      	cmp	r3, #1
 800535e:	d119      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x1b8>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d014      	beq.n	8005394 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	b292      	uxth	r2, r2
 8005376:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	1c9a      	adds	r2, r3, #2
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005390:	2301      	movs	r3, #1
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005394:	f7fd f8fc 	bl	8002590 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d807      	bhi.n	80053b4 <HAL_SPI_TransmitReceive+0x1d8>
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d003      	beq.n	80053b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053b2:	e0a7      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1a6      	bne.n	800530c <HAL_SPI_TransmitReceive+0x130>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1a1      	bne.n	800530c <HAL_SPI_TransmitReceive+0x130>
 80053c8:	e07c      	b.n	80054c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x1fc>
 80053d2:	8b7b      	ldrh	r3, [r7, #26]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d16b      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053fe:	e057      	b.n	80054b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b02      	cmp	r3, #2
 800540c:	d11c      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x26c>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d017      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x26c>
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d114      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	7812      	ldrb	r2, [r2, #0]
 800542a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b01      	cmp	r3, #1
 8005454:	d119      	bne.n	800548a <HAL_SPI_TransmitReceive+0x2ae>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d014      	beq.n	800548a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005486:	2301      	movs	r3, #1
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800548a:	f7fd f881 	bl	8002590 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005496:	429a      	cmp	r2, r3
 8005498:	d803      	bhi.n	80054a2 <HAL_SPI_TransmitReceive+0x2c6>
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d102      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x2cc>
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d103      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054ae:	e029      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1a2      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x224>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d19d      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f8b1 	bl	8005630 <SPI_EndRxTxTransaction>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80054e0:	e010      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	e000      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005502:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005514:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005518:	4618      	mov	r0, r3
 800551a:	3730      	adds	r7, #48	; 0x30
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005530:	f7fd f82e 	bl	8002590 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	4413      	add	r3, r2
 800553e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005540:	f7fd f826 	bl	8002590 <HAL_GetTick>
 8005544:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005546:	4b39      	ldr	r3, [pc, #228]	; (800562c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	015b      	lsls	r3, r3, #5
 800554c:	0d1b      	lsrs	r3, r3, #20
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	fb02 f303 	mul.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005556:	e054      	b.n	8005602 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d050      	beq.n	8005602 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005560:	f7fd f816 	bl	8002590 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	429a      	cmp	r2, r3
 800556e:	d902      	bls.n	8005576 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d13d      	bne.n	80055f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005584:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800558e:	d111      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005598:	d004      	beq.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a2:	d107      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055bc:	d10f      	bne.n	80055de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e017      	b.n	8005622 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3b01      	subs	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	429a      	cmp	r2, r3
 800561e:	d19b      	bne.n	8005558 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000038 	.word	0x20000038

08005630 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2200      	movs	r2, #0
 8005644:	2180      	movs	r1, #128	; 0x80
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff ff6a 	bl	8005520 <SPI_WaitFlagStateUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005656:	f043 0220 	orr.w	r2, r3, #32
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e000      	b.n	8005664 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e041      	b.n	8005702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fc fd56 	bl	8002144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f000 faba 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	d001      	beq.n	8005724 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e032      	b.n	800578a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a18      	ldr	r2, [pc, #96]	; (8005794 <HAL_TIM_Base_Start+0x88>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00e      	beq.n	8005754 <HAL_TIM_Base_Start+0x48>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573e:	d009      	beq.n	8005754 <HAL_TIM_Base_Start+0x48>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a14      	ldr	r2, [pc, #80]	; (8005798 <HAL_TIM_Base_Start+0x8c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <HAL_TIM_Base_Start+0x48>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a13      	ldr	r2, [pc, #76]	; (800579c <HAL_TIM_Base_Start+0x90>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d111      	bne.n	8005778 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b06      	cmp	r3, #6
 8005764:	d010      	beq.n	8005788 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0201 	orr.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005776:	e007      	b.n	8005788 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800

080057a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d001      	beq.n	80057b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e03a      	b.n	800582e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a18      	ldr	r2, [pc, #96]	; (8005838 <HAL_TIM_Base_Start_IT+0x98>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00e      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0x58>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e2:	d009      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0x58>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a14      	ldr	r2, [pc, #80]	; (800583c <HAL_TIM_Base_Start_IT+0x9c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0x58>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a13      	ldr	r2, [pc, #76]	; (8005840 <HAL_TIM_Base_Start_IT+0xa0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d111      	bne.n	800581c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b06      	cmp	r3, #6
 8005808:	d010      	beq.n	800582c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0201 	orr.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581a:	e007      	b.n	800582c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800

08005844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d122      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b02      	cmp	r3, #2
 8005866:	d11b      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0202 	mvn.w	r2, #2
 8005870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f9b1 	bl	8005bee <HAL_TIM_IC_CaptureCallback>
 800588c:	e005      	b.n	800589a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9a4 	bl	8005bdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f9b3 	bl	8005c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d122      	bne.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d11b      	bne.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0204 	mvn.w	r2, #4
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f987 	bl	8005bee <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f97a 	bl	8005bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f989 	bl	8005c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d122      	bne.n	8005948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b08      	cmp	r3, #8
 800590e:	d11b      	bne.n	8005948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0208 	mvn.w	r2, #8
 8005918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2204      	movs	r2, #4
 800591e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f95d 	bl	8005bee <HAL_TIM_IC_CaptureCallback>
 8005934:	e005      	b.n	8005942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f950 	bl	8005bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f95f 	bl	8005c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2b10      	cmp	r3, #16
 8005954:	d122      	bne.n	800599c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	2b10      	cmp	r3, #16
 8005962:	d11b      	bne.n	800599c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0210 	mvn.w	r2, #16
 800596c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2208      	movs	r2, #8
 8005972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f933 	bl	8005bee <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f926 	bl	8005bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f935 	bl	8005c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10e      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d107      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0201 	mvn.w	r2, #1
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fb f99e 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d2:	2b80      	cmp	r3, #128	; 0x80
 80059d4:	d10e      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d107      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fa77 	bl	8005ee2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d10e      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d107      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f8f9 	bl	8005c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d10e      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d107      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0220 	mvn.w	r2, #32
 8005a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fa42 	bl	8005ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIM_ConfigClockSource+0x18>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e0b3      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x180>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa4:	d03e      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0xd0>
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aaa:	f200 8087 	bhi.w	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab2:	f000 8085 	beq.w	8005bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aba:	d87f      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005abc:	2b70      	cmp	r3, #112	; 0x70
 8005abe:	d01a      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0xa2>
 8005ac0:	2b70      	cmp	r3, #112	; 0x70
 8005ac2:	d87b      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005ac4:	2b60      	cmp	r3, #96	; 0x60
 8005ac6:	d050      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x116>
 8005ac8:	2b60      	cmp	r3, #96	; 0x60
 8005aca:	d877      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005acc:	2b50      	cmp	r3, #80	; 0x50
 8005ace:	d03c      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0xf6>
 8005ad0:	2b50      	cmp	r3, #80	; 0x50
 8005ad2:	d873      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d058      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x136>
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d86f      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005adc:	2b30      	cmp	r3, #48	; 0x30
 8005ade:	d064      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x156>
 8005ae0:	2b30      	cmp	r3, #48	; 0x30
 8005ae2:	d86b      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d060      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x156>
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d867      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05c      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x156>
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d05a      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005af4:	e062      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6899      	ldr	r1, [r3, #8]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f000 f966 	bl	8005dd6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	609a      	str	r2, [r3, #8]
      break;
 8005b22:	e04e      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6899      	ldr	r1, [r3, #8]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f000 f94f 	bl	8005dd6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b46:	609a      	str	r2, [r3, #8]
      break;
 8005b48:	e03b      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 f8c6 	bl	8005ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2150      	movs	r1, #80	; 0x50
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f91d 	bl	8005da2 <TIM_ITRx_SetConfig>
      break;
 8005b68:	e02b      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6859      	ldr	r1, [r3, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f000 f8e4 	bl	8005d44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2160      	movs	r1, #96	; 0x60
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f90d 	bl	8005da2 <TIM_ITRx_SetConfig>
      break;
 8005b88:	e01b      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6859      	ldr	r1, [r3, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f000 f8a6 	bl	8005ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2140      	movs	r1, #64	; 0x40
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f8fd 	bl	8005da2 <TIM_ITRx_SetConfig>
      break;
 8005ba8:	e00b      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f000 f8f4 	bl	8005da2 <TIM_ITRx_SetConfig>
        break;
 8005bba:	e002      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bbc:	bf00      	nop
 8005bbe:	e000      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr

08005c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a29      	ldr	r2, [pc, #164]	; (8005cdc <TIM_Base_SetConfig+0xb8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_Base_SetConfig+0x30>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0x30>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a26      	ldr	r2, [pc, #152]	; (8005ce0 <TIM_Base_SetConfig+0xbc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0x30>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <TIM_Base_SetConfig+0xc0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d108      	bne.n	8005c66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1c      	ldr	r2, [pc, #112]	; (8005cdc <TIM_Base_SetConfig+0xb8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00b      	beq.n	8005c86 <TIM_Base_SetConfig+0x62>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d007      	beq.n	8005c86 <TIM_Base_SetConfig+0x62>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <TIM_Base_SetConfig+0xbc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d003      	beq.n	8005c86 <TIM_Base_SetConfig+0x62>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a18      	ldr	r2, [pc, #96]	; (8005ce4 <TIM_Base_SetConfig+0xc0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d108      	bne.n	8005c98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a07      	ldr	r2, [pc, #28]	; (8005cdc <TIM_Base_SetConfig+0xb8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d103      	bne.n	8005ccc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	615a      	str	r2, [r3, #20]
}
 8005cd2:	bf00      	nop
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800

08005ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	f023 0201 	bic.w	r2, r3, #1
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f023 030a 	bic.w	r3, r3, #10
 8005d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f023 0210 	bic.w	r2, r3, #16
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	031b      	lsls	r3, r3, #12
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	621a      	str	r2, [r3, #32]
}
 8005d98:	bf00      	nop
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f043 0307 	orr.w	r3, r3, #7
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	609a      	str	r2, [r3, #8]
}
 8005dcc:	bf00      	nop
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bc80      	pop	{r7}
 8005dd4:	4770      	bx	lr

08005dd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b087      	sub	sp, #28
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
 8005de2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005df0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	021a      	lsls	r2, r3, #8
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	609a      	str	r2, [r3, #8]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e046      	b.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d009      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a12      	ldr	r2, [pc, #72]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a10      	ldr	r2, [pc, #64]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800

08005ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e03f      	b.n	8005f86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fc f94a 	bl	80021b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2224      	movs	r2, #36	; 0x24
 8005f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f829 	bl	8005f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695a      	ldr	r2, [r3, #20]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005fca:	f023 030c 	bic.w	r3, r3, #12
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a2c      	ldr	r2, [pc, #176]	; (80060a4 <UART_SetConfig+0x114>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d103      	bne.n	8006000 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ff8:	f7fe fec4 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	e002      	b.n	8006006 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006000:	f7fe feac 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 8006004:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009a      	lsls	r2, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	4a22      	ldr	r2, [pc, #136]	; (80060a8 <UART_SetConfig+0x118>)
 800601e:	fba2 2303 	umull	r2, r3, r2, r3
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	0119      	lsls	r1, r3, #4
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	009a      	lsls	r2, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	fbb2 f2f3 	udiv	r2, r2, r3
 800603c:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <UART_SetConfig+0x118>)
 800603e:	fba3 0302 	umull	r0, r3, r3, r2
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	2064      	movs	r0, #100	; 0x64
 8006046:	fb00 f303 	mul.w	r3, r0, r3
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	3332      	adds	r3, #50	; 0x32
 8006050:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <UART_SetConfig+0x118>)
 8006052:	fba2 2303 	umull	r2, r3, r2, r3
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800605c:	4419      	add	r1, r3
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009a      	lsls	r2, r3, #2
 8006068:	441a      	add	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	fbb2 f2f3 	udiv	r2, r2, r3
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <UART_SetConfig+0x118>)
 8006076:	fba3 0302 	umull	r0, r3, r3, r2
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	2064      	movs	r0, #100	; 0x64
 800607e:	fb00 f303 	mul.w	r3, r0, r3
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	3332      	adds	r3, #50	; 0x32
 8006088:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <UART_SetConfig+0x118>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	f003 020f 	and.w	r2, r3, #15
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	440a      	add	r2, r1
 800609a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40013800 	.word	0x40013800
 80060a8:	51eb851f 	.word	0x51eb851f

080060ac <__errno>:
 80060ac:	4b01      	ldr	r3, [pc, #4]	; (80060b4 <__errno+0x8>)
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20000044 	.word	0x20000044

080060b8 <__libc_init_array>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	2600      	movs	r6, #0
 80060bc:	4d0c      	ldr	r5, [pc, #48]	; (80060f0 <__libc_init_array+0x38>)
 80060be:	4c0d      	ldr	r4, [pc, #52]	; (80060f4 <__libc_init_array+0x3c>)
 80060c0:	1b64      	subs	r4, r4, r5
 80060c2:	10a4      	asrs	r4, r4, #2
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	d109      	bne.n	80060dc <__libc_init_array+0x24>
 80060c8:	f002 ff10 	bl	8008eec <_init>
 80060cc:	2600      	movs	r6, #0
 80060ce:	4d0a      	ldr	r5, [pc, #40]	; (80060f8 <__libc_init_array+0x40>)
 80060d0:	4c0a      	ldr	r4, [pc, #40]	; (80060fc <__libc_init_array+0x44>)
 80060d2:	1b64      	subs	r4, r4, r5
 80060d4:	10a4      	asrs	r4, r4, #2
 80060d6:	42a6      	cmp	r6, r4
 80060d8:	d105      	bne.n	80060e6 <__libc_init_array+0x2e>
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e0:	4798      	blx	r3
 80060e2:	3601      	adds	r6, #1
 80060e4:	e7ee      	b.n	80060c4 <__libc_init_array+0xc>
 80060e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ea:	4798      	blx	r3
 80060ec:	3601      	adds	r6, #1
 80060ee:	e7f2      	b.n	80060d6 <__libc_init_array+0x1e>
 80060f0:	0800934c 	.word	0x0800934c
 80060f4:	0800934c 	.word	0x0800934c
 80060f8:	0800934c 	.word	0x0800934c
 80060fc:	08009350 	.word	0x08009350

08006100 <memcpy>:
 8006100:	440a      	add	r2, r1
 8006102:	4291      	cmp	r1, r2
 8006104:	f100 33ff 	add.w	r3, r0, #4294967295
 8006108:	d100      	bne.n	800610c <memcpy+0xc>
 800610a:	4770      	bx	lr
 800610c:	b510      	push	{r4, lr}
 800610e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006112:	4291      	cmp	r1, r2
 8006114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006118:	d1f9      	bne.n	800610e <memcpy+0xe>
 800611a:	bd10      	pop	{r4, pc}

0800611c <memset>:
 800611c:	4603      	mov	r3, r0
 800611e:	4402      	add	r2, r0
 8006120:	4293      	cmp	r3, r2
 8006122:	d100      	bne.n	8006126 <memset+0xa>
 8006124:	4770      	bx	lr
 8006126:	f803 1b01 	strb.w	r1, [r3], #1
 800612a:	e7f9      	b.n	8006120 <memset+0x4>

0800612c <__cvt>:
 800612c:	2b00      	cmp	r3, #0
 800612e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006132:	461f      	mov	r7, r3
 8006134:	bfbb      	ittet	lt
 8006136:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800613a:	461f      	movlt	r7, r3
 800613c:	2300      	movge	r3, #0
 800613e:	232d      	movlt	r3, #45	; 0x2d
 8006140:	b088      	sub	sp, #32
 8006142:	4614      	mov	r4, r2
 8006144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006146:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006148:	7013      	strb	r3, [r2, #0]
 800614a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800614c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006150:	f023 0820 	bic.w	r8, r3, #32
 8006154:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006158:	d005      	beq.n	8006166 <__cvt+0x3a>
 800615a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800615e:	d100      	bne.n	8006162 <__cvt+0x36>
 8006160:	3501      	adds	r5, #1
 8006162:	2302      	movs	r3, #2
 8006164:	e000      	b.n	8006168 <__cvt+0x3c>
 8006166:	2303      	movs	r3, #3
 8006168:	aa07      	add	r2, sp, #28
 800616a:	9204      	str	r2, [sp, #16]
 800616c:	aa06      	add	r2, sp, #24
 800616e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006172:	e9cd 3500 	strd	r3, r5, [sp]
 8006176:	4622      	mov	r2, r4
 8006178:	463b      	mov	r3, r7
 800617a:	f000 fcf9 	bl	8006b70 <_dtoa_r>
 800617e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006182:	4606      	mov	r6, r0
 8006184:	d102      	bne.n	800618c <__cvt+0x60>
 8006186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006188:	07db      	lsls	r3, r3, #31
 800618a:	d522      	bpl.n	80061d2 <__cvt+0xa6>
 800618c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006190:	eb06 0905 	add.w	r9, r6, r5
 8006194:	d110      	bne.n	80061b8 <__cvt+0x8c>
 8006196:	7833      	ldrb	r3, [r6, #0]
 8006198:	2b30      	cmp	r3, #48	; 0x30
 800619a:	d10a      	bne.n	80061b2 <__cvt+0x86>
 800619c:	2200      	movs	r2, #0
 800619e:	2300      	movs	r3, #0
 80061a0:	4620      	mov	r0, r4
 80061a2:	4639      	mov	r1, r7
 80061a4:	f7fa fc00 	bl	80009a8 <__aeabi_dcmpeq>
 80061a8:	b918      	cbnz	r0, 80061b2 <__cvt+0x86>
 80061aa:	f1c5 0501 	rsb	r5, r5, #1
 80061ae:	f8ca 5000 	str.w	r5, [sl]
 80061b2:	f8da 3000 	ldr.w	r3, [sl]
 80061b6:	4499      	add	r9, r3
 80061b8:	2200      	movs	r2, #0
 80061ba:	2300      	movs	r3, #0
 80061bc:	4620      	mov	r0, r4
 80061be:	4639      	mov	r1, r7
 80061c0:	f7fa fbf2 	bl	80009a8 <__aeabi_dcmpeq>
 80061c4:	b108      	cbz	r0, 80061ca <__cvt+0x9e>
 80061c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80061ca:	2230      	movs	r2, #48	; 0x30
 80061cc:	9b07      	ldr	r3, [sp, #28]
 80061ce:	454b      	cmp	r3, r9
 80061d0:	d307      	bcc.n	80061e2 <__cvt+0xb6>
 80061d2:	4630      	mov	r0, r6
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061d8:	1b9b      	subs	r3, r3, r6
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	b008      	add	sp, #32
 80061de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e2:	1c59      	adds	r1, r3, #1
 80061e4:	9107      	str	r1, [sp, #28]
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	e7f0      	b.n	80061cc <__cvt+0xa0>

080061ea <__exponent>:
 80061ea:	4603      	mov	r3, r0
 80061ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ee:	2900      	cmp	r1, #0
 80061f0:	f803 2b02 	strb.w	r2, [r3], #2
 80061f4:	bfb6      	itet	lt
 80061f6:	222d      	movlt	r2, #45	; 0x2d
 80061f8:	222b      	movge	r2, #43	; 0x2b
 80061fa:	4249      	neglt	r1, r1
 80061fc:	2909      	cmp	r1, #9
 80061fe:	7042      	strb	r2, [r0, #1]
 8006200:	dd2b      	ble.n	800625a <__exponent+0x70>
 8006202:	f10d 0407 	add.w	r4, sp, #7
 8006206:	46a4      	mov	ip, r4
 8006208:	270a      	movs	r7, #10
 800620a:	fb91 f6f7 	sdiv	r6, r1, r7
 800620e:	460a      	mov	r2, r1
 8006210:	46a6      	mov	lr, r4
 8006212:	fb07 1516 	mls	r5, r7, r6, r1
 8006216:	2a63      	cmp	r2, #99	; 0x63
 8006218:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800621c:	4631      	mov	r1, r6
 800621e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006222:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006226:	dcf0      	bgt.n	800620a <__exponent+0x20>
 8006228:	3130      	adds	r1, #48	; 0x30
 800622a:	f1ae 0502 	sub.w	r5, lr, #2
 800622e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006232:	4629      	mov	r1, r5
 8006234:	1c44      	adds	r4, r0, #1
 8006236:	4561      	cmp	r1, ip
 8006238:	d30a      	bcc.n	8006250 <__exponent+0x66>
 800623a:	f10d 0209 	add.w	r2, sp, #9
 800623e:	eba2 020e 	sub.w	r2, r2, lr
 8006242:	4565      	cmp	r5, ip
 8006244:	bf88      	it	hi
 8006246:	2200      	movhi	r2, #0
 8006248:	4413      	add	r3, r2
 800624a:	1a18      	subs	r0, r3, r0
 800624c:	b003      	add	sp, #12
 800624e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006250:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006254:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006258:	e7ed      	b.n	8006236 <__exponent+0x4c>
 800625a:	2330      	movs	r3, #48	; 0x30
 800625c:	3130      	adds	r1, #48	; 0x30
 800625e:	7083      	strb	r3, [r0, #2]
 8006260:	70c1      	strb	r1, [r0, #3]
 8006262:	1d03      	adds	r3, r0, #4
 8006264:	e7f1      	b.n	800624a <__exponent+0x60>
	...

08006268 <_printf_float>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	b091      	sub	sp, #68	; 0x44
 800626e:	460c      	mov	r4, r1
 8006270:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006274:	4616      	mov	r6, r2
 8006276:	461f      	mov	r7, r3
 8006278:	4605      	mov	r5, r0
 800627a:	f001 fa67 	bl	800774c <_localeconv_r>
 800627e:	6803      	ldr	r3, [r0, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	9309      	str	r3, [sp, #36]	; 0x24
 8006284:	f7f9 ff64 	bl	8000150 <strlen>
 8006288:	2300      	movs	r3, #0
 800628a:	930e      	str	r3, [sp, #56]	; 0x38
 800628c:	f8d8 3000 	ldr.w	r3, [r8]
 8006290:	900a      	str	r0, [sp, #40]	; 0x28
 8006292:	3307      	adds	r3, #7
 8006294:	f023 0307 	bic.w	r3, r3, #7
 8006298:	f103 0208 	add.w	r2, r3, #8
 800629c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80062a0:	f8d4 b000 	ldr.w	fp, [r4]
 80062a4:	f8c8 2000 	str.w	r2, [r8]
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062b0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80062b4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80062b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80062ba:	f04f 32ff 	mov.w	r2, #4294967295
 80062be:	4640      	mov	r0, r8
 80062c0:	4b9c      	ldr	r3, [pc, #624]	; (8006534 <_printf_float+0x2cc>)
 80062c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062c4:	f7fa fba2 	bl	8000a0c <__aeabi_dcmpun>
 80062c8:	bb70      	cbnz	r0, 8006328 <_printf_float+0xc0>
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295
 80062ce:	4640      	mov	r0, r8
 80062d0:	4b98      	ldr	r3, [pc, #608]	; (8006534 <_printf_float+0x2cc>)
 80062d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062d4:	f7fa fb7c 	bl	80009d0 <__aeabi_dcmple>
 80062d8:	bb30      	cbnz	r0, 8006328 <_printf_float+0xc0>
 80062da:	2200      	movs	r2, #0
 80062dc:	2300      	movs	r3, #0
 80062de:	4640      	mov	r0, r8
 80062e0:	4651      	mov	r1, sl
 80062e2:	f7fa fb6b 	bl	80009bc <__aeabi_dcmplt>
 80062e6:	b110      	cbz	r0, 80062ee <_printf_float+0x86>
 80062e8:	232d      	movs	r3, #45	; 0x2d
 80062ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ee:	4b92      	ldr	r3, [pc, #584]	; (8006538 <_printf_float+0x2d0>)
 80062f0:	4892      	ldr	r0, [pc, #584]	; (800653c <_printf_float+0x2d4>)
 80062f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80062f6:	bf94      	ite	ls
 80062f8:	4698      	movls	r8, r3
 80062fa:	4680      	movhi	r8, r0
 80062fc:	2303      	movs	r3, #3
 80062fe:	f04f 0a00 	mov.w	sl, #0
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	f02b 0304 	bic.w	r3, fp, #4
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	4633      	mov	r3, r6
 800630c:	4621      	mov	r1, r4
 800630e:	4628      	mov	r0, r5
 8006310:	9700      	str	r7, [sp, #0]
 8006312:	aa0f      	add	r2, sp, #60	; 0x3c
 8006314:	f000 f9d4 	bl	80066c0 <_printf_common>
 8006318:	3001      	adds	r0, #1
 800631a:	f040 8090 	bne.w	800643e <_printf_float+0x1d6>
 800631e:	f04f 30ff 	mov.w	r0, #4294967295
 8006322:	b011      	add	sp, #68	; 0x44
 8006324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006328:	4642      	mov	r2, r8
 800632a:	4653      	mov	r3, sl
 800632c:	4640      	mov	r0, r8
 800632e:	4651      	mov	r1, sl
 8006330:	f7fa fb6c 	bl	8000a0c <__aeabi_dcmpun>
 8006334:	b148      	cbz	r0, 800634a <_printf_float+0xe2>
 8006336:	f1ba 0f00 	cmp.w	sl, #0
 800633a:	bfb8      	it	lt
 800633c:	232d      	movlt	r3, #45	; 0x2d
 800633e:	4880      	ldr	r0, [pc, #512]	; (8006540 <_printf_float+0x2d8>)
 8006340:	bfb8      	it	lt
 8006342:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006346:	4b7f      	ldr	r3, [pc, #508]	; (8006544 <_printf_float+0x2dc>)
 8006348:	e7d3      	b.n	80062f2 <_printf_float+0x8a>
 800634a:	6863      	ldr	r3, [r4, #4]
 800634c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	d142      	bne.n	80063da <_printf_float+0x172>
 8006354:	2306      	movs	r3, #6
 8006356:	6063      	str	r3, [r4, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	9206      	str	r2, [sp, #24]
 800635c:	aa0e      	add	r2, sp, #56	; 0x38
 800635e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006362:	aa0d      	add	r2, sp, #52	; 0x34
 8006364:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006368:	9203      	str	r2, [sp, #12]
 800636a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800636e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006372:	6023      	str	r3, [r4, #0]
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	4642      	mov	r2, r8
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	4628      	mov	r0, r5
 800637c:	4653      	mov	r3, sl
 800637e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006380:	f7ff fed4 	bl	800612c <__cvt>
 8006384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006386:	4680      	mov	r8, r0
 8006388:	2947      	cmp	r1, #71	; 0x47
 800638a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800638c:	d108      	bne.n	80063a0 <_printf_float+0x138>
 800638e:	1cc8      	adds	r0, r1, #3
 8006390:	db02      	blt.n	8006398 <_printf_float+0x130>
 8006392:	6863      	ldr	r3, [r4, #4]
 8006394:	4299      	cmp	r1, r3
 8006396:	dd40      	ble.n	800641a <_printf_float+0x1b2>
 8006398:	f1a9 0902 	sub.w	r9, r9, #2
 800639c:	fa5f f989 	uxtb.w	r9, r9
 80063a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063a4:	d81f      	bhi.n	80063e6 <_printf_float+0x17e>
 80063a6:	464a      	mov	r2, r9
 80063a8:	3901      	subs	r1, #1
 80063aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063ae:	910d      	str	r1, [sp, #52]	; 0x34
 80063b0:	f7ff ff1b 	bl	80061ea <__exponent>
 80063b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063b6:	4682      	mov	sl, r0
 80063b8:	1813      	adds	r3, r2, r0
 80063ba:	2a01      	cmp	r2, #1
 80063bc:	6123      	str	r3, [r4, #16]
 80063be:	dc02      	bgt.n	80063c6 <_printf_float+0x15e>
 80063c0:	6822      	ldr	r2, [r4, #0]
 80063c2:	07d2      	lsls	r2, r2, #31
 80063c4:	d501      	bpl.n	80063ca <_printf_float+0x162>
 80063c6:	3301      	adds	r3, #1
 80063c8:	6123      	str	r3, [r4, #16]
 80063ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d09b      	beq.n	800630a <_printf_float+0xa2>
 80063d2:	232d      	movs	r3, #45	; 0x2d
 80063d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063d8:	e797      	b.n	800630a <_printf_float+0xa2>
 80063da:	2947      	cmp	r1, #71	; 0x47
 80063dc:	d1bc      	bne.n	8006358 <_printf_float+0xf0>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1ba      	bne.n	8006358 <_printf_float+0xf0>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e7b7      	b.n	8006356 <_printf_float+0xee>
 80063e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80063ea:	d118      	bne.n	800641e <_printf_float+0x1b6>
 80063ec:	2900      	cmp	r1, #0
 80063ee:	6863      	ldr	r3, [r4, #4]
 80063f0:	dd0b      	ble.n	800640a <_printf_float+0x1a2>
 80063f2:	6121      	str	r1, [r4, #16]
 80063f4:	b913      	cbnz	r3, 80063fc <_printf_float+0x194>
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	07d0      	lsls	r0, r2, #31
 80063fa:	d502      	bpl.n	8006402 <_printf_float+0x19a>
 80063fc:	3301      	adds	r3, #1
 80063fe:	440b      	add	r3, r1
 8006400:	6123      	str	r3, [r4, #16]
 8006402:	f04f 0a00 	mov.w	sl, #0
 8006406:	65a1      	str	r1, [r4, #88]	; 0x58
 8006408:	e7df      	b.n	80063ca <_printf_float+0x162>
 800640a:	b913      	cbnz	r3, 8006412 <_printf_float+0x1aa>
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	07d2      	lsls	r2, r2, #31
 8006410:	d501      	bpl.n	8006416 <_printf_float+0x1ae>
 8006412:	3302      	adds	r3, #2
 8006414:	e7f4      	b.n	8006400 <_printf_float+0x198>
 8006416:	2301      	movs	r3, #1
 8006418:	e7f2      	b.n	8006400 <_printf_float+0x198>
 800641a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800641e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006420:	4299      	cmp	r1, r3
 8006422:	db05      	blt.n	8006430 <_printf_float+0x1c8>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	6121      	str	r1, [r4, #16]
 8006428:	07d8      	lsls	r0, r3, #31
 800642a:	d5ea      	bpl.n	8006402 <_printf_float+0x19a>
 800642c:	1c4b      	adds	r3, r1, #1
 800642e:	e7e7      	b.n	8006400 <_printf_float+0x198>
 8006430:	2900      	cmp	r1, #0
 8006432:	bfcc      	ite	gt
 8006434:	2201      	movgt	r2, #1
 8006436:	f1c1 0202 	rsble	r2, r1, #2
 800643a:	4413      	add	r3, r2
 800643c:	e7e0      	b.n	8006400 <_printf_float+0x198>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	055a      	lsls	r2, r3, #21
 8006442:	d407      	bmi.n	8006454 <_printf_float+0x1ec>
 8006444:	6923      	ldr	r3, [r4, #16]
 8006446:	4642      	mov	r2, r8
 8006448:	4631      	mov	r1, r6
 800644a:	4628      	mov	r0, r5
 800644c:	47b8      	blx	r7
 800644e:	3001      	adds	r0, #1
 8006450:	d12b      	bne.n	80064aa <_printf_float+0x242>
 8006452:	e764      	b.n	800631e <_printf_float+0xb6>
 8006454:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006458:	f240 80dd 	bls.w	8006616 <_printf_float+0x3ae>
 800645c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006460:	2200      	movs	r2, #0
 8006462:	2300      	movs	r3, #0
 8006464:	f7fa faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8006468:	2800      	cmp	r0, #0
 800646a:	d033      	beq.n	80064d4 <_printf_float+0x26c>
 800646c:	2301      	movs	r3, #1
 800646e:	4631      	mov	r1, r6
 8006470:	4628      	mov	r0, r5
 8006472:	4a35      	ldr	r2, [pc, #212]	; (8006548 <_printf_float+0x2e0>)
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	f43f af51 	beq.w	800631e <_printf_float+0xb6>
 800647c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006480:	429a      	cmp	r2, r3
 8006482:	db02      	blt.n	800648a <_printf_float+0x222>
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	07d8      	lsls	r0, r3, #31
 8006488:	d50f      	bpl.n	80064aa <_printf_float+0x242>
 800648a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800648e:	4631      	mov	r1, r6
 8006490:	4628      	mov	r0, r5
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	f43f af42 	beq.w	800631e <_printf_float+0xb6>
 800649a:	f04f 0800 	mov.w	r8, #0
 800649e:	f104 091a 	add.w	r9, r4, #26
 80064a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064a4:	3b01      	subs	r3, #1
 80064a6:	4543      	cmp	r3, r8
 80064a8:	dc09      	bgt.n	80064be <_printf_float+0x256>
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	079b      	lsls	r3, r3, #30
 80064ae:	f100 8102 	bmi.w	80066b6 <_printf_float+0x44e>
 80064b2:	68e0      	ldr	r0, [r4, #12]
 80064b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064b6:	4298      	cmp	r0, r3
 80064b8:	bfb8      	it	lt
 80064ba:	4618      	movlt	r0, r3
 80064bc:	e731      	b.n	8006322 <_printf_float+0xba>
 80064be:	2301      	movs	r3, #1
 80064c0:	464a      	mov	r2, r9
 80064c2:	4631      	mov	r1, r6
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b8      	blx	r7
 80064c8:	3001      	adds	r0, #1
 80064ca:	f43f af28 	beq.w	800631e <_printf_float+0xb6>
 80064ce:	f108 0801 	add.w	r8, r8, #1
 80064d2:	e7e6      	b.n	80064a2 <_printf_float+0x23a>
 80064d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	dc38      	bgt.n	800654c <_printf_float+0x2e4>
 80064da:	2301      	movs	r3, #1
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	4a19      	ldr	r2, [pc, #100]	; (8006548 <_printf_float+0x2e0>)
 80064e2:	47b8      	blx	r7
 80064e4:	3001      	adds	r0, #1
 80064e6:	f43f af1a 	beq.w	800631e <_printf_float+0xb6>
 80064ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064ee:	4313      	orrs	r3, r2
 80064f0:	d102      	bne.n	80064f8 <_printf_float+0x290>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	07d9      	lsls	r1, r3, #31
 80064f6:	d5d8      	bpl.n	80064aa <_printf_float+0x242>
 80064f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af0b 	beq.w	800631e <_printf_float+0xb6>
 8006508:	f04f 0900 	mov.w	r9, #0
 800650c:	f104 0a1a 	add.w	sl, r4, #26
 8006510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006512:	425b      	negs	r3, r3
 8006514:	454b      	cmp	r3, r9
 8006516:	dc01      	bgt.n	800651c <_printf_float+0x2b4>
 8006518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800651a:	e794      	b.n	8006446 <_printf_float+0x1de>
 800651c:	2301      	movs	r3, #1
 800651e:	4652      	mov	r2, sl
 8006520:	4631      	mov	r1, r6
 8006522:	4628      	mov	r0, r5
 8006524:	47b8      	blx	r7
 8006526:	3001      	adds	r0, #1
 8006528:	f43f aef9 	beq.w	800631e <_printf_float+0xb6>
 800652c:	f109 0901 	add.w	r9, r9, #1
 8006530:	e7ee      	b.n	8006510 <_printf_float+0x2a8>
 8006532:	bf00      	nop
 8006534:	7fefffff 	.word	0x7fefffff
 8006538:	08008f74 	.word	0x08008f74
 800653c:	08008f78 	.word	0x08008f78
 8006540:	08008f80 	.word	0x08008f80
 8006544:	08008f7c 	.word	0x08008f7c
 8006548:	08008f84 	.word	0x08008f84
 800654c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800654e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006550:	429a      	cmp	r2, r3
 8006552:	bfa8      	it	ge
 8006554:	461a      	movge	r2, r3
 8006556:	2a00      	cmp	r2, #0
 8006558:	4691      	mov	r9, r2
 800655a:	dc37      	bgt.n	80065cc <_printf_float+0x364>
 800655c:	f04f 0b00 	mov.w	fp, #0
 8006560:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006564:	f104 021a 	add.w	r2, r4, #26
 8006568:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800656c:	ebaa 0309 	sub.w	r3, sl, r9
 8006570:	455b      	cmp	r3, fp
 8006572:	dc33      	bgt.n	80065dc <_printf_float+0x374>
 8006574:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006578:	429a      	cmp	r2, r3
 800657a:	db3b      	blt.n	80065f4 <_printf_float+0x38c>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	07da      	lsls	r2, r3, #31
 8006580:	d438      	bmi.n	80065f4 <_printf_float+0x38c>
 8006582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006584:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006586:	eba3 020a 	sub.w	r2, r3, sl
 800658a:	eba3 0901 	sub.w	r9, r3, r1
 800658e:	4591      	cmp	r9, r2
 8006590:	bfa8      	it	ge
 8006592:	4691      	movge	r9, r2
 8006594:	f1b9 0f00 	cmp.w	r9, #0
 8006598:	dc34      	bgt.n	8006604 <_printf_float+0x39c>
 800659a:	f04f 0800 	mov.w	r8, #0
 800659e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065a2:	f104 0a1a 	add.w	sl, r4, #26
 80065a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	eba3 0309 	sub.w	r3, r3, r9
 80065b0:	4543      	cmp	r3, r8
 80065b2:	f77f af7a 	ble.w	80064aa <_printf_float+0x242>
 80065b6:	2301      	movs	r3, #1
 80065b8:	4652      	mov	r2, sl
 80065ba:	4631      	mov	r1, r6
 80065bc:	4628      	mov	r0, r5
 80065be:	47b8      	blx	r7
 80065c0:	3001      	adds	r0, #1
 80065c2:	f43f aeac 	beq.w	800631e <_printf_float+0xb6>
 80065c6:	f108 0801 	add.w	r8, r8, #1
 80065ca:	e7ec      	b.n	80065a6 <_printf_float+0x33e>
 80065cc:	4613      	mov	r3, r2
 80065ce:	4631      	mov	r1, r6
 80065d0:	4642      	mov	r2, r8
 80065d2:	4628      	mov	r0, r5
 80065d4:	47b8      	blx	r7
 80065d6:	3001      	adds	r0, #1
 80065d8:	d1c0      	bne.n	800655c <_printf_float+0x2f4>
 80065da:	e6a0      	b.n	800631e <_printf_float+0xb6>
 80065dc:	2301      	movs	r3, #1
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80065e4:	47b8      	blx	r7
 80065e6:	3001      	adds	r0, #1
 80065e8:	f43f ae99 	beq.w	800631e <_printf_float+0xb6>
 80065ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065ee:	f10b 0b01 	add.w	fp, fp, #1
 80065f2:	e7b9      	b.n	8006568 <_printf_float+0x300>
 80065f4:	4631      	mov	r1, r6
 80065f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	d1bf      	bne.n	8006582 <_printf_float+0x31a>
 8006602:	e68c      	b.n	800631e <_printf_float+0xb6>
 8006604:	464b      	mov	r3, r9
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	eb08 020a 	add.w	r2, r8, sl
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	d1c2      	bne.n	800659a <_printf_float+0x332>
 8006614:	e683      	b.n	800631e <_printf_float+0xb6>
 8006616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006618:	2a01      	cmp	r2, #1
 800661a:	dc01      	bgt.n	8006620 <_printf_float+0x3b8>
 800661c:	07db      	lsls	r3, r3, #31
 800661e:	d537      	bpl.n	8006690 <_printf_float+0x428>
 8006620:	2301      	movs	r3, #1
 8006622:	4642      	mov	r2, r8
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	f43f ae77 	beq.w	800631e <_printf_float+0xb6>
 8006630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006634:	4631      	mov	r1, r6
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	f43f ae6f 	beq.w	800631e <_printf_float+0xb6>
 8006640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006644:	2200      	movs	r2, #0
 8006646:	2300      	movs	r3, #0
 8006648:	f7fa f9ae 	bl	80009a8 <__aeabi_dcmpeq>
 800664c:	b9d8      	cbnz	r0, 8006686 <_printf_float+0x41e>
 800664e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006650:	f108 0201 	add.w	r2, r8, #1
 8006654:	3b01      	subs	r3, #1
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	d10e      	bne.n	800667e <_printf_float+0x416>
 8006660:	e65d      	b.n	800631e <_printf_float+0xb6>
 8006662:	2301      	movs	r3, #1
 8006664:	464a      	mov	r2, r9
 8006666:	4631      	mov	r1, r6
 8006668:	4628      	mov	r0, r5
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	f43f ae56 	beq.w	800631e <_printf_float+0xb6>
 8006672:	f108 0801 	add.w	r8, r8, #1
 8006676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006678:	3b01      	subs	r3, #1
 800667a:	4543      	cmp	r3, r8
 800667c:	dcf1      	bgt.n	8006662 <_printf_float+0x3fa>
 800667e:	4653      	mov	r3, sl
 8006680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006684:	e6e0      	b.n	8006448 <_printf_float+0x1e0>
 8006686:	f04f 0800 	mov.w	r8, #0
 800668a:	f104 091a 	add.w	r9, r4, #26
 800668e:	e7f2      	b.n	8006676 <_printf_float+0x40e>
 8006690:	2301      	movs	r3, #1
 8006692:	4642      	mov	r2, r8
 8006694:	e7df      	b.n	8006656 <_printf_float+0x3ee>
 8006696:	2301      	movs	r3, #1
 8006698:	464a      	mov	r2, r9
 800669a:	4631      	mov	r1, r6
 800669c:	4628      	mov	r0, r5
 800669e:	47b8      	blx	r7
 80066a0:	3001      	adds	r0, #1
 80066a2:	f43f ae3c 	beq.w	800631e <_printf_float+0xb6>
 80066a6:	f108 0801 	add.w	r8, r8, #1
 80066aa:	68e3      	ldr	r3, [r4, #12]
 80066ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066ae:	1a5b      	subs	r3, r3, r1
 80066b0:	4543      	cmp	r3, r8
 80066b2:	dcf0      	bgt.n	8006696 <_printf_float+0x42e>
 80066b4:	e6fd      	b.n	80064b2 <_printf_float+0x24a>
 80066b6:	f04f 0800 	mov.w	r8, #0
 80066ba:	f104 0919 	add.w	r9, r4, #25
 80066be:	e7f4      	b.n	80066aa <_printf_float+0x442>

080066c0 <_printf_common>:
 80066c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c4:	4616      	mov	r6, r2
 80066c6:	4699      	mov	r9, r3
 80066c8:	688a      	ldr	r2, [r1, #8]
 80066ca:	690b      	ldr	r3, [r1, #16]
 80066cc:	4607      	mov	r7, r0
 80066ce:	4293      	cmp	r3, r2
 80066d0:	bfb8      	it	lt
 80066d2:	4613      	movlt	r3, r2
 80066d4:	6033      	str	r3, [r6, #0]
 80066d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066da:	460c      	mov	r4, r1
 80066dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066e0:	b10a      	cbz	r2, 80066e6 <_printf_common+0x26>
 80066e2:	3301      	adds	r3, #1
 80066e4:	6033      	str	r3, [r6, #0]
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	0699      	lsls	r1, r3, #26
 80066ea:	bf42      	ittt	mi
 80066ec:	6833      	ldrmi	r3, [r6, #0]
 80066ee:	3302      	addmi	r3, #2
 80066f0:	6033      	strmi	r3, [r6, #0]
 80066f2:	6825      	ldr	r5, [r4, #0]
 80066f4:	f015 0506 	ands.w	r5, r5, #6
 80066f8:	d106      	bne.n	8006708 <_printf_common+0x48>
 80066fa:	f104 0a19 	add.w	sl, r4, #25
 80066fe:	68e3      	ldr	r3, [r4, #12]
 8006700:	6832      	ldr	r2, [r6, #0]
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	42ab      	cmp	r3, r5
 8006706:	dc28      	bgt.n	800675a <_printf_common+0x9a>
 8006708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800670c:	1e13      	subs	r3, r2, #0
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	bf18      	it	ne
 8006712:	2301      	movne	r3, #1
 8006714:	0692      	lsls	r2, r2, #26
 8006716:	d42d      	bmi.n	8006774 <_printf_common+0xb4>
 8006718:	4649      	mov	r1, r9
 800671a:	4638      	mov	r0, r7
 800671c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006720:	47c0      	blx	r8
 8006722:	3001      	adds	r0, #1
 8006724:	d020      	beq.n	8006768 <_printf_common+0xa8>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	68e5      	ldr	r5, [r4, #12]
 800672a:	f003 0306 	and.w	r3, r3, #6
 800672e:	2b04      	cmp	r3, #4
 8006730:	bf18      	it	ne
 8006732:	2500      	movne	r5, #0
 8006734:	6832      	ldr	r2, [r6, #0]
 8006736:	f04f 0600 	mov.w	r6, #0
 800673a:	68a3      	ldr	r3, [r4, #8]
 800673c:	bf08      	it	eq
 800673e:	1aad      	subeq	r5, r5, r2
 8006740:	6922      	ldr	r2, [r4, #16]
 8006742:	bf08      	it	eq
 8006744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006748:	4293      	cmp	r3, r2
 800674a:	bfc4      	itt	gt
 800674c:	1a9b      	subgt	r3, r3, r2
 800674e:	18ed      	addgt	r5, r5, r3
 8006750:	341a      	adds	r4, #26
 8006752:	42b5      	cmp	r5, r6
 8006754:	d11a      	bne.n	800678c <_printf_common+0xcc>
 8006756:	2000      	movs	r0, #0
 8006758:	e008      	b.n	800676c <_printf_common+0xac>
 800675a:	2301      	movs	r3, #1
 800675c:	4652      	mov	r2, sl
 800675e:	4649      	mov	r1, r9
 8006760:	4638      	mov	r0, r7
 8006762:	47c0      	blx	r8
 8006764:	3001      	adds	r0, #1
 8006766:	d103      	bne.n	8006770 <_printf_common+0xb0>
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006770:	3501      	adds	r5, #1
 8006772:	e7c4      	b.n	80066fe <_printf_common+0x3e>
 8006774:	2030      	movs	r0, #48	; 0x30
 8006776:	18e1      	adds	r1, r4, r3
 8006778:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006782:	4422      	add	r2, r4
 8006784:	3302      	adds	r3, #2
 8006786:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800678a:	e7c5      	b.n	8006718 <_printf_common+0x58>
 800678c:	2301      	movs	r3, #1
 800678e:	4622      	mov	r2, r4
 8006790:	4649      	mov	r1, r9
 8006792:	4638      	mov	r0, r7
 8006794:	47c0      	blx	r8
 8006796:	3001      	adds	r0, #1
 8006798:	d0e6      	beq.n	8006768 <_printf_common+0xa8>
 800679a:	3601      	adds	r6, #1
 800679c:	e7d9      	b.n	8006752 <_printf_common+0x92>
	...

080067a0 <_printf_i>:
 80067a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	7e0f      	ldrb	r7, [r1, #24]
 80067a6:	4691      	mov	r9, r2
 80067a8:	2f78      	cmp	r7, #120	; 0x78
 80067aa:	4680      	mov	r8, r0
 80067ac:	460c      	mov	r4, r1
 80067ae:	469a      	mov	sl, r3
 80067b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067b6:	d807      	bhi.n	80067c8 <_printf_i+0x28>
 80067b8:	2f62      	cmp	r7, #98	; 0x62
 80067ba:	d80a      	bhi.n	80067d2 <_printf_i+0x32>
 80067bc:	2f00      	cmp	r7, #0
 80067be:	f000 80d9 	beq.w	8006974 <_printf_i+0x1d4>
 80067c2:	2f58      	cmp	r7, #88	; 0x58
 80067c4:	f000 80a4 	beq.w	8006910 <_printf_i+0x170>
 80067c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067d0:	e03a      	b.n	8006848 <_printf_i+0xa8>
 80067d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067d6:	2b15      	cmp	r3, #21
 80067d8:	d8f6      	bhi.n	80067c8 <_printf_i+0x28>
 80067da:	a101      	add	r1, pc, #4	; (adr r1, 80067e0 <_printf_i+0x40>)
 80067dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067e0:	08006839 	.word	0x08006839
 80067e4:	0800684d 	.word	0x0800684d
 80067e8:	080067c9 	.word	0x080067c9
 80067ec:	080067c9 	.word	0x080067c9
 80067f0:	080067c9 	.word	0x080067c9
 80067f4:	080067c9 	.word	0x080067c9
 80067f8:	0800684d 	.word	0x0800684d
 80067fc:	080067c9 	.word	0x080067c9
 8006800:	080067c9 	.word	0x080067c9
 8006804:	080067c9 	.word	0x080067c9
 8006808:	080067c9 	.word	0x080067c9
 800680c:	0800695b 	.word	0x0800695b
 8006810:	0800687d 	.word	0x0800687d
 8006814:	0800693d 	.word	0x0800693d
 8006818:	080067c9 	.word	0x080067c9
 800681c:	080067c9 	.word	0x080067c9
 8006820:	0800697d 	.word	0x0800697d
 8006824:	080067c9 	.word	0x080067c9
 8006828:	0800687d 	.word	0x0800687d
 800682c:	080067c9 	.word	0x080067c9
 8006830:	080067c9 	.word	0x080067c9
 8006834:	08006945 	.word	0x08006945
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	1d1a      	adds	r2, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	602a      	str	r2, [r5, #0]
 8006840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006848:	2301      	movs	r3, #1
 800684a:	e0a4      	b.n	8006996 <_printf_i+0x1f6>
 800684c:	6820      	ldr	r0, [r4, #0]
 800684e:	6829      	ldr	r1, [r5, #0]
 8006850:	0606      	lsls	r6, r0, #24
 8006852:	f101 0304 	add.w	r3, r1, #4
 8006856:	d50a      	bpl.n	800686e <_printf_i+0xce>
 8006858:	680e      	ldr	r6, [r1, #0]
 800685a:	602b      	str	r3, [r5, #0]
 800685c:	2e00      	cmp	r6, #0
 800685e:	da03      	bge.n	8006868 <_printf_i+0xc8>
 8006860:	232d      	movs	r3, #45	; 0x2d
 8006862:	4276      	negs	r6, r6
 8006864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006868:	230a      	movs	r3, #10
 800686a:	485e      	ldr	r0, [pc, #376]	; (80069e4 <_printf_i+0x244>)
 800686c:	e019      	b.n	80068a2 <_printf_i+0x102>
 800686e:	680e      	ldr	r6, [r1, #0]
 8006870:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006874:	602b      	str	r3, [r5, #0]
 8006876:	bf18      	it	ne
 8006878:	b236      	sxthne	r6, r6
 800687a:	e7ef      	b.n	800685c <_printf_i+0xbc>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	6820      	ldr	r0, [r4, #0]
 8006880:	1d19      	adds	r1, r3, #4
 8006882:	6029      	str	r1, [r5, #0]
 8006884:	0601      	lsls	r1, r0, #24
 8006886:	d501      	bpl.n	800688c <_printf_i+0xec>
 8006888:	681e      	ldr	r6, [r3, #0]
 800688a:	e002      	b.n	8006892 <_printf_i+0xf2>
 800688c:	0646      	lsls	r6, r0, #25
 800688e:	d5fb      	bpl.n	8006888 <_printf_i+0xe8>
 8006890:	881e      	ldrh	r6, [r3, #0]
 8006892:	2f6f      	cmp	r7, #111	; 0x6f
 8006894:	bf0c      	ite	eq
 8006896:	2308      	moveq	r3, #8
 8006898:	230a      	movne	r3, #10
 800689a:	4852      	ldr	r0, [pc, #328]	; (80069e4 <_printf_i+0x244>)
 800689c:	2100      	movs	r1, #0
 800689e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068a2:	6865      	ldr	r5, [r4, #4]
 80068a4:	2d00      	cmp	r5, #0
 80068a6:	bfa8      	it	ge
 80068a8:	6821      	ldrge	r1, [r4, #0]
 80068aa:	60a5      	str	r5, [r4, #8]
 80068ac:	bfa4      	itt	ge
 80068ae:	f021 0104 	bicge.w	r1, r1, #4
 80068b2:	6021      	strge	r1, [r4, #0]
 80068b4:	b90e      	cbnz	r6, 80068ba <_printf_i+0x11a>
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	d04d      	beq.n	8006956 <_printf_i+0x1b6>
 80068ba:	4615      	mov	r5, r2
 80068bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80068c0:	fb03 6711 	mls	r7, r3, r1, r6
 80068c4:	5dc7      	ldrb	r7, [r0, r7]
 80068c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068ca:	4637      	mov	r7, r6
 80068cc:	42bb      	cmp	r3, r7
 80068ce:	460e      	mov	r6, r1
 80068d0:	d9f4      	bls.n	80068bc <_printf_i+0x11c>
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	d10b      	bne.n	80068ee <_printf_i+0x14e>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	07de      	lsls	r6, r3, #31
 80068da:	d508      	bpl.n	80068ee <_printf_i+0x14e>
 80068dc:	6923      	ldr	r3, [r4, #16]
 80068de:	6861      	ldr	r1, [r4, #4]
 80068e0:	4299      	cmp	r1, r3
 80068e2:	bfde      	ittt	le
 80068e4:	2330      	movle	r3, #48	; 0x30
 80068e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068ee:	1b52      	subs	r2, r2, r5
 80068f0:	6122      	str	r2, [r4, #16]
 80068f2:	464b      	mov	r3, r9
 80068f4:	4621      	mov	r1, r4
 80068f6:	4640      	mov	r0, r8
 80068f8:	f8cd a000 	str.w	sl, [sp]
 80068fc:	aa03      	add	r2, sp, #12
 80068fe:	f7ff fedf 	bl	80066c0 <_printf_common>
 8006902:	3001      	adds	r0, #1
 8006904:	d14c      	bne.n	80069a0 <_printf_i+0x200>
 8006906:	f04f 30ff 	mov.w	r0, #4294967295
 800690a:	b004      	add	sp, #16
 800690c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006910:	4834      	ldr	r0, [pc, #208]	; (80069e4 <_printf_i+0x244>)
 8006912:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006916:	6829      	ldr	r1, [r5, #0]
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	f851 6b04 	ldr.w	r6, [r1], #4
 800691e:	6029      	str	r1, [r5, #0]
 8006920:	061d      	lsls	r5, r3, #24
 8006922:	d514      	bpl.n	800694e <_printf_i+0x1ae>
 8006924:	07df      	lsls	r7, r3, #31
 8006926:	bf44      	itt	mi
 8006928:	f043 0320 	orrmi.w	r3, r3, #32
 800692c:	6023      	strmi	r3, [r4, #0]
 800692e:	b91e      	cbnz	r6, 8006938 <_printf_i+0x198>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	f023 0320 	bic.w	r3, r3, #32
 8006936:	6023      	str	r3, [r4, #0]
 8006938:	2310      	movs	r3, #16
 800693a:	e7af      	b.n	800689c <_printf_i+0xfc>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	f043 0320 	orr.w	r3, r3, #32
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	2378      	movs	r3, #120	; 0x78
 8006946:	4828      	ldr	r0, [pc, #160]	; (80069e8 <_printf_i+0x248>)
 8006948:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800694c:	e7e3      	b.n	8006916 <_printf_i+0x176>
 800694e:	0659      	lsls	r1, r3, #25
 8006950:	bf48      	it	mi
 8006952:	b2b6      	uxthmi	r6, r6
 8006954:	e7e6      	b.n	8006924 <_printf_i+0x184>
 8006956:	4615      	mov	r5, r2
 8006958:	e7bb      	b.n	80068d2 <_printf_i+0x132>
 800695a:	682b      	ldr	r3, [r5, #0]
 800695c:	6826      	ldr	r6, [r4, #0]
 800695e:	1d18      	adds	r0, r3, #4
 8006960:	6961      	ldr	r1, [r4, #20]
 8006962:	6028      	str	r0, [r5, #0]
 8006964:	0635      	lsls	r5, r6, #24
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	d501      	bpl.n	800696e <_printf_i+0x1ce>
 800696a:	6019      	str	r1, [r3, #0]
 800696c:	e002      	b.n	8006974 <_printf_i+0x1d4>
 800696e:	0670      	lsls	r0, r6, #25
 8006970:	d5fb      	bpl.n	800696a <_printf_i+0x1ca>
 8006972:	8019      	strh	r1, [r3, #0]
 8006974:	2300      	movs	r3, #0
 8006976:	4615      	mov	r5, r2
 8006978:	6123      	str	r3, [r4, #16]
 800697a:	e7ba      	b.n	80068f2 <_printf_i+0x152>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	2100      	movs	r1, #0
 8006980:	1d1a      	adds	r2, r3, #4
 8006982:	602a      	str	r2, [r5, #0]
 8006984:	681d      	ldr	r5, [r3, #0]
 8006986:	6862      	ldr	r2, [r4, #4]
 8006988:	4628      	mov	r0, r5
 800698a:	f000 feeb 	bl	8007764 <memchr>
 800698e:	b108      	cbz	r0, 8006994 <_printf_i+0x1f4>
 8006990:	1b40      	subs	r0, r0, r5
 8006992:	6060      	str	r0, [r4, #4]
 8006994:	6863      	ldr	r3, [r4, #4]
 8006996:	6123      	str	r3, [r4, #16]
 8006998:	2300      	movs	r3, #0
 800699a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800699e:	e7a8      	b.n	80068f2 <_printf_i+0x152>
 80069a0:	462a      	mov	r2, r5
 80069a2:	4649      	mov	r1, r9
 80069a4:	4640      	mov	r0, r8
 80069a6:	6923      	ldr	r3, [r4, #16]
 80069a8:	47d0      	blx	sl
 80069aa:	3001      	adds	r0, #1
 80069ac:	d0ab      	beq.n	8006906 <_printf_i+0x166>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	079b      	lsls	r3, r3, #30
 80069b2:	d413      	bmi.n	80069dc <_printf_i+0x23c>
 80069b4:	68e0      	ldr	r0, [r4, #12]
 80069b6:	9b03      	ldr	r3, [sp, #12]
 80069b8:	4298      	cmp	r0, r3
 80069ba:	bfb8      	it	lt
 80069bc:	4618      	movlt	r0, r3
 80069be:	e7a4      	b.n	800690a <_printf_i+0x16a>
 80069c0:	2301      	movs	r3, #1
 80069c2:	4632      	mov	r2, r6
 80069c4:	4649      	mov	r1, r9
 80069c6:	4640      	mov	r0, r8
 80069c8:	47d0      	blx	sl
 80069ca:	3001      	adds	r0, #1
 80069cc:	d09b      	beq.n	8006906 <_printf_i+0x166>
 80069ce:	3501      	adds	r5, #1
 80069d0:	68e3      	ldr	r3, [r4, #12]
 80069d2:	9903      	ldr	r1, [sp, #12]
 80069d4:	1a5b      	subs	r3, r3, r1
 80069d6:	42ab      	cmp	r3, r5
 80069d8:	dcf2      	bgt.n	80069c0 <_printf_i+0x220>
 80069da:	e7eb      	b.n	80069b4 <_printf_i+0x214>
 80069dc:	2500      	movs	r5, #0
 80069de:	f104 0619 	add.w	r6, r4, #25
 80069e2:	e7f5      	b.n	80069d0 <_printf_i+0x230>
 80069e4:	08008f86 	.word	0x08008f86
 80069e8:	08008f97 	.word	0x08008f97

080069ec <sniprintf>:
 80069ec:	b40c      	push	{r2, r3}
 80069ee:	b530      	push	{r4, r5, lr}
 80069f0:	4b17      	ldr	r3, [pc, #92]	; (8006a50 <sniprintf+0x64>)
 80069f2:	1e0c      	subs	r4, r1, #0
 80069f4:	681d      	ldr	r5, [r3, #0]
 80069f6:	b09d      	sub	sp, #116	; 0x74
 80069f8:	da08      	bge.n	8006a0c <sniprintf+0x20>
 80069fa:	238b      	movs	r3, #139	; 0x8b
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	602b      	str	r3, [r5, #0]
 8006a02:	b01d      	add	sp, #116	; 0x74
 8006a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a08:	b002      	add	sp, #8
 8006a0a:	4770      	bx	lr
 8006a0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006a10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a14:	bf0c      	ite	eq
 8006a16:	4623      	moveq	r3, r4
 8006a18:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a1c:	9304      	str	r3, [sp, #16]
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a24:	9002      	str	r0, [sp, #8]
 8006a26:	9006      	str	r0, [sp, #24]
 8006a28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	ab21      	add	r3, sp, #132	; 0x84
 8006a30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a32:	a902      	add	r1, sp, #8
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	f001 fb71 	bl	800811c <_svfiprintf_r>
 8006a3a:	1c43      	adds	r3, r0, #1
 8006a3c:	bfbc      	itt	lt
 8006a3e:	238b      	movlt	r3, #139	; 0x8b
 8006a40:	602b      	strlt	r3, [r5, #0]
 8006a42:	2c00      	cmp	r4, #0
 8006a44:	d0dd      	beq.n	8006a02 <sniprintf+0x16>
 8006a46:	2200      	movs	r2, #0
 8006a48:	9b02      	ldr	r3, [sp, #8]
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	e7d9      	b.n	8006a02 <sniprintf+0x16>
 8006a4e:	bf00      	nop
 8006a50:	20000044 	.word	0x20000044

08006a54 <quorem>:
 8006a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	6903      	ldr	r3, [r0, #16]
 8006a5a:	690c      	ldr	r4, [r1, #16]
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	42a3      	cmp	r3, r4
 8006a60:	f2c0 8082 	blt.w	8006b68 <quorem+0x114>
 8006a64:	3c01      	subs	r4, #1
 8006a66:	f100 0514 	add.w	r5, r0, #20
 8006a6a:	f101 0814 	add.w	r8, r1, #20
 8006a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a8c:	d331      	bcc.n	8006af2 <quorem+0x9e>
 8006a8e:	f04f 0e00 	mov.w	lr, #0
 8006a92:	4640      	mov	r0, r8
 8006a94:	46ac      	mov	ip, r5
 8006a96:	46f2      	mov	sl, lr
 8006a98:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a9c:	b293      	uxth	r3, r2
 8006a9e:	fb06 e303 	mla	r3, r6, r3, lr
 8006aa2:	0c12      	lsrs	r2, r2, #16
 8006aa4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	fb06 e202 	mla	r2, r6, r2, lr
 8006aae:	ebaa 0303 	sub.w	r3, sl, r3
 8006ab2:	f8dc a000 	ldr.w	sl, [ip]
 8006ab6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006aba:	fa1f fa8a 	uxth.w	sl, sl
 8006abe:	4453      	add	r3, sl
 8006ac0:	f8dc a000 	ldr.w	sl, [ip]
 8006ac4:	b292      	uxth	r2, r2
 8006ac6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006aca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ad4:	4581      	cmp	r9, r0
 8006ad6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ada:	f84c 3b04 	str.w	r3, [ip], #4
 8006ade:	d2db      	bcs.n	8006a98 <quorem+0x44>
 8006ae0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ae4:	b92b      	cbnz	r3, 8006af2 <quorem+0x9e>
 8006ae6:	9b01      	ldr	r3, [sp, #4]
 8006ae8:	3b04      	subs	r3, #4
 8006aea:	429d      	cmp	r5, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	d32f      	bcc.n	8006b50 <quorem+0xfc>
 8006af0:	613c      	str	r4, [r7, #16]
 8006af2:	4638      	mov	r0, r7
 8006af4:	f001 f8c2 	bl	8007c7c <__mcmp>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	db25      	blt.n	8006b48 <quorem+0xf4>
 8006afc:	4628      	mov	r0, r5
 8006afe:	f04f 0c00 	mov.w	ip, #0
 8006b02:	3601      	adds	r6, #1
 8006b04:	f858 1b04 	ldr.w	r1, [r8], #4
 8006b08:	f8d0 e000 	ldr.w	lr, [r0]
 8006b0c:	b28b      	uxth	r3, r1
 8006b0e:	ebac 0303 	sub.w	r3, ip, r3
 8006b12:	fa1f f28e 	uxth.w	r2, lr
 8006b16:	4413      	add	r3, r2
 8006b18:	0c0a      	lsrs	r2, r1, #16
 8006b1a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b28:	45c1      	cmp	r9, r8
 8006b2a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b2e:	f840 3b04 	str.w	r3, [r0], #4
 8006b32:	d2e7      	bcs.n	8006b04 <quorem+0xb0>
 8006b34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b3c:	b922      	cbnz	r2, 8006b48 <quorem+0xf4>
 8006b3e:	3b04      	subs	r3, #4
 8006b40:	429d      	cmp	r5, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	d30a      	bcc.n	8006b5c <quorem+0x108>
 8006b46:	613c      	str	r4, [r7, #16]
 8006b48:	4630      	mov	r0, r6
 8006b4a:	b003      	add	sp, #12
 8006b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b50:	6812      	ldr	r2, [r2, #0]
 8006b52:	3b04      	subs	r3, #4
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	d1cb      	bne.n	8006af0 <quorem+0x9c>
 8006b58:	3c01      	subs	r4, #1
 8006b5a:	e7c6      	b.n	8006aea <quorem+0x96>
 8006b5c:	6812      	ldr	r2, [r2, #0]
 8006b5e:	3b04      	subs	r3, #4
 8006b60:	2a00      	cmp	r2, #0
 8006b62:	d1f0      	bne.n	8006b46 <quorem+0xf2>
 8006b64:	3c01      	subs	r4, #1
 8006b66:	e7eb      	b.n	8006b40 <quorem+0xec>
 8006b68:	2000      	movs	r0, #0
 8006b6a:	e7ee      	b.n	8006b4a <quorem+0xf6>
 8006b6c:	0000      	movs	r0, r0
	...

08006b70 <_dtoa_r>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	4616      	mov	r6, r2
 8006b76:	461f      	mov	r7, r3
 8006b78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006b7a:	b099      	sub	sp, #100	; 0x64
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006b86:	b974      	cbnz	r4, 8006ba6 <_dtoa_r+0x36>
 8006b88:	2010      	movs	r0, #16
 8006b8a:	f000 fde3 	bl	8007754 <malloc>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	6268      	str	r0, [r5, #36]	; 0x24
 8006b92:	b920      	cbnz	r0, 8006b9e <_dtoa_r+0x2e>
 8006b94:	21ea      	movs	r1, #234	; 0xea
 8006b96:	4ba8      	ldr	r3, [pc, #672]	; (8006e38 <_dtoa_r+0x2c8>)
 8006b98:	48a8      	ldr	r0, [pc, #672]	; (8006e3c <_dtoa_r+0x2cc>)
 8006b9a:	f001 fbcf 	bl	800833c <__assert_func>
 8006b9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ba2:	6004      	str	r4, [r0, #0]
 8006ba4:	60c4      	str	r4, [r0, #12]
 8006ba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ba8:	6819      	ldr	r1, [r3, #0]
 8006baa:	b151      	cbz	r1, 8006bc2 <_dtoa_r+0x52>
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4093      	lsls	r3, r2
 8006bb2:	604a      	str	r2, [r1, #4]
 8006bb4:	608b      	str	r3, [r1, #8]
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 fe22 	bl	8007800 <_Bfree>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	1e3b      	subs	r3, r7, #0
 8006bc4:	bfaf      	iteee	ge
 8006bc6:	2300      	movge	r3, #0
 8006bc8:	2201      	movlt	r2, #1
 8006bca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006bce:	9305      	strlt	r3, [sp, #20]
 8006bd0:	bfa8      	it	ge
 8006bd2:	f8c8 3000 	strge.w	r3, [r8]
 8006bd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006bda:	4b99      	ldr	r3, [pc, #612]	; (8006e40 <_dtoa_r+0x2d0>)
 8006bdc:	bfb8      	it	lt
 8006bde:	f8c8 2000 	strlt.w	r2, [r8]
 8006be2:	ea33 0309 	bics.w	r3, r3, r9
 8006be6:	d119      	bne.n	8006c1c <_dtoa_r+0xac>
 8006be8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bf4:	4333      	orrs	r3, r6
 8006bf6:	f000 857f 	beq.w	80076f8 <_dtoa_r+0xb88>
 8006bfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bfc:	b953      	cbnz	r3, 8006c14 <_dtoa_r+0xa4>
 8006bfe:	4b91      	ldr	r3, [pc, #580]	; (8006e44 <_dtoa_r+0x2d4>)
 8006c00:	e022      	b.n	8006c48 <_dtoa_r+0xd8>
 8006c02:	4b91      	ldr	r3, [pc, #580]	; (8006e48 <_dtoa_r+0x2d8>)
 8006c04:	9303      	str	r3, [sp, #12]
 8006c06:	3308      	adds	r3, #8
 8006c08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	9803      	ldr	r0, [sp, #12]
 8006c0e:	b019      	add	sp, #100	; 0x64
 8006c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c14:	4b8b      	ldr	r3, [pc, #556]	; (8006e44 <_dtoa_r+0x2d4>)
 8006c16:	9303      	str	r3, [sp, #12]
 8006c18:	3303      	adds	r3, #3
 8006c1a:	e7f5      	b.n	8006c08 <_dtoa_r+0x98>
 8006c1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006c24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f7f9 febc 	bl	80009a8 <__aeabi_dcmpeq>
 8006c30:	4680      	mov	r8, r0
 8006c32:	b158      	cbz	r0, 8006c4c <_dtoa_r+0xdc>
 8006c34:	2301      	movs	r3, #1
 8006c36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8558 	beq.w	80076f2 <_dtoa_r+0xb82>
 8006c42:	4882      	ldr	r0, [pc, #520]	; (8006e4c <_dtoa_r+0x2dc>)
 8006c44:	6018      	str	r0, [r3, #0]
 8006c46:	1e43      	subs	r3, r0, #1
 8006c48:	9303      	str	r3, [sp, #12]
 8006c4a:	e7df      	b.n	8006c0c <_dtoa_r+0x9c>
 8006c4c:	ab16      	add	r3, sp, #88	; 0x58
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	ab17      	add	r3, sp, #92	; 0x5c
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	4628      	mov	r0, r5
 8006c56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c5a:	f001 f8b7 	bl	8007dcc <__d2b>
 8006c5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c62:	4683      	mov	fp, r0
 8006c64:	2c00      	cmp	r4, #0
 8006c66:	d07f      	beq.n	8006d68 <_dtoa_r+0x1f8>
 8006c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006c7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006c7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006c82:	2200      	movs	r2, #0
 8006c84:	4b72      	ldr	r3, [pc, #456]	; (8006e50 <_dtoa_r+0x2e0>)
 8006c86:	f7f9 fa6f 	bl	8000168 <__aeabi_dsub>
 8006c8a:	a365      	add	r3, pc, #404	; (adr r3, 8006e20 <_dtoa_r+0x2b0>)
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f7f9 fc22 	bl	80004d8 <__aeabi_dmul>
 8006c94:	a364      	add	r3, pc, #400	; (adr r3, 8006e28 <_dtoa_r+0x2b8>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 fa67 	bl	800016c <__adddf3>
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	460f      	mov	r7, r1
 8006ca4:	f7f9 fbae 	bl	8000404 <__aeabi_i2d>
 8006ca8:	a361      	add	r3, pc, #388	; (adr r3, 8006e30 <_dtoa_r+0x2c0>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f7f9 fc13 	bl	80004d8 <__aeabi_dmul>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	4639      	mov	r1, r7
 8006cba:	f7f9 fa57 	bl	800016c <__adddf3>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	460f      	mov	r7, r1
 8006cc2:	f7f9 feb9 	bl	8000a38 <__aeabi_d2iz>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4682      	mov	sl, r0
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4630      	mov	r0, r6
 8006cce:	4639      	mov	r1, r7
 8006cd0:	f7f9 fe74 	bl	80009bc <__aeabi_dcmplt>
 8006cd4:	b148      	cbz	r0, 8006cea <_dtoa_r+0x17a>
 8006cd6:	4650      	mov	r0, sl
 8006cd8:	f7f9 fb94 	bl	8000404 <__aeabi_i2d>
 8006cdc:	4632      	mov	r2, r6
 8006cde:	463b      	mov	r3, r7
 8006ce0:	f7f9 fe62 	bl	80009a8 <__aeabi_dcmpeq>
 8006ce4:	b908      	cbnz	r0, 8006cea <_dtoa_r+0x17a>
 8006ce6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cea:	f1ba 0f16 	cmp.w	sl, #22
 8006cee:	d858      	bhi.n	8006da2 <_dtoa_r+0x232>
 8006cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cf4:	4b57      	ldr	r3, [pc, #348]	; (8006e54 <_dtoa_r+0x2e4>)
 8006cf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f7f9 fe5d 	bl	80009bc <__aeabi_dcmplt>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d04f      	beq.n	8006da6 <_dtoa_r+0x236>
 8006d06:	2300      	movs	r3, #0
 8006d08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d10:	1b1c      	subs	r4, r3, r4
 8006d12:	1e63      	subs	r3, r4, #1
 8006d14:	9309      	str	r3, [sp, #36]	; 0x24
 8006d16:	bf49      	itett	mi
 8006d18:	f1c4 0301 	rsbmi	r3, r4, #1
 8006d1c:	2300      	movpl	r3, #0
 8006d1e:	9306      	strmi	r3, [sp, #24]
 8006d20:	2300      	movmi	r3, #0
 8006d22:	bf54      	ite	pl
 8006d24:	9306      	strpl	r3, [sp, #24]
 8006d26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006d28:	f1ba 0f00 	cmp.w	sl, #0
 8006d2c:	db3d      	blt.n	8006daa <_dtoa_r+0x23a>
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006d34:	4453      	add	r3, sl
 8006d36:	9309      	str	r3, [sp, #36]	; 0x24
 8006d38:	2300      	movs	r3, #0
 8006d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d3e:	2b09      	cmp	r3, #9
 8006d40:	f200 808c 	bhi.w	8006e5c <_dtoa_r+0x2ec>
 8006d44:	2b05      	cmp	r3, #5
 8006d46:	bfc4      	itt	gt
 8006d48:	3b04      	subgt	r3, #4
 8006d4a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d4e:	bfc8      	it	gt
 8006d50:	2400      	movgt	r4, #0
 8006d52:	f1a3 0302 	sub.w	r3, r3, #2
 8006d56:	bfd8      	it	le
 8006d58:	2401      	movle	r4, #1
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	f200 808a 	bhi.w	8006e74 <_dtoa_r+0x304>
 8006d60:	e8df f003 	tbb	[pc, r3]
 8006d64:	5b4d4f2d 	.word	0x5b4d4f2d
 8006d68:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006d6c:	441c      	add	r4, r3
 8006d6e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	bfc3      	ittte	gt
 8006d76:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d7a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006d7e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006d82:	f1c3 0320 	rsble	r3, r3, #32
 8006d86:	bfc6      	itte	gt
 8006d88:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d8c:	4318      	orrgt	r0, r3
 8006d8e:	fa06 f003 	lslle.w	r0, r6, r3
 8006d92:	f7f9 fb27 	bl	80003e4 <__aeabi_ui2d>
 8006d96:	2301      	movs	r3, #1
 8006d98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006d9c:	3c01      	subs	r4, #1
 8006d9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006da0:	e76f      	b.n	8006c82 <_dtoa_r+0x112>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e7b2      	b.n	8006d0c <_dtoa_r+0x19c>
 8006da6:	900f      	str	r0, [sp, #60]	; 0x3c
 8006da8:	e7b1      	b.n	8006d0e <_dtoa_r+0x19e>
 8006daa:	9b06      	ldr	r3, [sp, #24]
 8006dac:	eba3 030a 	sub.w	r3, r3, sl
 8006db0:	9306      	str	r3, [sp, #24]
 8006db2:	f1ca 0300 	rsb	r3, sl, #0
 8006db6:	930a      	str	r3, [sp, #40]	; 0x28
 8006db8:	2300      	movs	r3, #0
 8006dba:	930e      	str	r3, [sp, #56]	; 0x38
 8006dbc:	e7be      	b.n	8006d3c <_dtoa_r+0x1cc>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dc58      	bgt.n	8006e7a <_dtoa_r+0x30a>
 8006dc8:	f04f 0901 	mov.w	r9, #1
 8006dcc:	464b      	mov	r3, r9
 8006dce:	f8cd 9020 	str.w	r9, [sp, #32]
 8006dd2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006dda:	6042      	str	r2, [r0, #4]
 8006ddc:	2204      	movs	r2, #4
 8006dde:	f102 0614 	add.w	r6, r2, #20
 8006de2:	429e      	cmp	r6, r3
 8006de4:	6841      	ldr	r1, [r0, #4]
 8006de6:	d94e      	bls.n	8006e86 <_dtoa_r+0x316>
 8006de8:	4628      	mov	r0, r5
 8006dea:	f000 fcc9 	bl	8007780 <_Balloc>
 8006dee:	9003      	str	r0, [sp, #12]
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d14c      	bne.n	8006e8e <_dtoa_r+0x31e>
 8006df4:	4602      	mov	r2, r0
 8006df6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006dfa:	4b17      	ldr	r3, [pc, #92]	; (8006e58 <_dtoa_r+0x2e8>)
 8006dfc:	e6cc      	b.n	8006b98 <_dtoa_r+0x28>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e7de      	b.n	8006dc0 <_dtoa_r+0x250>
 8006e02:	2300      	movs	r3, #0
 8006e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e08:	eb0a 0903 	add.w	r9, sl, r3
 8006e0c:	f109 0301 	add.w	r3, r9, #1
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	9308      	str	r3, [sp, #32]
 8006e14:	bfb8      	it	lt
 8006e16:	2301      	movlt	r3, #1
 8006e18:	e7dd      	b.n	8006dd6 <_dtoa_r+0x266>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e7f2      	b.n	8006e04 <_dtoa_r+0x294>
 8006e1e:	bf00      	nop
 8006e20:	636f4361 	.word	0x636f4361
 8006e24:	3fd287a7 	.word	0x3fd287a7
 8006e28:	8b60c8b3 	.word	0x8b60c8b3
 8006e2c:	3fc68a28 	.word	0x3fc68a28
 8006e30:	509f79fb 	.word	0x509f79fb
 8006e34:	3fd34413 	.word	0x3fd34413
 8006e38:	08008fb5 	.word	0x08008fb5
 8006e3c:	08008fcc 	.word	0x08008fcc
 8006e40:	7ff00000 	.word	0x7ff00000
 8006e44:	08008fb1 	.word	0x08008fb1
 8006e48:	08008fa8 	.word	0x08008fa8
 8006e4c:	08008f85 	.word	0x08008f85
 8006e50:	3ff80000 	.word	0x3ff80000
 8006e54:	080090c0 	.word	0x080090c0
 8006e58:	08009027 	.word	0x08009027
 8006e5c:	2401      	movs	r4, #1
 8006e5e:	2300      	movs	r3, #0
 8006e60:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e62:	9322      	str	r3, [sp, #136]	; 0x88
 8006e64:	f04f 39ff 	mov.w	r9, #4294967295
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2312      	movs	r3, #18
 8006e6c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e70:	9223      	str	r2, [sp, #140]	; 0x8c
 8006e72:	e7b0      	b.n	8006dd6 <_dtoa_r+0x266>
 8006e74:	2301      	movs	r3, #1
 8006e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e78:	e7f4      	b.n	8006e64 <_dtoa_r+0x2f4>
 8006e7a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006e7e:	464b      	mov	r3, r9
 8006e80:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e84:	e7a7      	b.n	8006dd6 <_dtoa_r+0x266>
 8006e86:	3101      	adds	r1, #1
 8006e88:	6041      	str	r1, [r0, #4]
 8006e8a:	0052      	lsls	r2, r2, #1
 8006e8c:	e7a7      	b.n	8006dde <_dtoa_r+0x26e>
 8006e8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e90:	9a03      	ldr	r2, [sp, #12]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	9b08      	ldr	r3, [sp, #32]
 8006e96:	2b0e      	cmp	r3, #14
 8006e98:	f200 80a8 	bhi.w	8006fec <_dtoa_r+0x47c>
 8006e9c:	2c00      	cmp	r4, #0
 8006e9e:	f000 80a5 	beq.w	8006fec <_dtoa_r+0x47c>
 8006ea2:	f1ba 0f00 	cmp.w	sl, #0
 8006ea6:	dd34      	ble.n	8006f12 <_dtoa_r+0x3a2>
 8006ea8:	4a9a      	ldr	r2, [pc, #616]	; (8007114 <_dtoa_r+0x5a4>)
 8006eaa:	f00a 030f 	and.w	r3, sl, #15
 8006eae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006eb2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006eb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006eba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ebe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006ec2:	d016      	beq.n	8006ef2 <_dtoa_r+0x382>
 8006ec4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ec8:	4b93      	ldr	r3, [pc, #588]	; (8007118 <_dtoa_r+0x5a8>)
 8006eca:	2703      	movs	r7, #3
 8006ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ed0:	f7f9 fc2c 	bl	800072c <__aeabi_ddiv>
 8006ed4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ed8:	f004 040f 	and.w	r4, r4, #15
 8006edc:	4e8e      	ldr	r6, [pc, #568]	; (8007118 <_dtoa_r+0x5a8>)
 8006ede:	b954      	cbnz	r4, 8006ef6 <_dtoa_r+0x386>
 8006ee0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ee8:	f7f9 fc20 	bl	800072c <__aeabi_ddiv>
 8006eec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ef0:	e029      	b.n	8006f46 <_dtoa_r+0x3d6>
 8006ef2:	2702      	movs	r7, #2
 8006ef4:	e7f2      	b.n	8006edc <_dtoa_r+0x36c>
 8006ef6:	07e1      	lsls	r1, r4, #31
 8006ef8:	d508      	bpl.n	8006f0c <_dtoa_r+0x39c>
 8006efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006efe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f02:	f7f9 fae9 	bl	80004d8 <__aeabi_dmul>
 8006f06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f0a:	3701      	adds	r7, #1
 8006f0c:	1064      	asrs	r4, r4, #1
 8006f0e:	3608      	adds	r6, #8
 8006f10:	e7e5      	b.n	8006ede <_dtoa_r+0x36e>
 8006f12:	f000 80a5 	beq.w	8007060 <_dtoa_r+0x4f0>
 8006f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f1a:	f1ca 0400 	rsb	r4, sl, #0
 8006f1e:	4b7d      	ldr	r3, [pc, #500]	; (8007114 <_dtoa_r+0x5a4>)
 8006f20:	f004 020f 	and.w	r2, r4, #15
 8006f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f7f9 fad4 	bl	80004d8 <__aeabi_dmul>
 8006f30:	2702      	movs	r7, #2
 8006f32:	2300      	movs	r3, #0
 8006f34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f38:	4e77      	ldr	r6, [pc, #476]	; (8007118 <_dtoa_r+0x5a8>)
 8006f3a:	1124      	asrs	r4, r4, #4
 8006f3c:	2c00      	cmp	r4, #0
 8006f3e:	f040 8084 	bne.w	800704a <_dtoa_r+0x4da>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1d2      	bne.n	8006eec <_dtoa_r+0x37c>
 8006f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 808b 	beq.w	8007064 <_dtoa_r+0x4f4>
 8006f4e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4b6f      	ldr	r3, [pc, #444]	; (800711c <_dtoa_r+0x5ac>)
 8006f5e:	f7f9 fd2d 	bl	80009bc <__aeabi_dcmplt>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d07e      	beq.n	8007064 <_dtoa_r+0x4f4>
 8006f66:	9b08      	ldr	r3, [sp, #32]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d07b      	beq.n	8007064 <_dtoa_r+0x4f4>
 8006f6c:	f1b9 0f00 	cmp.w	r9, #0
 8006f70:	dd38      	ble.n	8006fe4 <_dtoa_r+0x474>
 8006f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f76:	2200      	movs	r2, #0
 8006f78:	4b69      	ldr	r3, [pc, #420]	; (8007120 <_dtoa_r+0x5b0>)
 8006f7a:	f7f9 faad 	bl	80004d8 <__aeabi_dmul>
 8006f7e:	464c      	mov	r4, r9
 8006f80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f84:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006f88:	3701      	adds	r7, #1
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	f7f9 fa3a 	bl	8000404 <__aeabi_i2d>
 8006f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f94:	f7f9 faa0 	bl	80004d8 <__aeabi_dmul>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4b62      	ldr	r3, [pc, #392]	; (8007124 <_dtoa_r+0x5b4>)
 8006f9c:	f7f9 f8e6 	bl	800016c <__adddf3>
 8006fa0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006fa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fa8:	9611      	str	r6, [sp, #68]	; 0x44
 8006faa:	2c00      	cmp	r4, #0
 8006fac:	d15d      	bne.n	800706a <_dtoa_r+0x4fa>
 8006fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4b5c      	ldr	r3, [pc, #368]	; (8007128 <_dtoa_r+0x5b8>)
 8006fb6:	f7f9 f8d7 	bl	8000168 <__aeabi_dsub>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fc2:	4633      	mov	r3, r6
 8006fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fc6:	f7f9 fd17 	bl	80009f8 <__aeabi_dcmpgt>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	f040 829c 	bne.w	8007508 <_dtoa_r+0x998>
 8006fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fd6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006fda:	f7f9 fcef 	bl	80009bc <__aeabi_dcmplt>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f040 8290 	bne.w	8007504 <_dtoa_r+0x994>
 8006fe4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006fe8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006fec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f2c0 8152 	blt.w	8007298 <_dtoa_r+0x728>
 8006ff4:	f1ba 0f0e 	cmp.w	sl, #14
 8006ff8:	f300 814e 	bgt.w	8007298 <_dtoa_r+0x728>
 8006ffc:	4b45      	ldr	r3, [pc, #276]	; (8007114 <_dtoa_r+0x5a4>)
 8006ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007002:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007006:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800700a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800700c:	2b00      	cmp	r3, #0
 800700e:	f280 80db 	bge.w	80071c8 <_dtoa_r+0x658>
 8007012:	9b08      	ldr	r3, [sp, #32]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f300 80d7 	bgt.w	80071c8 <_dtoa_r+0x658>
 800701a:	f040 8272 	bne.w	8007502 <_dtoa_r+0x992>
 800701e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007022:	2200      	movs	r2, #0
 8007024:	4b40      	ldr	r3, [pc, #256]	; (8007128 <_dtoa_r+0x5b8>)
 8007026:	f7f9 fa57 	bl	80004d8 <__aeabi_dmul>
 800702a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800702e:	f7f9 fcd9 	bl	80009e4 <__aeabi_dcmpge>
 8007032:	9c08      	ldr	r4, [sp, #32]
 8007034:	4626      	mov	r6, r4
 8007036:	2800      	cmp	r0, #0
 8007038:	f040 8248 	bne.w	80074cc <_dtoa_r+0x95c>
 800703c:	2331      	movs	r3, #49	; 0x31
 800703e:	9f03      	ldr	r7, [sp, #12]
 8007040:	f10a 0a01 	add.w	sl, sl, #1
 8007044:	f807 3b01 	strb.w	r3, [r7], #1
 8007048:	e244      	b.n	80074d4 <_dtoa_r+0x964>
 800704a:	07e2      	lsls	r2, r4, #31
 800704c:	d505      	bpl.n	800705a <_dtoa_r+0x4ea>
 800704e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007052:	f7f9 fa41 	bl	80004d8 <__aeabi_dmul>
 8007056:	2301      	movs	r3, #1
 8007058:	3701      	adds	r7, #1
 800705a:	1064      	asrs	r4, r4, #1
 800705c:	3608      	adds	r6, #8
 800705e:	e76d      	b.n	8006f3c <_dtoa_r+0x3cc>
 8007060:	2702      	movs	r7, #2
 8007062:	e770      	b.n	8006f46 <_dtoa_r+0x3d6>
 8007064:	46d0      	mov	r8, sl
 8007066:	9c08      	ldr	r4, [sp, #32]
 8007068:	e78f      	b.n	8006f8a <_dtoa_r+0x41a>
 800706a:	9903      	ldr	r1, [sp, #12]
 800706c:	4b29      	ldr	r3, [pc, #164]	; (8007114 <_dtoa_r+0x5a4>)
 800706e:	4421      	add	r1, r4
 8007070:	9112      	str	r1, [sp, #72]	; 0x48
 8007072:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007074:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007078:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800707c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007080:	2900      	cmp	r1, #0
 8007082:	d055      	beq.n	8007130 <_dtoa_r+0x5c0>
 8007084:	2000      	movs	r0, #0
 8007086:	4929      	ldr	r1, [pc, #164]	; (800712c <_dtoa_r+0x5bc>)
 8007088:	f7f9 fb50 	bl	800072c <__aeabi_ddiv>
 800708c:	463b      	mov	r3, r7
 800708e:	4632      	mov	r2, r6
 8007090:	f7f9 f86a 	bl	8000168 <__aeabi_dsub>
 8007094:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007098:	9f03      	ldr	r7, [sp, #12]
 800709a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800709e:	f7f9 fccb 	bl	8000a38 <__aeabi_d2iz>
 80070a2:	4604      	mov	r4, r0
 80070a4:	f7f9 f9ae 	bl	8000404 <__aeabi_i2d>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070b0:	f7f9 f85a 	bl	8000168 <__aeabi_dsub>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	3430      	adds	r4, #48	; 0x30
 80070ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070c2:	f807 4b01 	strb.w	r4, [r7], #1
 80070c6:	f7f9 fc79 	bl	80009bc <__aeabi_dcmplt>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	d174      	bne.n	80071b8 <_dtoa_r+0x648>
 80070ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070d2:	2000      	movs	r0, #0
 80070d4:	4911      	ldr	r1, [pc, #68]	; (800711c <_dtoa_r+0x5ac>)
 80070d6:	f7f9 f847 	bl	8000168 <__aeabi_dsub>
 80070da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070de:	f7f9 fc6d 	bl	80009bc <__aeabi_dcmplt>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	f040 80b7 	bne.w	8007256 <_dtoa_r+0x6e6>
 80070e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070ea:	429f      	cmp	r7, r3
 80070ec:	f43f af7a 	beq.w	8006fe4 <_dtoa_r+0x474>
 80070f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070f4:	2200      	movs	r2, #0
 80070f6:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <_dtoa_r+0x5b0>)
 80070f8:	f7f9 f9ee 	bl	80004d8 <__aeabi_dmul>
 80070fc:	2200      	movs	r2, #0
 80070fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007106:	4b06      	ldr	r3, [pc, #24]	; (8007120 <_dtoa_r+0x5b0>)
 8007108:	f7f9 f9e6 	bl	80004d8 <__aeabi_dmul>
 800710c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007110:	e7c3      	b.n	800709a <_dtoa_r+0x52a>
 8007112:	bf00      	nop
 8007114:	080090c0 	.word	0x080090c0
 8007118:	08009098 	.word	0x08009098
 800711c:	3ff00000 	.word	0x3ff00000
 8007120:	40240000 	.word	0x40240000
 8007124:	401c0000 	.word	0x401c0000
 8007128:	40140000 	.word	0x40140000
 800712c:	3fe00000 	.word	0x3fe00000
 8007130:	4630      	mov	r0, r6
 8007132:	4639      	mov	r1, r7
 8007134:	f7f9 f9d0 	bl	80004d8 <__aeabi_dmul>
 8007138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800713a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800713e:	9c03      	ldr	r4, [sp, #12]
 8007140:	9314      	str	r3, [sp, #80]	; 0x50
 8007142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007146:	f7f9 fc77 	bl	8000a38 <__aeabi_d2iz>
 800714a:	9015      	str	r0, [sp, #84]	; 0x54
 800714c:	f7f9 f95a 	bl	8000404 <__aeabi_i2d>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007158:	f7f9 f806 	bl	8000168 <__aeabi_dsub>
 800715c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800715e:	4606      	mov	r6, r0
 8007160:	3330      	adds	r3, #48	; 0x30
 8007162:	f804 3b01 	strb.w	r3, [r4], #1
 8007166:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007168:	460f      	mov	r7, r1
 800716a:	429c      	cmp	r4, r3
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	d124      	bne.n	80071bc <_dtoa_r+0x64c>
 8007172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007176:	4bb0      	ldr	r3, [pc, #704]	; (8007438 <_dtoa_r+0x8c8>)
 8007178:	f7f8 fff8 	bl	800016c <__adddf3>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4630      	mov	r0, r6
 8007182:	4639      	mov	r1, r7
 8007184:	f7f9 fc38 	bl	80009f8 <__aeabi_dcmpgt>
 8007188:	2800      	cmp	r0, #0
 800718a:	d163      	bne.n	8007254 <_dtoa_r+0x6e4>
 800718c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007190:	2000      	movs	r0, #0
 8007192:	49a9      	ldr	r1, [pc, #676]	; (8007438 <_dtoa_r+0x8c8>)
 8007194:	f7f8 ffe8 	bl	8000168 <__aeabi_dsub>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4630      	mov	r0, r6
 800719e:	4639      	mov	r1, r7
 80071a0:	f7f9 fc0c 	bl	80009bc <__aeabi_dcmplt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f43f af1d 	beq.w	8006fe4 <_dtoa_r+0x474>
 80071aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80071ac:	1e7b      	subs	r3, r7, #1
 80071ae:	9314      	str	r3, [sp, #80]	; 0x50
 80071b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80071b4:	2b30      	cmp	r3, #48	; 0x30
 80071b6:	d0f8      	beq.n	80071aa <_dtoa_r+0x63a>
 80071b8:	46c2      	mov	sl, r8
 80071ba:	e03b      	b.n	8007234 <_dtoa_r+0x6c4>
 80071bc:	4b9f      	ldr	r3, [pc, #636]	; (800743c <_dtoa_r+0x8cc>)
 80071be:	f7f9 f98b 	bl	80004d8 <__aeabi_dmul>
 80071c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071c6:	e7bc      	b.n	8007142 <_dtoa_r+0x5d2>
 80071c8:	9f03      	ldr	r7, [sp, #12]
 80071ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80071ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071d2:	4640      	mov	r0, r8
 80071d4:	4649      	mov	r1, r9
 80071d6:	f7f9 faa9 	bl	800072c <__aeabi_ddiv>
 80071da:	f7f9 fc2d 	bl	8000a38 <__aeabi_d2iz>
 80071de:	4604      	mov	r4, r0
 80071e0:	f7f9 f910 	bl	8000404 <__aeabi_i2d>
 80071e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071e8:	f7f9 f976 	bl	80004d8 <__aeabi_dmul>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4640      	mov	r0, r8
 80071f2:	4649      	mov	r1, r9
 80071f4:	f7f8 ffb8 	bl	8000168 <__aeabi_dsub>
 80071f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80071fc:	f807 6b01 	strb.w	r6, [r7], #1
 8007200:	9e03      	ldr	r6, [sp, #12]
 8007202:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007206:	1bbe      	subs	r6, r7, r6
 8007208:	45b4      	cmp	ip, r6
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	d136      	bne.n	800727e <_dtoa_r+0x70e>
 8007210:	f7f8 ffac 	bl	800016c <__adddf3>
 8007214:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007218:	4680      	mov	r8, r0
 800721a:	4689      	mov	r9, r1
 800721c:	f7f9 fbec 	bl	80009f8 <__aeabi_dcmpgt>
 8007220:	bb58      	cbnz	r0, 800727a <_dtoa_r+0x70a>
 8007222:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007226:	4640      	mov	r0, r8
 8007228:	4649      	mov	r1, r9
 800722a:	f7f9 fbbd 	bl	80009a8 <__aeabi_dcmpeq>
 800722e:	b108      	cbz	r0, 8007234 <_dtoa_r+0x6c4>
 8007230:	07e1      	lsls	r1, r4, #31
 8007232:	d422      	bmi.n	800727a <_dtoa_r+0x70a>
 8007234:	4628      	mov	r0, r5
 8007236:	4659      	mov	r1, fp
 8007238:	f000 fae2 	bl	8007800 <_Bfree>
 800723c:	2300      	movs	r3, #0
 800723e:	703b      	strb	r3, [r7, #0]
 8007240:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007242:	f10a 0001 	add.w	r0, sl, #1
 8007246:	6018      	str	r0, [r3, #0]
 8007248:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800724a:	2b00      	cmp	r3, #0
 800724c:	f43f acde 	beq.w	8006c0c <_dtoa_r+0x9c>
 8007250:	601f      	str	r7, [r3, #0]
 8007252:	e4db      	b.n	8006c0c <_dtoa_r+0x9c>
 8007254:	4627      	mov	r7, r4
 8007256:	463b      	mov	r3, r7
 8007258:	461f      	mov	r7, r3
 800725a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800725e:	2a39      	cmp	r2, #57	; 0x39
 8007260:	d107      	bne.n	8007272 <_dtoa_r+0x702>
 8007262:	9a03      	ldr	r2, [sp, #12]
 8007264:	429a      	cmp	r2, r3
 8007266:	d1f7      	bne.n	8007258 <_dtoa_r+0x6e8>
 8007268:	2230      	movs	r2, #48	; 0x30
 800726a:	9903      	ldr	r1, [sp, #12]
 800726c:	f108 0801 	add.w	r8, r8, #1
 8007270:	700a      	strb	r2, [r1, #0]
 8007272:	781a      	ldrb	r2, [r3, #0]
 8007274:	3201      	adds	r2, #1
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	e79e      	b.n	80071b8 <_dtoa_r+0x648>
 800727a:	46d0      	mov	r8, sl
 800727c:	e7eb      	b.n	8007256 <_dtoa_r+0x6e6>
 800727e:	2200      	movs	r2, #0
 8007280:	4b6e      	ldr	r3, [pc, #440]	; (800743c <_dtoa_r+0x8cc>)
 8007282:	f7f9 f929 	bl	80004d8 <__aeabi_dmul>
 8007286:	2200      	movs	r2, #0
 8007288:	2300      	movs	r3, #0
 800728a:	4680      	mov	r8, r0
 800728c:	4689      	mov	r9, r1
 800728e:	f7f9 fb8b 	bl	80009a8 <__aeabi_dcmpeq>
 8007292:	2800      	cmp	r0, #0
 8007294:	d09b      	beq.n	80071ce <_dtoa_r+0x65e>
 8007296:	e7cd      	b.n	8007234 <_dtoa_r+0x6c4>
 8007298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800729a:	2a00      	cmp	r2, #0
 800729c:	f000 80d0 	beq.w	8007440 <_dtoa_r+0x8d0>
 80072a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80072a2:	2a01      	cmp	r2, #1
 80072a4:	f300 80ae 	bgt.w	8007404 <_dtoa_r+0x894>
 80072a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072aa:	2a00      	cmp	r2, #0
 80072ac:	f000 80a6 	beq.w	80073fc <_dtoa_r+0x88c>
 80072b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072b6:	9f06      	ldr	r7, [sp, #24]
 80072b8:	9a06      	ldr	r2, [sp, #24]
 80072ba:	2101      	movs	r1, #1
 80072bc:	441a      	add	r2, r3
 80072be:	9206      	str	r2, [sp, #24]
 80072c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072c2:	4628      	mov	r0, r5
 80072c4:	441a      	add	r2, r3
 80072c6:	9209      	str	r2, [sp, #36]	; 0x24
 80072c8:	f000 fb50 	bl	800796c <__i2b>
 80072cc:	4606      	mov	r6, r0
 80072ce:	2f00      	cmp	r7, #0
 80072d0:	dd0c      	ble.n	80072ec <_dtoa_r+0x77c>
 80072d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dd09      	ble.n	80072ec <_dtoa_r+0x77c>
 80072d8:	42bb      	cmp	r3, r7
 80072da:	bfa8      	it	ge
 80072dc:	463b      	movge	r3, r7
 80072de:	9a06      	ldr	r2, [sp, #24]
 80072e0:	1aff      	subs	r7, r7, r3
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	9206      	str	r2, [sp, #24]
 80072e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	9309      	str	r3, [sp, #36]	; 0x24
 80072ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ee:	b1f3      	cbz	r3, 800732e <_dtoa_r+0x7be>
 80072f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80a8 	beq.w	8007448 <_dtoa_r+0x8d8>
 80072f8:	2c00      	cmp	r4, #0
 80072fa:	dd10      	ble.n	800731e <_dtoa_r+0x7ae>
 80072fc:	4631      	mov	r1, r6
 80072fe:	4622      	mov	r2, r4
 8007300:	4628      	mov	r0, r5
 8007302:	f000 fbf1 	bl	8007ae8 <__pow5mult>
 8007306:	465a      	mov	r2, fp
 8007308:	4601      	mov	r1, r0
 800730a:	4606      	mov	r6, r0
 800730c:	4628      	mov	r0, r5
 800730e:	f000 fb43 	bl	8007998 <__multiply>
 8007312:	4680      	mov	r8, r0
 8007314:	4659      	mov	r1, fp
 8007316:	4628      	mov	r0, r5
 8007318:	f000 fa72 	bl	8007800 <_Bfree>
 800731c:	46c3      	mov	fp, r8
 800731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007320:	1b1a      	subs	r2, r3, r4
 8007322:	d004      	beq.n	800732e <_dtoa_r+0x7be>
 8007324:	4659      	mov	r1, fp
 8007326:	4628      	mov	r0, r5
 8007328:	f000 fbde 	bl	8007ae8 <__pow5mult>
 800732c:	4683      	mov	fp, r0
 800732e:	2101      	movs	r1, #1
 8007330:	4628      	mov	r0, r5
 8007332:	f000 fb1b 	bl	800796c <__i2b>
 8007336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007338:	4604      	mov	r4, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	f340 8086 	ble.w	800744c <_dtoa_r+0x8dc>
 8007340:	461a      	mov	r2, r3
 8007342:	4601      	mov	r1, r0
 8007344:	4628      	mov	r0, r5
 8007346:	f000 fbcf 	bl	8007ae8 <__pow5mult>
 800734a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800734c:	4604      	mov	r4, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	dd7f      	ble.n	8007452 <_dtoa_r+0x8e2>
 8007352:	f04f 0800 	mov.w	r8, #0
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800735c:	6918      	ldr	r0, [r3, #16]
 800735e:	f000 fab7 	bl	80078d0 <__hi0bits>
 8007362:	f1c0 0020 	rsb	r0, r0, #32
 8007366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007368:	4418      	add	r0, r3
 800736a:	f010 001f 	ands.w	r0, r0, #31
 800736e:	f000 8092 	beq.w	8007496 <_dtoa_r+0x926>
 8007372:	f1c0 0320 	rsb	r3, r0, #32
 8007376:	2b04      	cmp	r3, #4
 8007378:	f340 808a 	ble.w	8007490 <_dtoa_r+0x920>
 800737c:	f1c0 001c 	rsb	r0, r0, #28
 8007380:	9b06      	ldr	r3, [sp, #24]
 8007382:	4407      	add	r7, r0
 8007384:	4403      	add	r3, r0
 8007386:	9306      	str	r3, [sp, #24]
 8007388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738a:	4403      	add	r3, r0
 800738c:	9309      	str	r3, [sp, #36]	; 0x24
 800738e:	9b06      	ldr	r3, [sp, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	dd05      	ble.n	80073a0 <_dtoa_r+0x830>
 8007394:	4659      	mov	r1, fp
 8007396:	461a      	mov	r2, r3
 8007398:	4628      	mov	r0, r5
 800739a:	f000 fbff 	bl	8007b9c <__lshift>
 800739e:	4683      	mov	fp, r0
 80073a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	dd05      	ble.n	80073b2 <_dtoa_r+0x842>
 80073a6:	4621      	mov	r1, r4
 80073a8:	461a      	mov	r2, r3
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 fbf6 	bl	8007b9c <__lshift>
 80073b0:	4604      	mov	r4, r0
 80073b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d070      	beq.n	800749a <_dtoa_r+0x92a>
 80073b8:	4621      	mov	r1, r4
 80073ba:	4658      	mov	r0, fp
 80073bc:	f000 fc5e 	bl	8007c7c <__mcmp>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	da6a      	bge.n	800749a <_dtoa_r+0x92a>
 80073c4:	2300      	movs	r3, #0
 80073c6:	4659      	mov	r1, fp
 80073c8:	220a      	movs	r2, #10
 80073ca:	4628      	mov	r0, r5
 80073cc:	f000 fa3a 	bl	8007844 <__multadd>
 80073d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d2:	4683      	mov	fp, r0
 80073d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8194 	beq.w	8007706 <_dtoa_r+0xb96>
 80073de:	4631      	mov	r1, r6
 80073e0:	2300      	movs	r3, #0
 80073e2:	220a      	movs	r2, #10
 80073e4:	4628      	mov	r0, r5
 80073e6:	f000 fa2d 	bl	8007844 <__multadd>
 80073ea:	f1b9 0f00 	cmp.w	r9, #0
 80073ee:	4606      	mov	r6, r0
 80073f0:	f300 8093 	bgt.w	800751a <_dtoa_r+0x9aa>
 80073f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	dc57      	bgt.n	80074aa <_dtoa_r+0x93a>
 80073fa:	e08e      	b.n	800751a <_dtoa_r+0x9aa>
 80073fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007402:	e757      	b.n	80072b4 <_dtoa_r+0x744>
 8007404:	9b08      	ldr	r3, [sp, #32]
 8007406:	1e5c      	subs	r4, r3, #1
 8007408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800740a:	42a3      	cmp	r3, r4
 800740c:	bfb7      	itett	lt
 800740e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007410:	1b1c      	subge	r4, r3, r4
 8007412:	1ae2      	sublt	r2, r4, r3
 8007414:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007416:	bfbe      	ittt	lt
 8007418:	940a      	strlt	r4, [sp, #40]	; 0x28
 800741a:	189b      	addlt	r3, r3, r2
 800741c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800741e:	9b08      	ldr	r3, [sp, #32]
 8007420:	bfb8      	it	lt
 8007422:	2400      	movlt	r4, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	bfbb      	ittet	lt
 8007428:	9b06      	ldrlt	r3, [sp, #24]
 800742a:	9a08      	ldrlt	r2, [sp, #32]
 800742c:	9f06      	ldrge	r7, [sp, #24]
 800742e:	1a9f      	sublt	r7, r3, r2
 8007430:	bfac      	ite	ge
 8007432:	9b08      	ldrge	r3, [sp, #32]
 8007434:	2300      	movlt	r3, #0
 8007436:	e73f      	b.n	80072b8 <_dtoa_r+0x748>
 8007438:	3fe00000 	.word	0x3fe00000
 800743c:	40240000 	.word	0x40240000
 8007440:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007442:	9f06      	ldr	r7, [sp, #24]
 8007444:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007446:	e742      	b.n	80072ce <_dtoa_r+0x75e>
 8007448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800744a:	e76b      	b.n	8007324 <_dtoa_r+0x7b4>
 800744c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800744e:	2b01      	cmp	r3, #1
 8007450:	dc19      	bgt.n	8007486 <_dtoa_r+0x916>
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	b9bb      	cbnz	r3, 8007486 <_dtoa_r+0x916>
 8007456:	9b05      	ldr	r3, [sp, #20]
 8007458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800745c:	b99b      	cbnz	r3, 8007486 <_dtoa_r+0x916>
 800745e:	9b05      	ldr	r3, [sp, #20]
 8007460:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007464:	0d1b      	lsrs	r3, r3, #20
 8007466:	051b      	lsls	r3, r3, #20
 8007468:	b183      	cbz	r3, 800748c <_dtoa_r+0x91c>
 800746a:	f04f 0801 	mov.w	r8, #1
 800746e:	9b06      	ldr	r3, [sp, #24]
 8007470:	3301      	adds	r3, #1
 8007472:	9306      	str	r3, [sp, #24]
 8007474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007476:	3301      	adds	r3, #1
 8007478:	9309      	str	r3, [sp, #36]	; 0x24
 800747a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800747c:	2b00      	cmp	r3, #0
 800747e:	f47f af6a 	bne.w	8007356 <_dtoa_r+0x7e6>
 8007482:	2001      	movs	r0, #1
 8007484:	e76f      	b.n	8007366 <_dtoa_r+0x7f6>
 8007486:	f04f 0800 	mov.w	r8, #0
 800748a:	e7f6      	b.n	800747a <_dtoa_r+0x90a>
 800748c:	4698      	mov	r8, r3
 800748e:	e7f4      	b.n	800747a <_dtoa_r+0x90a>
 8007490:	f43f af7d 	beq.w	800738e <_dtoa_r+0x81e>
 8007494:	4618      	mov	r0, r3
 8007496:	301c      	adds	r0, #28
 8007498:	e772      	b.n	8007380 <_dtoa_r+0x810>
 800749a:	9b08      	ldr	r3, [sp, #32]
 800749c:	2b00      	cmp	r3, #0
 800749e:	dc36      	bgt.n	800750e <_dtoa_r+0x99e>
 80074a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	dd33      	ble.n	800750e <_dtoa_r+0x99e>
 80074a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074aa:	f1b9 0f00 	cmp.w	r9, #0
 80074ae:	d10d      	bne.n	80074cc <_dtoa_r+0x95c>
 80074b0:	4621      	mov	r1, r4
 80074b2:	464b      	mov	r3, r9
 80074b4:	2205      	movs	r2, #5
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 f9c4 	bl	8007844 <__multadd>
 80074bc:	4601      	mov	r1, r0
 80074be:	4604      	mov	r4, r0
 80074c0:	4658      	mov	r0, fp
 80074c2:	f000 fbdb 	bl	8007c7c <__mcmp>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f73f adb8 	bgt.w	800703c <_dtoa_r+0x4cc>
 80074cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074ce:	9f03      	ldr	r7, [sp, #12]
 80074d0:	ea6f 0a03 	mvn.w	sl, r3
 80074d4:	f04f 0800 	mov.w	r8, #0
 80074d8:	4621      	mov	r1, r4
 80074da:	4628      	mov	r0, r5
 80074dc:	f000 f990 	bl	8007800 <_Bfree>
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	f43f aea7 	beq.w	8007234 <_dtoa_r+0x6c4>
 80074e6:	f1b8 0f00 	cmp.w	r8, #0
 80074ea:	d005      	beq.n	80074f8 <_dtoa_r+0x988>
 80074ec:	45b0      	cmp	r8, r6
 80074ee:	d003      	beq.n	80074f8 <_dtoa_r+0x988>
 80074f0:	4641      	mov	r1, r8
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 f984 	bl	8007800 <_Bfree>
 80074f8:	4631      	mov	r1, r6
 80074fa:	4628      	mov	r0, r5
 80074fc:	f000 f980 	bl	8007800 <_Bfree>
 8007500:	e698      	b.n	8007234 <_dtoa_r+0x6c4>
 8007502:	2400      	movs	r4, #0
 8007504:	4626      	mov	r6, r4
 8007506:	e7e1      	b.n	80074cc <_dtoa_r+0x95c>
 8007508:	46c2      	mov	sl, r8
 800750a:	4626      	mov	r6, r4
 800750c:	e596      	b.n	800703c <_dtoa_r+0x4cc>
 800750e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80fd 	beq.w	8007714 <_dtoa_r+0xba4>
 800751a:	2f00      	cmp	r7, #0
 800751c:	dd05      	ble.n	800752a <_dtoa_r+0x9ba>
 800751e:	4631      	mov	r1, r6
 8007520:	463a      	mov	r2, r7
 8007522:	4628      	mov	r0, r5
 8007524:	f000 fb3a 	bl	8007b9c <__lshift>
 8007528:	4606      	mov	r6, r0
 800752a:	f1b8 0f00 	cmp.w	r8, #0
 800752e:	d05c      	beq.n	80075ea <_dtoa_r+0xa7a>
 8007530:	4628      	mov	r0, r5
 8007532:	6871      	ldr	r1, [r6, #4]
 8007534:	f000 f924 	bl	8007780 <_Balloc>
 8007538:	4607      	mov	r7, r0
 800753a:	b928      	cbnz	r0, 8007548 <_dtoa_r+0x9d8>
 800753c:	4602      	mov	r2, r0
 800753e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007542:	4b7f      	ldr	r3, [pc, #508]	; (8007740 <_dtoa_r+0xbd0>)
 8007544:	f7ff bb28 	b.w	8006b98 <_dtoa_r+0x28>
 8007548:	6932      	ldr	r2, [r6, #16]
 800754a:	f106 010c 	add.w	r1, r6, #12
 800754e:	3202      	adds	r2, #2
 8007550:	0092      	lsls	r2, r2, #2
 8007552:	300c      	adds	r0, #12
 8007554:	f7fe fdd4 	bl	8006100 <memcpy>
 8007558:	2201      	movs	r2, #1
 800755a:	4639      	mov	r1, r7
 800755c:	4628      	mov	r0, r5
 800755e:	f000 fb1d 	bl	8007b9c <__lshift>
 8007562:	46b0      	mov	r8, r6
 8007564:	4606      	mov	r6, r0
 8007566:	9b03      	ldr	r3, [sp, #12]
 8007568:	3301      	adds	r3, #1
 800756a:	9308      	str	r3, [sp, #32]
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	444b      	add	r3, r9
 8007570:	930a      	str	r3, [sp, #40]	; 0x28
 8007572:	9b04      	ldr	r3, [sp, #16]
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	9309      	str	r3, [sp, #36]	; 0x24
 800757a:	9b08      	ldr	r3, [sp, #32]
 800757c:	4621      	mov	r1, r4
 800757e:	3b01      	subs	r3, #1
 8007580:	4658      	mov	r0, fp
 8007582:	9304      	str	r3, [sp, #16]
 8007584:	f7ff fa66 	bl	8006a54 <quorem>
 8007588:	4603      	mov	r3, r0
 800758a:	4641      	mov	r1, r8
 800758c:	3330      	adds	r3, #48	; 0x30
 800758e:	9006      	str	r0, [sp, #24]
 8007590:	4658      	mov	r0, fp
 8007592:	930b      	str	r3, [sp, #44]	; 0x2c
 8007594:	f000 fb72 	bl	8007c7c <__mcmp>
 8007598:	4632      	mov	r2, r6
 800759a:	4681      	mov	r9, r0
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 fb88 	bl	8007cb4 <__mdiff>
 80075a4:	68c2      	ldr	r2, [r0, #12]
 80075a6:	4607      	mov	r7, r0
 80075a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075aa:	bb02      	cbnz	r2, 80075ee <_dtoa_r+0xa7e>
 80075ac:	4601      	mov	r1, r0
 80075ae:	4658      	mov	r0, fp
 80075b0:	f000 fb64 	bl	8007c7c <__mcmp>
 80075b4:	4602      	mov	r2, r0
 80075b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b8:	4639      	mov	r1, r7
 80075ba:	4628      	mov	r0, r5
 80075bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80075c0:	f000 f91e 	bl	8007800 <_Bfree>
 80075c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075c8:	9f08      	ldr	r7, [sp, #32]
 80075ca:	ea43 0102 	orr.w	r1, r3, r2
 80075ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d0:	430b      	orrs	r3, r1
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	d10d      	bne.n	80075f2 <_dtoa_r+0xa82>
 80075d6:	2b39      	cmp	r3, #57	; 0x39
 80075d8:	d029      	beq.n	800762e <_dtoa_r+0xabe>
 80075da:	f1b9 0f00 	cmp.w	r9, #0
 80075de:	dd01      	ble.n	80075e4 <_dtoa_r+0xa74>
 80075e0:	9b06      	ldr	r3, [sp, #24]
 80075e2:	3331      	adds	r3, #49	; 0x31
 80075e4:	9a04      	ldr	r2, [sp, #16]
 80075e6:	7013      	strb	r3, [r2, #0]
 80075e8:	e776      	b.n	80074d8 <_dtoa_r+0x968>
 80075ea:	4630      	mov	r0, r6
 80075ec:	e7b9      	b.n	8007562 <_dtoa_r+0x9f2>
 80075ee:	2201      	movs	r2, #1
 80075f0:	e7e2      	b.n	80075b8 <_dtoa_r+0xa48>
 80075f2:	f1b9 0f00 	cmp.w	r9, #0
 80075f6:	db06      	blt.n	8007606 <_dtoa_r+0xa96>
 80075f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80075fa:	ea41 0909 	orr.w	r9, r1, r9
 80075fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007600:	ea59 0101 	orrs.w	r1, r9, r1
 8007604:	d120      	bne.n	8007648 <_dtoa_r+0xad8>
 8007606:	2a00      	cmp	r2, #0
 8007608:	ddec      	ble.n	80075e4 <_dtoa_r+0xa74>
 800760a:	4659      	mov	r1, fp
 800760c:	2201      	movs	r2, #1
 800760e:	4628      	mov	r0, r5
 8007610:	9308      	str	r3, [sp, #32]
 8007612:	f000 fac3 	bl	8007b9c <__lshift>
 8007616:	4621      	mov	r1, r4
 8007618:	4683      	mov	fp, r0
 800761a:	f000 fb2f 	bl	8007c7c <__mcmp>
 800761e:	2800      	cmp	r0, #0
 8007620:	9b08      	ldr	r3, [sp, #32]
 8007622:	dc02      	bgt.n	800762a <_dtoa_r+0xaba>
 8007624:	d1de      	bne.n	80075e4 <_dtoa_r+0xa74>
 8007626:	07da      	lsls	r2, r3, #31
 8007628:	d5dc      	bpl.n	80075e4 <_dtoa_r+0xa74>
 800762a:	2b39      	cmp	r3, #57	; 0x39
 800762c:	d1d8      	bne.n	80075e0 <_dtoa_r+0xa70>
 800762e:	2339      	movs	r3, #57	; 0x39
 8007630:	9a04      	ldr	r2, [sp, #16]
 8007632:	7013      	strb	r3, [r2, #0]
 8007634:	463b      	mov	r3, r7
 8007636:	461f      	mov	r7, r3
 8007638:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800763c:	3b01      	subs	r3, #1
 800763e:	2a39      	cmp	r2, #57	; 0x39
 8007640:	d050      	beq.n	80076e4 <_dtoa_r+0xb74>
 8007642:	3201      	adds	r2, #1
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	e747      	b.n	80074d8 <_dtoa_r+0x968>
 8007648:	2a00      	cmp	r2, #0
 800764a:	dd03      	ble.n	8007654 <_dtoa_r+0xae4>
 800764c:	2b39      	cmp	r3, #57	; 0x39
 800764e:	d0ee      	beq.n	800762e <_dtoa_r+0xabe>
 8007650:	3301      	adds	r3, #1
 8007652:	e7c7      	b.n	80075e4 <_dtoa_r+0xa74>
 8007654:	9a08      	ldr	r2, [sp, #32]
 8007656:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007658:	f802 3c01 	strb.w	r3, [r2, #-1]
 800765c:	428a      	cmp	r2, r1
 800765e:	d02a      	beq.n	80076b6 <_dtoa_r+0xb46>
 8007660:	4659      	mov	r1, fp
 8007662:	2300      	movs	r3, #0
 8007664:	220a      	movs	r2, #10
 8007666:	4628      	mov	r0, r5
 8007668:	f000 f8ec 	bl	8007844 <__multadd>
 800766c:	45b0      	cmp	r8, r6
 800766e:	4683      	mov	fp, r0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	f04f 020a 	mov.w	r2, #10
 8007678:	4641      	mov	r1, r8
 800767a:	4628      	mov	r0, r5
 800767c:	d107      	bne.n	800768e <_dtoa_r+0xb1e>
 800767e:	f000 f8e1 	bl	8007844 <__multadd>
 8007682:	4680      	mov	r8, r0
 8007684:	4606      	mov	r6, r0
 8007686:	9b08      	ldr	r3, [sp, #32]
 8007688:	3301      	adds	r3, #1
 800768a:	9308      	str	r3, [sp, #32]
 800768c:	e775      	b.n	800757a <_dtoa_r+0xa0a>
 800768e:	f000 f8d9 	bl	8007844 <__multadd>
 8007692:	4631      	mov	r1, r6
 8007694:	4680      	mov	r8, r0
 8007696:	2300      	movs	r3, #0
 8007698:	220a      	movs	r2, #10
 800769a:	4628      	mov	r0, r5
 800769c:	f000 f8d2 	bl	8007844 <__multadd>
 80076a0:	4606      	mov	r6, r0
 80076a2:	e7f0      	b.n	8007686 <_dtoa_r+0xb16>
 80076a4:	f1b9 0f00 	cmp.w	r9, #0
 80076a8:	bfcc      	ite	gt
 80076aa:	464f      	movgt	r7, r9
 80076ac:	2701      	movle	r7, #1
 80076ae:	f04f 0800 	mov.w	r8, #0
 80076b2:	9a03      	ldr	r2, [sp, #12]
 80076b4:	4417      	add	r7, r2
 80076b6:	4659      	mov	r1, fp
 80076b8:	2201      	movs	r2, #1
 80076ba:	4628      	mov	r0, r5
 80076bc:	9308      	str	r3, [sp, #32]
 80076be:	f000 fa6d 	bl	8007b9c <__lshift>
 80076c2:	4621      	mov	r1, r4
 80076c4:	4683      	mov	fp, r0
 80076c6:	f000 fad9 	bl	8007c7c <__mcmp>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	dcb2      	bgt.n	8007634 <_dtoa_r+0xac4>
 80076ce:	d102      	bne.n	80076d6 <_dtoa_r+0xb66>
 80076d0:	9b08      	ldr	r3, [sp, #32]
 80076d2:	07db      	lsls	r3, r3, #31
 80076d4:	d4ae      	bmi.n	8007634 <_dtoa_r+0xac4>
 80076d6:	463b      	mov	r3, r7
 80076d8:	461f      	mov	r7, r3
 80076da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076de:	2a30      	cmp	r2, #48	; 0x30
 80076e0:	d0fa      	beq.n	80076d8 <_dtoa_r+0xb68>
 80076e2:	e6f9      	b.n	80074d8 <_dtoa_r+0x968>
 80076e4:	9a03      	ldr	r2, [sp, #12]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d1a5      	bne.n	8007636 <_dtoa_r+0xac6>
 80076ea:	2331      	movs	r3, #49	; 0x31
 80076ec:	f10a 0a01 	add.w	sl, sl, #1
 80076f0:	e779      	b.n	80075e6 <_dtoa_r+0xa76>
 80076f2:	4b14      	ldr	r3, [pc, #80]	; (8007744 <_dtoa_r+0xbd4>)
 80076f4:	f7ff baa8 	b.w	8006c48 <_dtoa_r+0xd8>
 80076f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f47f aa81 	bne.w	8006c02 <_dtoa_r+0x92>
 8007700:	4b11      	ldr	r3, [pc, #68]	; (8007748 <_dtoa_r+0xbd8>)
 8007702:	f7ff baa1 	b.w	8006c48 <_dtoa_r+0xd8>
 8007706:	f1b9 0f00 	cmp.w	r9, #0
 800770a:	dc03      	bgt.n	8007714 <_dtoa_r+0xba4>
 800770c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800770e:	2b02      	cmp	r3, #2
 8007710:	f73f aecb 	bgt.w	80074aa <_dtoa_r+0x93a>
 8007714:	9f03      	ldr	r7, [sp, #12]
 8007716:	4621      	mov	r1, r4
 8007718:	4658      	mov	r0, fp
 800771a:	f7ff f99b 	bl	8006a54 <quorem>
 800771e:	9a03      	ldr	r2, [sp, #12]
 8007720:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007724:	f807 3b01 	strb.w	r3, [r7], #1
 8007728:	1aba      	subs	r2, r7, r2
 800772a:	4591      	cmp	r9, r2
 800772c:	ddba      	ble.n	80076a4 <_dtoa_r+0xb34>
 800772e:	4659      	mov	r1, fp
 8007730:	2300      	movs	r3, #0
 8007732:	220a      	movs	r2, #10
 8007734:	4628      	mov	r0, r5
 8007736:	f000 f885 	bl	8007844 <__multadd>
 800773a:	4683      	mov	fp, r0
 800773c:	e7eb      	b.n	8007716 <_dtoa_r+0xba6>
 800773e:	bf00      	nop
 8007740:	08009027 	.word	0x08009027
 8007744:	08008f84 	.word	0x08008f84
 8007748:	08008fa8 	.word	0x08008fa8

0800774c <_localeconv_r>:
 800774c:	4800      	ldr	r0, [pc, #0]	; (8007750 <_localeconv_r+0x4>)
 800774e:	4770      	bx	lr
 8007750:	20000198 	.word	0x20000198

08007754 <malloc>:
 8007754:	4b02      	ldr	r3, [pc, #8]	; (8007760 <malloc+0xc>)
 8007756:	4601      	mov	r1, r0
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	f000 bc0f 	b.w	8007f7c <_malloc_r>
 800775e:	bf00      	nop
 8007760:	20000044 	.word	0x20000044

08007764 <memchr>:
 8007764:	4603      	mov	r3, r0
 8007766:	b510      	push	{r4, lr}
 8007768:	b2c9      	uxtb	r1, r1
 800776a:	4402      	add	r2, r0
 800776c:	4293      	cmp	r3, r2
 800776e:	4618      	mov	r0, r3
 8007770:	d101      	bne.n	8007776 <memchr+0x12>
 8007772:	2000      	movs	r0, #0
 8007774:	e003      	b.n	800777e <memchr+0x1a>
 8007776:	7804      	ldrb	r4, [r0, #0]
 8007778:	3301      	adds	r3, #1
 800777a:	428c      	cmp	r4, r1
 800777c:	d1f6      	bne.n	800776c <memchr+0x8>
 800777e:	bd10      	pop	{r4, pc}

08007780 <_Balloc>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007784:	4604      	mov	r4, r0
 8007786:	460d      	mov	r5, r1
 8007788:	b976      	cbnz	r6, 80077a8 <_Balloc+0x28>
 800778a:	2010      	movs	r0, #16
 800778c:	f7ff ffe2 	bl	8007754 <malloc>
 8007790:	4602      	mov	r2, r0
 8007792:	6260      	str	r0, [r4, #36]	; 0x24
 8007794:	b920      	cbnz	r0, 80077a0 <_Balloc+0x20>
 8007796:	2166      	movs	r1, #102	; 0x66
 8007798:	4b17      	ldr	r3, [pc, #92]	; (80077f8 <_Balloc+0x78>)
 800779a:	4818      	ldr	r0, [pc, #96]	; (80077fc <_Balloc+0x7c>)
 800779c:	f000 fdce 	bl	800833c <__assert_func>
 80077a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a4:	6006      	str	r6, [r0, #0]
 80077a6:	60c6      	str	r6, [r0, #12]
 80077a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077aa:	68f3      	ldr	r3, [r6, #12]
 80077ac:	b183      	cbz	r3, 80077d0 <_Balloc+0x50>
 80077ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077b6:	b9b8      	cbnz	r0, 80077e8 <_Balloc+0x68>
 80077b8:	2101      	movs	r1, #1
 80077ba:	fa01 f605 	lsl.w	r6, r1, r5
 80077be:	1d72      	adds	r2, r6, #5
 80077c0:	4620      	mov	r0, r4
 80077c2:	0092      	lsls	r2, r2, #2
 80077c4:	f000 fb5e 	bl	8007e84 <_calloc_r>
 80077c8:	b160      	cbz	r0, 80077e4 <_Balloc+0x64>
 80077ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ce:	e00e      	b.n	80077ee <_Balloc+0x6e>
 80077d0:	2221      	movs	r2, #33	; 0x21
 80077d2:	2104      	movs	r1, #4
 80077d4:	4620      	mov	r0, r4
 80077d6:	f000 fb55 	bl	8007e84 <_calloc_r>
 80077da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077dc:	60f0      	str	r0, [r6, #12]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e4      	bne.n	80077ae <_Balloc+0x2e>
 80077e4:	2000      	movs	r0, #0
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	6802      	ldr	r2, [r0, #0]
 80077ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ee:	2300      	movs	r3, #0
 80077f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077f4:	e7f7      	b.n	80077e6 <_Balloc+0x66>
 80077f6:	bf00      	nop
 80077f8:	08008fb5 	.word	0x08008fb5
 80077fc:	08009038 	.word	0x08009038

08007800 <_Bfree>:
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007804:	4605      	mov	r5, r0
 8007806:	460c      	mov	r4, r1
 8007808:	b976      	cbnz	r6, 8007828 <_Bfree+0x28>
 800780a:	2010      	movs	r0, #16
 800780c:	f7ff ffa2 	bl	8007754 <malloc>
 8007810:	4602      	mov	r2, r0
 8007812:	6268      	str	r0, [r5, #36]	; 0x24
 8007814:	b920      	cbnz	r0, 8007820 <_Bfree+0x20>
 8007816:	218a      	movs	r1, #138	; 0x8a
 8007818:	4b08      	ldr	r3, [pc, #32]	; (800783c <_Bfree+0x3c>)
 800781a:	4809      	ldr	r0, [pc, #36]	; (8007840 <_Bfree+0x40>)
 800781c:	f000 fd8e 	bl	800833c <__assert_func>
 8007820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007824:	6006      	str	r6, [r0, #0]
 8007826:	60c6      	str	r6, [r0, #12]
 8007828:	b13c      	cbz	r4, 800783a <_Bfree+0x3a>
 800782a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800782c:	6862      	ldr	r2, [r4, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007834:	6021      	str	r1, [r4, #0]
 8007836:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	08008fb5 	.word	0x08008fb5
 8007840:	08009038 	.word	0x08009038

08007844 <__multadd>:
 8007844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007848:	4607      	mov	r7, r0
 800784a:	460c      	mov	r4, r1
 800784c:	461e      	mov	r6, r3
 800784e:	2000      	movs	r0, #0
 8007850:	690d      	ldr	r5, [r1, #16]
 8007852:	f101 0c14 	add.w	ip, r1, #20
 8007856:	f8dc 3000 	ldr.w	r3, [ip]
 800785a:	3001      	adds	r0, #1
 800785c:	b299      	uxth	r1, r3
 800785e:	fb02 6101 	mla	r1, r2, r1, r6
 8007862:	0c1e      	lsrs	r6, r3, #16
 8007864:	0c0b      	lsrs	r3, r1, #16
 8007866:	fb02 3306 	mla	r3, r2, r6, r3
 800786a:	b289      	uxth	r1, r1
 800786c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007870:	4285      	cmp	r5, r0
 8007872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007876:	f84c 1b04 	str.w	r1, [ip], #4
 800787a:	dcec      	bgt.n	8007856 <__multadd+0x12>
 800787c:	b30e      	cbz	r6, 80078c2 <__multadd+0x7e>
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	42ab      	cmp	r3, r5
 8007882:	dc19      	bgt.n	80078b8 <__multadd+0x74>
 8007884:	6861      	ldr	r1, [r4, #4]
 8007886:	4638      	mov	r0, r7
 8007888:	3101      	adds	r1, #1
 800788a:	f7ff ff79 	bl	8007780 <_Balloc>
 800788e:	4680      	mov	r8, r0
 8007890:	b928      	cbnz	r0, 800789e <__multadd+0x5a>
 8007892:	4602      	mov	r2, r0
 8007894:	21b5      	movs	r1, #181	; 0xb5
 8007896:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <__multadd+0x84>)
 8007898:	480c      	ldr	r0, [pc, #48]	; (80078cc <__multadd+0x88>)
 800789a:	f000 fd4f 	bl	800833c <__assert_func>
 800789e:	6922      	ldr	r2, [r4, #16]
 80078a0:	f104 010c 	add.w	r1, r4, #12
 80078a4:	3202      	adds	r2, #2
 80078a6:	0092      	lsls	r2, r2, #2
 80078a8:	300c      	adds	r0, #12
 80078aa:	f7fe fc29 	bl	8006100 <memcpy>
 80078ae:	4621      	mov	r1, r4
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7ff ffa5 	bl	8007800 <_Bfree>
 80078b6:	4644      	mov	r4, r8
 80078b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078bc:	3501      	adds	r5, #1
 80078be:	615e      	str	r6, [r3, #20]
 80078c0:	6125      	str	r5, [r4, #16]
 80078c2:	4620      	mov	r0, r4
 80078c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c8:	08009027 	.word	0x08009027
 80078cc:	08009038 	.word	0x08009038

080078d0 <__hi0bits>:
 80078d0:	0c02      	lsrs	r2, r0, #16
 80078d2:	0412      	lsls	r2, r2, #16
 80078d4:	4603      	mov	r3, r0
 80078d6:	b9ca      	cbnz	r2, 800790c <__hi0bits+0x3c>
 80078d8:	0403      	lsls	r3, r0, #16
 80078da:	2010      	movs	r0, #16
 80078dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80078e0:	bf04      	itt	eq
 80078e2:	021b      	lsleq	r3, r3, #8
 80078e4:	3008      	addeq	r0, #8
 80078e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80078ea:	bf04      	itt	eq
 80078ec:	011b      	lsleq	r3, r3, #4
 80078ee:	3004      	addeq	r0, #4
 80078f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80078f4:	bf04      	itt	eq
 80078f6:	009b      	lsleq	r3, r3, #2
 80078f8:	3002      	addeq	r0, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	db05      	blt.n	800790a <__hi0bits+0x3a>
 80078fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007902:	f100 0001 	add.w	r0, r0, #1
 8007906:	bf08      	it	eq
 8007908:	2020      	moveq	r0, #32
 800790a:	4770      	bx	lr
 800790c:	2000      	movs	r0, #0
 800790e:	e7e5      	b.n	80078dc <__hi0bits+0xc>

08007910 <__lo0bits>:
 8007910:	6803      	ldr	r3, [r0, #0]
 8007912:	4602      	mov	r2, r0
 8007914:	f013 0007 	ands.w	r0, r3, #7
 8007918:	d00b      	beq.n	8007932 <__lo0bits+0x22>
 800791a:	07d9      	lsls	r1, r3, #31
 800791c:	d421      	bmi.n	8007962 <__lo0bits+0x52>
 800791e:	0798      	lsls	r0, r3, #30
 8007920:	bf49      	itett	mi
 8007922:	085b      	lsrmi	r3, r3, #1
 8007924:	089b      	lsrpl	r3, r3, #2
 8007926:	2001      	movmi	r0, #1
 8007928:	6013      	strmi	r3, [r2, #0]
 800792a:	bf5c      	itt	pl
 800792c:	2002      	movpl	r0, #2
 800792e:	6013      	strpl	r3, [r2, #0]
 8007930:	4770      	bx	lr
 8007932:	b299      	uxth	r1, r3
 8007934:	b909      	cbnz	r1, 800793a <__lo0bits+0x2a>
 8007936:	2010      	movs	r0, #16
 8007938:	0c1b      	lsrs	r3, r3, #16
 800793a:	b2d9      	uxtb	r1, r3
 800793c:	b909      	cbnz	r1, 8007942 <__lo0bits+0x32>
 800793e:	3008      	adds	r0, #8
 8007940:	0a1b      	lsrs	r3, r3, #8
 8007942:	0719      	lsls	r1, r3, #28
 8007944:	bf04      	itt	eq
 8007946:	091b      	lsreq	r3, r3, #4
 8007948:	3004      	addeq	r0, #4
 800794a:	0799      	lsls	r1, r3, #30
 800794c:	bf04      	itt	eq
 800794e:	089b      	lsreq	r3, r3, #2
 8007950:	3002      	addeq	r0, #2
 8007952:	07d9      	lsls	r1, r3, #31
 8007954:	d403      	bmi.n	800795e <__lo0bits+0x4e>
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	f100 0001 	add.w	r0, r0, #1
 800795c:	d003      	beq.n	8007966 <__lo0bits+0x56>
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	4770      	bx	lr
 8007962:	2000      	movs	r0, #0
 8007964:	4770      	bx	lr
 8007966:	2020      	movs	r0, #32
 8007968:	4770      	bx	lr
	...

0800796c <__i2b>:
 800796c:	b510      	push	{r4, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	2101      	movs	r1, #1
 8007972:	f7ff ff05 	bl	8007780 <_Balloc>
 8007976:	4602      	mov	r2, r0
 8007978:	b928      	cbnz	r0, 8007986 <__i2b+0x1a>
 800797a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800797e:	4b04      	ldr	r3, [pc, #16]	; (8007990 <__i2b+0x24>)
 8007980:	4804      	ldr	r0, [pc, #16]	; (8007994 <__i2b+0x28>)
 8007982:	f000 fcdb 	bl	800833c <__assert_func>
 8007986:	2301      	movs	r3, #1
 8007988:	6144      	str	r4, [r0, #20]
 800798a:	6103      	str	r3, [r0, #16]
 800798c:	bd10      	pop	{r4, pc}
 800798e:	bf00      	nop
 8007990:	08009027 	.word	0x08009027
 8007994:	08009038 	.word	0x08009038

08007998 <__multiply>:
 8007998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	4691      	mov	r9, r2
 800799e:	690a      	ldr	r2, [r1, #16]
 80079a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079a4:	460c      	mov	r4, r1
 80079a6:	429a      	cmp	r2, r3
 80079a8:	bfbe      	ittt	lt
 80079aa:	460b      	movlt	r3, r1
 80079ac:	464c      	movlt	r4, r9
 80079ae:	4699      	movlt	r9, r3
 80079b0:	6927      	ldr	r7, [r4, #16]
 80079b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079b6:	68a3      	ldr	r3, [r4, #8]
 80079b8:	6861      	ldr	r1, [r4, #4]
 80079ba:	eb07 060a 	add.w	r6, r7, sl
 80079be:	42b3      	cmp	r3, r6
 80079c0:	b085      	sub	sp, #20
 80079c2:	bfb8      	it	lt
 80079c4:	3101      	addlt	r1, #1
 80079c6:	f7ff fedb 	bl	8007780 <_Balloc>
 80079ca:	b930      	cbnz	r0, 80079da <__multiply+0x42>
 80079cc:	4602      	mov	r2, r0
 80079ce:	f240 115d 	movw	r1, #349	; 0x15d
 80079d2:	4b43      	ldr	r3, [pc, #268]	; (8007ae0 <__multiply+0x148>)
 80079d4:	4843      	ldr	r0, [pc, #268]	; (8007ae4 <__multiply+0x14c>)
 80079d6:	f000 fcb1 	bl	800833c <__assert_func>
 80079da:	f100 0514 	add.w	r5, r0, #20
 80079de:	462b      	mov	r3, r5
 80079e0:	2200      	movs	r2, #0
 80079e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079e6:	4543      	cmp	r3, r8
 80079e8:	d321      	bcc.n	8007a2e <__multiply+0x96>
 80079ea:	f104 0314 	add.w	r3, r4, #20
 80079ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079f2:	f109 0314 	add.w	r3, r9, #20
 80079f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079fa:	9202      	str	r2, [sp, #8]
 80079fc:	1b3a      	subs	r2, r7, r4
 80079fe:	3a15      	subs	r2, #21
 8007a00:	f022 0203 	bic.w	r2, r2, #3
 8007a04:	3204      	adds	r2, #4
 8007a06:	f104 0115 	add.w	r1, r4, #21
 8007a0a:	428f      	cmp	r7, r1
 8007a0c:	bf38      	it	cc
 8007a0e:	2204      	movcc	r2, #4
 8007a10:	9201      	str	r2, [sp, #4]
 8007a12:	9a02      	ldr	r2, [sp, #8]
 8007a14:	9303      	str	r3, [sp, #12]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d80c      	bhi.n	8007a34 <__multiply+0x9c>
 8007a1a:	2e00      	cmp	r6, #0
 8007a1c:	dd03      	ble.n	8007a26 <__multiply+0x8e>
 8007a1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d059      	beq.n	8007ada <__multiply+0x142>
 8007a26:	6106      	str	r6, [r0, #16]
 8007a28:	b005      	add	sp, #20
 8007a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2e:	f843 2b04 	str.w	r2, [r3], #4
 8007a32:	e7d8      	b.n	80079e6 <__multiply+0x4e>
 8007a34:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a38:	f1ba 0f00 	cmp.w	sl, #0
 8007a3c:	d023      	beq.n	8007a86 <__multiply+0xee>
 8007a3e:	46a9      	mov	r9, r5
 8007a40:	f04f 0c00 	mov.w	ip, #0
 8007a44:	f104 0e14 	add.w	lr, r4, #20
 8007a48:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a4c:	f8d9 1000 	ldr.w	r1, [r9]
 8007a50:	fa1f fb82 	uxth.w	fp, r2
 8007a54:	b289      	uxth	r1, r1
 8007a56:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a5a:	4461      	add	r1, ip
 8007a5c:	f8d9 c000 	ldr.w	ip, [r9]
 8007a60:	0c12      	lsrs	r2, r2, #16
 8007a62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a66:	fb0a c202 	mla	r2, sl, r2, ip
 8007a6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a6e:	b289      	uxth	r1, r1
 8007a70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a74:	4577      	cmp	r7, lr
 8007a76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a7a:	f849 1b04 	str.w	r1, [r9], #4
 8007a7e:	d8e3      	bhi.n	8007a48 <__multiply+0xb0>
 8007a80:	9a01      	ldr	r2, [sp, #4]
 8007a82:	f845 c002 	str.w	ip, [r5, r2]
 8007a86:	9a03      	ldr	r2, [sp, #12]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a8e:	f1b9 0f00 	cmp.w	r9, #0
 8007a92:	d020      	beq.n	8007ad6 <__multiply+0x13e>
 8007a94:	46ae      	mov	lr, r5
 8007a96:	f04f 0a00 	mov.w	sl, #0
 8007a9a:	6829      	ldr	r1, [r5, #0]
 8007a9c:	f104 0c14 	add.w	ip, r4, #20
 8007aa0:	f8bc b000 	ldrh.w	fp, [ip]
 8007aa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007aa8:	b289      	uxth	r1, r1
 8007aaa:	fb09 220b 	mla	r2, r9, fp, r2
 8007aae:	4492      	add	sl, r2
 8007ab0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ab4:	f84e 1b04 	str.w	r1, [lr], #4
 8007ab8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007abc:	f8be 1000 	ldrh.w	r1, [lr]
 8007ac0:	0c12      	lsrs	r2, r2, #16
 8007ac2:	fb09 1102 	mla	r1, r9, r2, r1
 8007ac6:	4567      	cmp	r7, ip
 8007ac8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007acc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ad0:	d8e6      	bhi.n	8007aa0 <__multiply+0x108>
 8007ad2:	9a01      	ldr	r2, [sp, #4]
 8007ad4:	50a9      	str	r1, [r5, r2]
 8007ad6:	3504      	adds	r5, #4
 8007ad8:	e79b      	b.n	8007a12 <__multiply+0x7a>
 8007ada:	3e01      	subs	r6, #1
 8007adc:	e79d      	b.n	8007a1a <__multiply+0x82>
 8007ade:	bf00      	nop
 8007ae0:	08009027 	.word	0x08009027
 8007ae4:	08009038 	.word	0x08009038

08007ae8 <__pow5mult>:
 8007ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aec:	4615      	mov	r5, r2
 8007aee:	f012 0203 	ands.w	r2, r2, #3
 8007af2:	4606      	mov	r6, r0
 8007af4:	460f      	mov	r7, r1
 8007af6:	d007      	beq.n	8007b08 <__pow5mult+0x20>
 8007af8:	4c25      	ldr	r4, [pc, #148]	; (8007b90 <__pow5mult+0xa8>)
 8007afa:	3a01      	subs	r2, #1
 8007afc:	2300      	movs	r3, #0
 8007afe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b02:	f7ff fe9f 	bl	8007844 <__multadd>
 8007b06:	4607      	mov	r7, r0
 8007b08:	10ad      	asrs	r5, r5, #2
 8007b0a:	d03d      	beq.n	8007b88 <__pow5mult+0xa0>
 8007b0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b0e:	b97c      	cbnz	r4, 8007b30 <__pow5mult+0x48>
 8007b10:	2010      	movs	r0, #16
 8007b12:	f7ff fe1f 	bl	8007754 <malloc>
 8007b16:	4602      	mov	r2, r0
 8007b18:	6270      	str	r0, [r6, #36]	; 0x24
 8007b1a:	b928      	cbnz	r0, 8007b28 <__pow5mult+0x40>
 8007b1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b20:	4b1c      	ldr	r3, [pc, #112]	; (8007b94 <__pow5mult+0xac>)
 8007b22:	481d      	ldr	r0, [pc, #116]	; (8007b98 <__pow5mult+0xb0>)
 8007b24:	f000 fc0a 	bl	800833c <__assert_func>
 8007b28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b2c:	6004      	str	r4, [r0, #0]
 8007b2e:	60c4      	str	r4, [r0, #12]
 8007b30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b38:	b94c      	cbnz	r4, 8007b4e <__pow5mult+0x66>
 8007b3a:	f240 2171 	movw	r1, #625	; 0x271
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f7ff ff14 	bl	800796c <__i2b>
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b4c:	6003      	str	r3, [r0, #0]
 8007b4e:	f04f 0900 	mov.w	r9, #0
 8007b52:	07eb      	lsls	r3, r5, #31
 8007b54:	d50a      	bpl.n	8007b6c <__pow5mult+0x84>
 8007b56:	4639      	mov	r1, r7
 8007b58:	4622      	mov	r2, r4
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7ff ff1c 	bl	8007998 <__multiply>
 8007b60:	4680      	mov	r8, r0
 8007b62:	4639      	mov	r1, r7
 8007b64:	4630      	mov	r0, r6
 8007b66:	f7ff fe4b 	bl	8007800 <_Bfree>
 8007b6a:	4647      	mov	r7, r8
 8007b6c:	106d      	asrs	r5, r5, #1
 8007b6e:	d00b      	beq.n	8007b88 <__pow5mult+0xa0>
 8007b70:	6820      	ldr	r0, [r4, #0]
 8007b72:	b938      	cbnz	r0, 8007b84 <__pow5mult+0x9c>
 8007b74:	4622      	mov	r2, r4
 8007b76:	4621      	mov	r1, r4
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff ff0d 	bl	8007998 <__multiply>
 8007b7e:	6020      	str	r0, [r4, #0]
 8007b80:	f8c0 9000 	str.w	r9, [r0]
 8007b84:	4604      	mov	r4, r0
 8007b86:	e7e4      	b.n	8007b52 <__pow5mult+0x6a>
 8007b88:	4638      	mov	r0, r7
 8007b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b8e:	bf00      	nop
 8007b90:	08009188 	.word	0x08009188
 8007b94:	08008fb5 	.word	0x08008fb5
 8007b98:	08009038 	.word	0x08009038

08007b9c <__lshift>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	4691      	mov	r9, r2
 8007ba6:	6923      	ldr	r3, [r4, #16]
 8007ba8:	6849      	ldr	r1, [r1, #4]
 8007baa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bb4:	f108 0601 	add.w	r6, r8, #1
 8007bb8:	42b3      	cmp	r3, r6
 8007bba:	db0b      	blt.n	8007bd4 <__lshift+0x38>
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f7ff fddf 	bl	8007780 <_Balloc>
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	b948      	cbnz	r0, 8007bda <__lshift+0x3e>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bcc:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <__lshift+0xd8>)
 8007bce:	482a      	ldr	r0, [pc, #168]	; (8007c78 <__lshift+0xdc>)
 8007bd0:	f000 fbb4 	bl	800833c <__assert_func>
 8007bd4:	3101      	adds	r1, #1
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	e7ee      	b.n	8007bb8 <__lshift+0x1c>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f100 0114 	add.w	r1, r0, #20
 8007be0:	f100 0210 	add.w	r2, r0, #16
 8007be4:	4618      	mov	r0, r3
 8007be6:	4553      	cmp	r3, sl
 8007be8:	db37      	blt.n	8007c5a <__lshift+0xbe>
 8007bea:	6920      	ldr	r0, [r4, #16]
 8007bec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bf0:	f104 0314 	add.w	r3, r4, #20
 8007bf4:	f019 091f 	ands.w	r9, r9, #31
 8007bf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c00:	d02f      	beq.n	8007c62 <__lshift+0xc6>
 8007c02:	468a      	mov	sl, r1
 8007c04:	f04f 0c00 	mov.w	ip, #0
 8007c08:	f1c9 0e20 	rsb	lr, r9, #32
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	fa02 f209 	lsl.w	r2, r2, r9
 8007c12:	ea42 020c 	orr.w	r2, r2, ip
 8007c16:	f84a 2b04 	str.w	r2, [sl], #4
 8007c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1e:	4298      	cmp	r0, r3
 8007c20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c24:	d8f2      	bhi.n	8007c0c <__lshift+0x70>
 8007c26:	1b03      	subs	r3, r0, r4
 8007c28:	3b15      	subs	r3, #21
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	3304      	adds	r3, #4
 8007c30:	f104 0215 	add.w	r2, r4, #21
 8007c34:	4290      	cmp	r0, r2
 8007c36:	bf38      	it	cc
 8007c38:	2304      	movcc	r3, #4
 8007c3a:	f841 c003 	str.w	ip, [r1, r3]
 8007c3e:	f1bc 0f00 	cmp.w	ip, #0
 8007c42:	d001      	beq.n	8007c48 <__lshift+0xac>
 8007c44:	f108 0602 	add.w	r6, r8, #2
 8007c48:	3e01      	subs	r6, #1
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	612e      	str	r6, [r5, #16]
 8007c50:	f7ff fdd6 	bl	8007800 <_Bfree>
 8007c54:	4628      	mov	r0, r5
 8007c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c5e:	3301      	adds	r3, #1
 8007c60:	e7c1      	b.n	8007be6 <__lshift+0x4a>
 8007c62:	3904      	subs	r1, #4
 8007c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c68:	4298      	cmp	r0, r3
 8007c6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c6e:	d8f9      	bhi.n	8007c64 <__lshift+0xc8>
 8007c70:	e7ea      	b.n	8007c48 <__lshift+0xac>
 8007c72:	bf00      	nop
 8007c74:	08009027 	.word	0x08009027
 8007c78:	08009038 	.word	0x08009038

08007c7c <__mcmp>:
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	690a      	ldr	r2, [r1, #16]
 8007c80:	6900      	ldr	r0, [r0, #16]
 8007c82:	b530      	push	{r4, r5, lr}
 8007c84:	1a80      	subs	r0, r0, r2
 8007c86:	d10d      	bne.n	8007ca4 <__mcmp+0x28>
 8007c88:	3314      	adds	r3, #20
 8007c8a:	3114      	adds	r1, #20
 8007c8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c9c:	4295      	cmp	r5, r2
 8007c9e:	d002      	beq.n	8007ca6 <__mcmp+0x2a>
 8007ca0:	d304      	bcc.n	8007cac <__mcmp+0x30>
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	bd30      	pop	{r4, r5, pc}
 8007ca6:	42a3      	cmp	r3, r4
 8007ca8:	d3f4      	bcc.n	8007c94 <__mcmp+0x18>
 8007caa:	e7fb      	b.n	8007ca4 <__mcmp+0x28>
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	e7f8      	b.n	8007ca4 <__mcmp+0x28>
	...

08007cb4 <__mdiff>:
 8007cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	460d      	mov	r5, r1
 8007cba:	4607      	mov	r7, r0
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	4614      	mov	r4, r2
 8007cc2:	f7ff ffdb 	bl	8007c7c <__mcmp>
 8007cc6:	1e06      	subs	r6, r0, #0
 8007cc8:	d111      	bne.n	8007cee <__mdiff+0x3a>
 8007cca:	4631      	mov	r1, r6
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f7ff fd57 	bl	8007780 <_Balloc>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	b928      	cbnz	r0, 8007ce2 <__mdiff+0x2e>
 8007cd6:	f240 2132 	movw	r1, #562	; 0x232
 8007cda:	4b3a      	ldr	r3, [pc, #232]	; (8007dc4 <__mdiff+0x110>)
 8007cdc:	483a      	ldr	r0, [pc, #232]	; (8007dc8 <__mdiff+0x114>)
 8007cde:	f000 fb2d 	bl	800833c <__assert_func>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ce8:	4610      	mov	r0, r2
 8007cea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cee:	bfa4      	itt	ge
 8007cf0:	4623      	movge	r3, r4
 8007cf2:	462c      	movge	r4, r5
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	6861      	ldr	r1, [r4, #4]
 8007cf8:	bfa6      	itte	ge
 8007cfa:	461d      	movge	r5, r3
 8007cfc:	2600      	movge	r6, #0
 8007cfe:	2601      	movlt	r6, #1
 8007d00:	f7ff fd3e 	bl	8007780 <_Balloc>
 8007d04:	4602      	mov	r2, r0
 8007d06:	b918      	cbnz	r0, 8007d10 <__mdiff+0x5c>
 8007d08:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d0c:	4b2d      	ldr	r3, [pc, #180]	; (8007dc4 <__mdiff+0x110>)
 8007d0e:	e7e5      	b.n	8007cdc <__mdiff+0x28>
 8007d10:	f102 0814 	add.w	r8, r2, #20
 8007d14:	46c2      	mov	sl, r8
 8007d16:	f04f 0c00 	mov.w	ip, #0
 8007d1a:	6927      	ldr	r7, [r4, #16]
 8007d1c:	60c6      	str	r6, [r0, #12]
 8007d1e:	692e      	ldr	r6, [r5, #16]
 8007d20:	f104 0014 	add.w	r0, r4, #20
 8007d24:	f105 0914 	add.w	r9, r5, #20
 8007d28:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007d2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d30:	3410      	adds	r4, #16
 8007d32:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d36:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d3a:	fa1f f18b 	uxth.w	r1, fp
 8007d3e:	448c      	add	ip, r1
 8007d40:	b299      	uxth	r1, r3
 8007d42:	0c1b      	lsrs	r3, r3, #16
 8007d44:	ebac 0101 	sub.w	r1, ip, r1
 8007d48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d4c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d50:	b289      	uxth	r1, r1
 8007d52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d56:	454e      	cmp	r6, r9
 8007d58:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007d5c:	f84a 3b04 	str.w	r3, [sl], #4
 8007d60:	d8e7      	bhi.n	8007d32 <__mdiff+0x7e>
 8007d62:	1b73      	subs	r3, r6, r5
 8007d64:	3b15      	subs	r3, #21
 8007d66:	f023 0303 	bic.w	r3, r3, #3
 8007d6a:	3515      	adds	r5, #21
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	42ae      	cmp	r6, r5
 8007d70:	bf38      	it	cc
 8007d72:	2304      	movcc	r3, #4
 8007d74:	4418      	add	r0, r3
 8007d76:	4443      	add	r3, r8
 8007d78:	461e      	mov	r6, r3
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	4575      	cmp	r5, lr
 8007d7e:	d30e      	bcc.n	8007d9e <__mdiff+0xea>
 8007d80:	f10e 0103 	add.w	r1, lr, #3
 8007d84:	1a09      	subs	r1, r1, r0
 8007d86:	f021 0103 	bic.w	r1, r1, #3
 8007d8a:	3803      	subs	r0, #3
 8007d8c:	4586      	cmp	lr, r0
 8007d8e:	bf38      	it	cc
 8007d90:	2100      	movcc	r1, #0
 8007d92:	4419      	add	r1, r3
 8007d94:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007d98:	b18b      	cbz	r3, 8007dbe <__mdiff+0x10a>
 8007d9a:	6117      	str	r7, [r2, #16]
 8007d9c:	e7a4      	b.n	8007ce8 <__mdiff+0x34>
 8007d9e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007da2:	fa1f f188 	uxth.w	r1, r8
 8007da6:	4461      	add	r1, ip
 8007da8:	140c      	asrs	r4, r1, #16
 8007daa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007dae:	b289      	uxth	r1, r1
 8007db0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007db4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007db8:	f846 1b04 	str.w	r1, [r6], #4
 8007dbc:	e7de      	b.n	8007d7c <__mdiff+0xc8>
 8007dbe:	3f01      	subs	r7, #1
 8007dc0:	e7e8      	b.n	8007d94 <__mdiff+0xe0>
 8007dc2:	bf00      	nop
 8007dc4:	08009027 	.word	0x08009027
 8007dc8:	08009038 	.word	0x08009038

08007dcc <__d2b>:
 8007dcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007dd6:	4690      	mov	r8, r2
 8007dd8:	461d      	mov	r5, r3
 8007dda:	f7ff fcd1 	bl	8007780 <_Balloc>
 8007dde:	4604      	mov	r4, r0
 8007de0:	b930      	cbnz	r0, 8007df0 <__d2b+0x24>
 8007de2:	4602      	mov	r2, r0
 8007de4:	f240 310a 	movw	r1, #778	; 0x30a
 8007de8:	4b24      	ldr	r3, [pc, #144]	; (8007e7c <__d2b+0xb0>)
 8007dea:	4825      	ldr	r0, [pc, #148]	; (8007e80 <__d2b+0xb4>)
 8007dec:	f000 faa6 	bl	800833c <__assert_func>
 8007df0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007df4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007df8:	bb2d      	cbnz	r5, 8007e46 <__d2b+0x7a>
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	f1b8 0300 	subs.w	r3, r8, #0
 8007e00:	d026      	beq.n	8007e50 <__d2b+0x84>
 8007e02:	4668      	mov	r0, sp
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	f7ff fd83 	bl	8007910 <__lo0bits>
 8007e0a:	9900      	ldr	r1, [sp, #0]
 8007e0c:	b1f0      	cbz	r0, 8007e4c <__d2b+0x80>
 8007e0e:	9a01      	ldr	r2, [sp, #4]
 8007e10:	f1c0 0320 	rsb	r3, r0, #32
 8007e14:	fa02 f303 	lsl.w	r3, r2, r3
 8007e18:	430b      	orrs	r3, r1
 8007e1a:	40c2      	lsrs	r2, r0
 8007e1c:	6163      	str	r3, [r4, #20]
 8007e1e:	9201      	str	r2, [sp, #4]
 8007e20:	9b01      	ldr	r3, [sp, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bf14      	ite	ne
 8007e26:	2102      	movne	r1, #2
 8007e28:	2101      	moveq	r1, #1
 8007e2a:	61a3      	str	r3, [r4, #24]
 8007e2c:	6121      	str	r1, [r4, #16]
 8007e2e:	b1c5      	cbz	r5, 8007e62 <__d2b+0x96>
 8007e30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e34:	4405      	add	r5, r0
 8007e36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e3a:	603d      	str	r5, [r7, #0]
 8007e3c:	6030      	str	r0, [r6, #0]
 8007e3e:	4620      	mov	r0, r4
 8007e40:	b002      	add	sp, #8
 8007e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e4a:	e7d6      	b.n	8007dfa <__d2b+0x2e>
 8007e4c:	6161      	str	r1, [r4, #20]
 8007e4e:	e7e7      	b.n	8007e20 <__d2b+0x54>
 8007e50:	a801      	add	r0, sp, #4
 8007e52:	f7ff fd5d 	bl	8007910 <__lo0bits>
 8007e56:	2101      	movs	r1, #1
 8007e58:	9b01      	ldr	r3, [sp, #4]
 8007e5a:	6121      	str	r1, [r4, #16]
 8007e5c:	6163      	str	r3, [r4, #20]
 8007e5e:	3020      	adds	r0, #32
 8007e60:	e7e5      	b.n	8007e2e <__d2b+0x62>
 8007e62:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007e66:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e6a:	6038      	str	r0, [r7, #0]
 8007e6c:	6918      	ldr	r0, [r3, #16]
 8007e6e:	f7ff fd2f 	bl	80078d0 <__hi0bits>
 8007e72:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007e76:	6031      	str	r1, [r6, #0]
 8007e78:	e7e1      	b.n	8007e3e <__d2b+0x72>
 8007e7a:	bf00      	nop
 8007e7c:	08009027 	.word	0x08009027
 8007e80:	08009038 	.word	0x08009038

08007e84 <_calloc_r>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	fba1 5402 	umull	r5, r4, r1, r2
 8007e8a:	b934      	cbnz	r4, 8007e9a <_calloc_r+0x16>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	f000 f875 	bl	8007f7c <_malloc_r>
 8007e92:	4606      	mov	r6, r0
 8007e94:	b928      	cbnz	r0, 8007ea2 <_calloc_r+0x1e>
 8007e96:	4630      	mov	r0, r6
 8007e98:	bd70      	pop	{r4, r5, r6, pc}
 8007e9a:	220c      	movs	r2, #12
 8007e9c:	2600      	movs	r6, #0
 8007e9e:	6002      	str	r2, [r0, #0]
 8007ea0:	e7f9      	b.n	8007e96 <_calloc_r+0x12>
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	f7fe f939 	bl	800611c <memset>
 8007eaa:	e7f4      	b.n	8007e96 <_calloc_r+0x12>

08007eac <_free_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4605      	mov	r5, r0
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	d040      	beq.n	8007f36 <_free_r+0x8a>
 8007eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb8:	1f0c      	subs	r4, r1, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bfb8      	it	lt
 8007ebe:	18e4      	addlt	r4, r4, r3
 8007ec0:	f000 fa98 	bl	80083f4 <__malloc_lock>
 8007ec4:	4a1c      	ldr	r2, [pc, #112]	; (8007f38 <_free_r+0x8c>)
 8007ec6:	6813      	ldr	r3, [r2, #0]
 8007ec8:	b933      	cbnz	r3, 8007ed8 <_free_r+0x2c>
 8007eca:	6063      	str	r3, [r4, #4]
 8007ecc:	6014      	str	r4, [r2, #0]
 8007ece:	4628      	mov	r0, r5
 8007ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ed4:	f000 ba94 	b.w	8008400 <__malloc_unlock>
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	d908      	bls.n	8007eee <_free_r+0x42>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	1821      	adds	r1, r4, r0
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	bf01      	itttt	eq
 8007ee4:	6819      	ldreq	r1, [r3, #0]
 8007ee6:	685b      	ldreq	r3, [r3, #4]
 8007ee8:	1809      	addeq	r1, r1, r0
 8007eea:	6021      	streq	r1, [r4, #0]
 8007eec:	e7ed      	b.n	8007eca <_free_r+0x1e>
 8007eee:	461a      	mov	r2, r3
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	b10b      	cbz	r3, 8007ef8 <_free_r+0x4c>
 8007ef4:	42a3      	cmp	r3, r4
 8007ef6:	d9fa      	bls.n	8007eee <_free_r+0x42>
 8007ef8:	6811      	ldr	r1, [r2, #0]
 8007efa:	1850      	adds	r0, r2, r1
 8007efc:	42a0      	cmp	r0, r4
 8007efe:	d10b      	bne.n	8007f18 <_free_r+0x6c>
 8007f00:	6820      	ldr	r0, [r4, #0]
 8007f02:	4401      	add	r1, r0
 8007f04:	1850      	adds	r0, r2, r1
 8007f06:	4283      	cmp	r3, r0
 8007f08:	6011      	str	r1, [r2, #0]
 8007f0a:	d1e0      	bne.n	8007ece <_free_r+0x22>
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	4401      	add	r1, r0
 8007f12:	6011      	str	r1, [r2, #0]
 8007f14:	6053      	str	r3, [r2, #4]
 8007f16:	e7da      	b.n	8007ece <_free_r+0x22>
 8007f18:	d902      	bls.n	8007f20 <_free_r+0x74>
 8007f1a:	230c      	movs	r3, #12
 8007f1c:	602b      	str	r3, [r5, #0]
 8007f1e:	e7d6      	b.n	8007ece <_free_r+0x22>
 8007f20:	6820      	ldr	r0, [r4, #0]
 8007f22:	1821      	adds	r1, r4, r0
 8007f24:	428b      	cmp	r3, r1
 8007f26:	bf01      	itttt	eq
 8007f28:	6819      	ldreq	r1, [r3, #0]
 8007f2a:	685b      	ldreq	r3, [r3, #4]
 8007f2c:	1809      	addeq	r1, r1, r0
 8007f2e:	6021      	streq	r1, [r4, #0]
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	6054      	str	r4, [r2, #4]
 8007f34:	e7cb      	b.n	8007ece <_free_r+0x22>
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	20000510 	.word	0x20000510

08007f3c <sbrk_aligned>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	4e0e      	ldr	r6, [pc, #56]	; (8007f78 <sbrk_aligned+0x3c>)
 8007f40:	460c      	mov	r4, r1
 8007f42:	6831      	ldr	r1, [r6, #0]
 8007f44:	4605      	mov	r5, r0
 8007f46:	b911      	cbnz	r1, 8007f4e <sbrk_aligned+0x12>
 8007f48:	f000 f9e8 	bl	800831c <_sbrk_r>
 8007f4c:	6030      	str	r0, [r6, #0]
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 f9e3 	bl	800831c <_sbrk_r>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d00a      	beq.n	8007f70 <sbrk_aligned+0x34>
 8007f5a:	1cc4      	adds	r4, r0, #3
 8007f5c:	f024 0403 	bic.w	r4, r4, #3
 8007f60:	42a0      	cmp	r0, r4
 8007f62:	d007      	beq.n	8007f74 <sbrk_aligned+0x38>
 8007f64:	1a21      	subs	r1, r4, r0
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 f9d8 	bl	800831c <_sbrk_r>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d101      	bne.n	8007f74 <sbrk_aligned+0x38>
 8007f70:	f04f 34ff 	mov.w	r4, #4294967295
 8007f74:	4620      	mov	r0, r4
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	20000514 	.word	0x20000514

08007f7c <_malloc_r>:
 8007f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f80:	1ccd      	adds	r5, r1, #3
 8007f82:	f025 0503 	bic.w	r5, r5, #3
 8007f86:	3508      	adds	r5, #8
 8007f88:	2d0c      	cmp	r5, #12
 8007f8a:	bf38      	it	cc
 8007f8c:	250c      	movcc	r5, #12
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	4607      	mov	r7, r0
 8007f92:	db01      	blt.n	8007f98 <_malloc_r+0x1c>
 8007f94:	42a9      	cmp	r1, r5
 8007f96:	d905      	bls.n	8007fa4 <_malloc_r+0x28>
 8007f98:	230c      	movs	r3, #12
 8007f9a:	2600      	movs	r6, #0
 8007f9c:	603b      	str	r3, [r7, #0]
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa4:	4e2e      	ldr	r6, [pc, #184]	; (8008060 <_malloc_r+0xe4>)
 8007fa6:	f000 fa25 	bl	80083f4 <__malloc_lock>
 8007faa:	6833      	ldr	r3, [r6, #0]
 8007fac:	461c      	mov	r4, r3
 8007fae:	bb34      	cbnz	r4, 8007ffe <_malloc_r+0x82>
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	f7ff ffc2 	bl	8007f3c <sbrk_aligned>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	4604      	mov	r4, r0
 8007fbc:	d14d      	bne.n	800805a <_malloc_r+0xde>
 8007fbe:	6834      	ldr	r4, [r6, #0]
 8007fc0:	4626      	mov	r6, r4
 8007fc2:	2e00      	cmp	r6, #0
 8007fc4:	d140      	bne.n	8008048 <_malloc_r+0xcc>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4638      	mov	r0, r7
 8007fcc:	eb04 0803 	add.w	r8, r4, r3
 8007fd0:	f000 f9a4 	bl	800831c <_sbrk_r>
 8007fd4:	4580      	cmp	r8, r0
 8007fd6:	d13a      	bne.n	800804e <_malloc_r+0xd2>
 8007fd8:	6821      	ldr	r1, [r4, #0]
 8007fda:	3503      	adds	r5, #3
 8007fdc:	1a6d      	subs	r5, r5, r1
 8007fde:	f025 0503 	bic.w	r5, r5, #3
 8007fe2:	3508      	adds	r5, #8
 8007fe4:	2d0c      	cmp	r5, #12
 8007fe6:	bf38      	it	cc
 8007fe8:	250c      	movcc	r5, #12
 8007fea:	4638      	mov	r0, r7
 8007fec:	4629      	mov	r1, r5
 8007fee:	f7ff ffa5 	bl	8007f3c <sbrk_aligned>
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d02b      	beq.n	800804e <_malloc_r+0xd2>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	442b      	add	r3, r5
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	e00e      	b.n	800801c <_malloc_r+0xa0>
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	1b52      	subs	r2, r2, r5
 8008002:	d41e      	bmi.n	8008042 <_malloc_r+0xc6>
 8008004:	2a0b      	cmp	r2, #11
 8008006:	d916      	bls.n	8008036 <_malloc_r+0xba>
 8008008:	1961      	adds	r1, r4, r5
 800800a:	42a3      	cmp	r3, r4
 800800c:	6025      	str	r5, [r4, #0]
 800800e:	bf18      	it	ne
 8008010:	6059      	strne	r1, [r3, #4]
 8008012:	6863      	ldr	r3, [r4, #4]
 8008014:	bf08      	it	eq
 8008016:	6031      	streq	r1, [r6, #0]
 8008018:	5162      	str	r2, [r4, r5]
 800801a:	604b      	str	r3, [r1, #4]
 800801c:	4638      	mov	r0, r7
 800801e:	f104 060b 	add.w	r6, r4, #11
 8008022:	f000 f9ed 	bl	8008400 <__malloc_unlock>
 8008026:	f026 0607 	bic.w	r6, r6, #7
 800802a:	1d23      	adds	r3, r4, #4
 800802c:	1af2      	subs	r2, r6, r3
 800802e:	d0b6      	beq.n	8007f9e <_malloc_r+0x22>
 8008030:	1b9b      	subs	r3, r3, r6
 8008032:	50a3      	str	r3, [r4, r2]
 8008034:	e7b3      	b.n	8007f9e <_malloc_r+0x22>
 8008036:	6862      	ldr	r2, [r4, #4]
 8008038:	42a3      	cmp	r3, r4
 800803a:	bf0c      	ite	eq
 800803c:	6032      	streq	r2, [r6, #0]
 800803e:	605a      	strne	r2, [r3, #4]
 8008040:	e7ec      	b.n	800801c <_malloc_r+0xa0>
 8008042:	4623      	mov	r3, r4
 8008044:	6864      	ldr	r4, [r4, #4]
 8008046:	e7b2      	b.n	8007fae <_malloc_r+0x32>
 8008048:	4634      	mov	r4, r6
 800804a:	6876      	ldr	r6, [r6, #4]
 800804c:	e7b9      	b.n	8007fc2 <_malloc_r+0x46>
 800804e:	230c      	movs	r3, #12
 8008050:	4638      	mov	r0, r7
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	f000 f9d4 	bl	8008400 <__malloc_unlock>
 8008058:	e7a1      	b.n	8007f9e <_malloc_r+0x22>
 800805a:	6025      	str	r5, [r4, #0]
 800805c:	e7de      	b.n	800801c <_malloc_r+0xa0>
 800805e:	bf00      	nop
 8008060:	20000510 	.word	0x20000510

08008064 <__ssputs_r>:
 8008064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008068:	688e      	ldr	r6, [r1, #8]
 800806a:	4682      	mov	sl, r0
 800806c:	429e      	cmp	r6, r3
 800806e:	460c      	mov	r4, r1
 8008070:	4690      	mov	r8, r2
 8008072:	461f      	mov	r7, r3
 8008074:	d838      	bhi.n	80080e8 <__ssputs_r+0x84>
 8008076:	898a      	ldrh	r2, [r1, #12]
 8008078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800807c:	d032      	beq.n	80080e4 <__ssputs_r+0x80>
 800807e:	6825      	ldr	r5, [r4, #0]
 8008080:	6909      	ldr	r1, [r1, #16]
 8008082:	3301      	adds	r3, #1
 8008084:	eba5 0901 	sub.w	r9, r5, r1
 8008088:	6965      	ldr	r5, [r4, #20]
 800808a:	444b      	add	r3, r9
 800808c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008094:	106d      	asrs	r5, r5, #1
 8008096:	429d      	cmp	r5, r3
 8008098:	bf38      	it	cc
 800809a:	461d      	movcc	r5, r3
 800809c:	0553      	lsls	r3, r2, #21
 800809e:	d531      	bpl.n	8008104 <__ssputs_r+0xa0>
 80080a0:	4629      	mov	r1, r5
 80080a2:	f7ff ff6b 	bl	8007f7c <_malloc_r>
 80080a6:	4606      	mov	r6, r0
 80080a8:	b950      	cbnz	r0, 80080c0 <__ssputs_r+0x5c>
 80080aa:	230c      	movs	r3, #12
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	f8ca 3000 	str.w	r3, [sl]
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c0:	464a      	mov	r2, r9
 80080c2:	6921      	ldr	r1, [r4, #16]
 80080c4:	f7fe f81c 	bl	8006100 <memcpy>
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d2:	81a3      	strh	r3, [r4, #12]
 80080d4:	6126      	str	r6, [r4, #16]
 80080d6:	444e      	add	r6, r9
 80080d8:	6026      	str	r6, [r4, #0]
 80080da:	463e      	mov	r6, r7
 80080dc:	6165      	str	r5, [r4, #20]
 80080de:	eba5 0509 	sub.w	r5, r5, r9
 80080e2:	60a5      	str	r5, [r4, #8]
 80080e4:	42be      	cmp	r6, r7
 80080e6:	d900      	bls.n	80080ea <__ssputs_r+0x86>
 80080e8:	463e      	mov	r6, r7
 80080ea:	4632      	mov	r2, r6
 80080ec:	4641      	mov	r1, r8
 80080ee:	6820      	ldr	r0, [r4, #0]
 80080f0:	f000 f966 	bl	80083c0 <memmove>
 80080f4:	68a3      	ldr	r3, [r4, #8]
 80080f6:	2000      	movs	r0, #0
 80080f8:	1b9b      	subs	r3, r3, r6
 80080fa:	60a3      	str	r3, [r4, #8]
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	4433      	add	r3, r6
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	e7db      	b.n	80080bc <__ssputs_r+0x58>
 8008104:	462a      	mov	r2, r5
 8008106:	f000 f981 	bl	800840c <_realloc_r>
 800810a:	4606      	mov	r6, r0
 800810c:	2800      	cmp	r0, #0
 800810e:	d1e1      	bne.n	80080d4 <__ssputs_r+0x70>
 8008110:	4650      	mov	r0, sl
 8008112:	6921      	ldr	r1, [r4, #16]
 8008114:	f7ff feca 	bl	8007eac <_free_r>
 8008118:	e7c7      	b.n	80080aa <__ssputs_r+0x46>
	...

0800811c <_svfiprintf_r>:
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	4698      	mov	r8, r3
 8008122:	898b      	ldrh	r3, [r1, #12]
 8008124:	4607      	mov	r7, r0
 8008126:	061b      	lsls	r3, r3, #24
 8008128:	460d      	mov	r5, r1
 800812a:	4614      	mov	r4, r2
 800812c:	b09d      	sub	sp, #116	; 0x74
 800812e:	d50e      	bpl.n	800814e <_svfiprintf_r+0x32>
 8008130:	690b      	ldr	r3, [r1, #16]
 8008132:	b963      	cbnz	r3, 800814e <_svfiprintf_r+0x32>
 8008134:	2140      	movs	r1, #64	; 0x40
 8008136:	f7ff ff21 	bl	8007f7c <_malloc_r>
 800813a:	6028      	str	r0, [r5, #0]
 800813c:	6128      	str	r0, [r5, #16]
 800813e:	b920      	cbnz	r0, 800814a <_svfiprintf_r+0x2e>
 8008140:	230c      	movs	r3, #12
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e0d1      	b.n	80082ee <_svfiprintf_r+0x1d2>
 800814a:	2340      	movs	r3, #64	; 0x40
 800814c:	616b      	str	r3, [r5, #20]
 800814e:	2300      	movs	r3, #0
 8008150:	9309      	str	r3, [sp, #36]	; 0x24
 8008152:	2320      	movs	r3, #32
 8008154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008158:	2330      	movs	r3, #48	; 0x30
 800815a:	f04f 0901 	mov.w	r9, #1
 800815e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008308 <_svfiprintf_r+0x1ec>
 8008166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800816a:	4623      	mov	r3, r4
 800816c:	469a      	mov	sl, r3
 800816e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008172:	b10a      	cbz	r2, 8008178 <_svfiprintf_r+0x5c>
 8008174:	2a25      	cmp	r2, #37	; 0x25
 8008176:	d1f9      	bne.n	800816c <_svfiprintf_r+0x50>
 8008178:	ebba 0b04 	subs.w	fp, sl, r4
 800817c:	d00b      	beq.n	8008196 <_svfiprintf_r+0x7a>
 800817e:	465b      	mov	r3, fp
 8008180:	4622      	mov	r2, r4
 8008182:	4629      	mov	r1, r5
 8008184:	4638      	mov	r0, r7
 8008186:	f7ff ff6d 	bl	8008064 <__ssputs_r>
 800818a:	3001      	adds	r0, #1
 800818c:	f000 80aa 	beq.w	80082e4 <_svfiprintf_r+0x1c8>
 8008190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008192:	445a      	add	r2, fp
 8008194:	9209      	str	r2, [sp, #36]	; 0x24
 8008196:	f89a 3000 	ldrb.w	r3, [sl]
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80a2 	beq.w	80082e4 <_svfiprintf_r+0x1c8>
 80081a0:	2300      	movs	r3, #0
 80081a2:	f04f 32ff 	mov.w	r2, #4294967295
 80081a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081aa:	f10a 0a01 	add.w	sl, sl, #1
 80081ae:	9304      	str	r3, [sp, #16]
 80081b0:	9307      	str	r3, [sp, #28]
 80081b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081b6:	931a      	str	r3, [sp, #104]	; 0x68
 80081b8:	4654      	mov	r4, sl
 80081ba:	2205      	movs	r2, #5
 80081bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c0:	4851      	ldr	r0, [pc, #324]	; (8008308 <_svfiprintf_r+0x1ec>)
 80081c2:	f7ff facf 	bl	8007764 <memchr>
 80081c6:	9a04      	ldr	r2, [sp, #16]
 80081c8:	b9d8      	cbnz	r0, 8008202 <_svfiprintf_r+0xe6>
 80081ca:	06d0      	lsls	r0, r2, #27
 80081cc:	bf44      	itt	mi
 80081ce:	2320      	movmi	r3, #32
 80081d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d4:	0711      	lsls	r1, r2, #28
 80081d6:	bf44      	itt	mi
 80081d8:	232b      	movmi	r3, #43	; 0x2b
 80081da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081de:	f89a 3000 	ldrb.w	r3, [sl]
 80081e2:	2b2a      	cmp	r3, #42	; 0x2a
 80081e4:	d015      	beq.n	8008212 <_svfiprintf_r+0xf6>
 80081e6:	4654      	mov	r4, sl
 80081e8:	2000      	movs	r0, #0
 80081ea:	f04f 0c0a 	mov.w	ip, #10
 80081ee:	9a07      	ldr	r2, [sp, #28]
 80081f0:	4621      	mov	r1, r4
 80081f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f6:	3b30      	subs	r3, #48	; 0x30
 80081f8:	2b09      	cmp	r3, #9
 80081fa:	d94e      	bls.n	800829a <_svfiprintf_r+0x17e>
 80081fc:	b1b0      	cbz	r0, 800822c <_svfiprintf_r+0x110>
 80081fe:	9207      	str	r2, [sp, #28]
 8008200:	e014      	b.n	800822c <_svfiprintf_r+0x110>
 8008202:	eba0 0308 	sub.w	r3, r0, r8
 8008206:	fa09 f303 	lsl.w	r3, r9, r3
 800820a:	4313      	orrs	r3, r2
 800820c:	46a2      	mov	sl, r4
 800820e:	9304      	str	r3, [sp, #16]
 8008210:	e7d2      	b.n	80081b8 <_svfiprintf_r+0x9c>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	1d19      	adds	r1, r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	9103      	str	r1, [sp, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	bfbb      	ittet	lt
 800821e:	425b      	neglt	r3, r3
 8008220:	f042 0202 	orrlt.w	r2, r2, #2
 8008224:	9307      	strge	r3, [sp, #28]
 8008226:	9307      	strlt	r3, [sp, #28]
 8008228:	bfb8      	it	lt
 800822a:	9204      	strlt	r2, [sp, #16]
 800822c:	7823      	ldrb	r3, [r4, #0]
 800822e:	2b2e      	cmp	r3, #46	; 0x2e
 8008230:	d10c      	bne.n	800824c <_svfiprintf_r+0x130>
 8008232:	7863      	ldrb	r3, [r4, #1]
 8008234:	2b2a      	cmp	r3, #42	; 0x2a
 8008236:	d135      	bne.n	80082a4 <_svfiprintf_r+0x188>
 8008238:	9b03      	ldr	r3, [sp, #12]
 800823a:	3402      	adds	r4, #2
 800823c:	1d1a      	adds	r2, r3, #4
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	9203      	str	r2, [sp, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	bfb8      	it	lt
 8008246:	f04f 33ff 	movlt.w	r3, #4294967295
 800824a:	9305      	str	r3, [sp, #20]
 800824c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800830c <_svfiprintf_r+0x1f0>
 8008250:	2203      	movs	r2, #3
 8008252:	4650      	mov	r0, sl
 8008254:	7821      	ldrb	r1, [r4, #0]
 8008256:	f7ff fa85 	bl	8007764 <memchr>
 800825a:	b140      	cbz	r0, 800826e <_svfiprintf_r+0x152>
 800825c:	2340      	movs	r3, #64	; 0x40
 800825e:	eba0 000a 	sub.w	r0, r0, sl
 8008262:	fa03 f000 	lsl.w	r0, r3, r0
 8008266:	9b04      	ldr	r3, [sp, #16]
 8008268:	3401      	adds	r4, #1
 800826a:	4303      	orrs	r3, r0
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008272:	2206      	movs	r2, #6
 8008274:	4826      	ldr	r0, [pc, #152]	; (8008310 <_svfiprintf_r+0x1f4>)
 8008276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800827a:	f7ff fa73 	bl	8007764 <memchr>
 800827e:	2800      	cmp	r0, #0
 8008280:	d038      	beq.n	80082f4 <_svfiprintf_r+0x1d8>
 8008282:	4b24      	ldr	r3, [pc, #144]	; (8008314 <_svfiprintf_r+0x1f8>)
 8008284:	bb1b      	cbnz	r3, 80082ce <_svfiprintf_r+0x1b2>
 8008286:	9b03      	ldr	r3, [sp, #12]
 8008288:	3307      	adds	r3, #7
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	3308      	adds	r3, #8
 8008290:	9303      	str	r3, [sp, #12]
 8008292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008294:	4433      	add	r3, r6
 8008296:	9309      	str	r3, [sp, #36]	; 0x24
 8008298:	e767      	b.n	800816a <_svfiprintf_r+0x4e>
 800829a:	460c      	mov	r4, r1
 800829c:	2001      	movs	r0, #1
 800829e:	fb0c 3202 	mla	r2, ip, r2, r3
 80082a2:	e7a5      	b.n	80081f0 <_svfiprintf_r+0xd4>
 80082a4:	2300      	movs	r3, #0
 80082a6:	f04f 0c0a 	mov.w	ip, #10
 80082aa:	4619      	mov	r1, r3
 80082ac:	3401      	adds	r4, #1
 80082ae:	9305      	str	r3, [sp, #20]
 80082b0:	4620      	mov	r0, r4
 80082b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082b6:	3a30      	subs	r2, #48	; 0x30
 80082b8:	2a09      	cmp	r2, #9
 80082ba:	d903      	bls.n	80082c4 <_svfiprintf_r+0x1a8>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0c5      	beq.n	800824c <_svfiprintf_r+0x130>
 80082c0:	9105      	str	r1, [sp, #20]
 80082c2:	e7c3      	b.n	800824c <_svfiprintf_r+0x130>
 80082c4:	4604      	mov	r4, r0
 80082c6:	2301      	movs	r3, #1
 80082c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80082cc:	e7f0      	b.n	80082b0 <_svfiprintf_r+0x194>
 80082ce:	ab03      	add	r3, sp, #12
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	462a      	mov	r2, r5
 80082d4:	4638      	mov	r0, r7
 80082d6:	4b10      	ldr	r3, [pc, #64]	; (8008318 <_svfiprintf_r+0x1fc>)
 80082d8:	a904      	add	r1, sp, #16
 80082da:	f7fd ffc5 	bl	8006268 <_printf_float>
 80082de:	1c42      	adds	r2, r0, #1
 80082e0:	4606      	mov	r6, r0
 80082e2:	d1d6      	bne.n	8008292 <_svfiprintf_r+0x176>
 80082e4:	89ab      	ldrh	r3, [r5, #12]
 80082e6:	065b      	lsls	r3, r3, #25
 80082e8:	f53f af2c 	bmi.w	8008144 <_svfiprintf_r+0x28>
 80082ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ee:	b01d      	add	sp, #116	; 0x74
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f4:	ab03      	add	r3, sp, #12
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	462a      	mov	r2, r5
 80082fa:	4638      	mov	r0, r7
 80082fc:	4b06      	ldr	r3, [pc, #24]	; (8008318 <_svfiprintf_r+0x1fc>)
 80082fe:	a904      	add	r1, sp, #16
 8008300:	f7fe fa4e 	bl	80067a0 <_printf_i>
 8008304:	e7eb      	b.n	80082de <_svfiprintf_r+0x1c2>
 8008306:	bf00      	nop
 8008308:	08009194 	.word	0x08009194
 800830c:	0800919a 	.word	0x0800919a
 8008310:	0800919e 	.word	0x0800919e
 8008314:	08006269 	.word	0x08006269
 8008318:	08008065 	.word	0x08008065

0800831c <_sbrk_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	2300      	movs	r3, #0
 8008320:	4d05      	ldr	r5, [pc, #20]	; (8008338 <_sbrk_r+0x1c>)
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	602b      	str	r3, [r5, #0]
 8008328:	f7fa f85c 	bl	80023e4 <_sbrk>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_sbrk_r+0x1a>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_sbrk_r+0x1a>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	20000518 	.word	0x20000518

0800833c <__assert_func>:
 800833c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800833e:	4614      	mov	r4, r2
 8008340:	461a      	mov	r2, r3
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <__assert_func+0x2c>)
 8008344:	4605      	mov	r5, r0
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68d8      	ldr	r0, [r3, #12]
 800834a:	b14c      	cbz	r4, 8008360 <__assert_func+0x24>
 800834c:	4b07      	ldr	r3, [pc, #28]	; (800836c <__assert_func+0x30>)
 800834e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008352:	9100      	str	r1, [sp, #0]
 8008354:	462b      	mov	r3, r5
 8008356:	4906      	ldr	r1, [pc, #24]	; (8008370 <__assert_func+0x34>)
 8008358:	f000 f80e 	bl	8008378 <fiprintf>
 800835c:	f000 faaa 	bl	80088b4 <abort>
 8008360:	4b04      	ldr	r3, [pc, #16]	; (8008374 <__assert_func+0x38>)
 8008362:	461c      	mov	r4, r3
 8008364:	e7f3      	b.n	800834e <__assert_func+0x12>
 8008366:	bf00      	nop
 8008368:	20000044 	.word	0x20000044
 800836c:	080091a5 	.word	0x080091a5
 8008370:	080091b2 	.word	0x080091b2
 8008374:	080091e0 	.word	0x080091e0

08008378 <fiprintf>:
 8008378:	b40e      	push	{r1, r2, r3}
 800837a:	b503      	push	{r0, r1, lr}
 800837c:	4601      	mov	r1, r0
 800837e:	ab03      	add	r3, sp, #12
 8008380:	4805      	ldr	r0, [pc, #20]	; (8008398 <fiprintf+0x20>)
 8008382:	f853 2b04 	ldr.w	r2, [r3], #4
 8008386:	6800      	ldr	r0, [r0, #0]
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	f000 f895 	bl	80084b8 <_vfiprintf_r>
 800838e:	b002      	add	sp, #8
 8008390:	f85d eb04 	ldr.w	lr, [sp], #4
 8008394:	b003      	add	sp, #12
 8008396:	4770      	bx	lr
 8008398:	20000044 	.word	0x20000044

0800839c <__ascii_mbtowc>:
 800839c:	b082      	sub	sp, #8
 800839e:	b901      	cbnz	r1, 80083a2 <__ascii_mbtowc+0x6>
 80083a0:	a901      	add	r1, sp, #4
 80083a2:	b142      	cbz	r2, 80083b6 <__ascii_mbtowc+0x1a>
 80083a4:	b14b      	cbz	r3, 80083ba <__ascii_mbtowc+0x1e>
 80083a6:	7813      	ldrb	r3, [r2, #0]
 80083a8:	600b      	str	r3, [r1, #0]
 80083aa:	7812      	ldrb	r2, [r2, #0]
 80083ac:	1e10      	subs	r0, r2, #0
 80083ae:	bf18      	it	ne
 80083b0:	2001      	movne	r0, #1
 80083b2:	b002      	add	sp, #8
 80083b4:	4770      	bx	lr
 80083b6:	4610      	mov	r0, r2
 80083b8:	e7fb      	b.n	80083b2 <__ascii_mbtowc+0x16>
 80083ba:	f06f 0001 	mvn.w	r0, #1
 80083be:	e7f8      	b.n	80083b2 <__ascii_mbtowc+0x16>

080083c0 <memmove>:
 80083c0:	4288      	cmp	r0, r1
 80083c2:	b510      	push	{r4, lr}
 80083c4:	eb01 0402 	add.w	r4, r1, r2
 80083c8:	d902      	bls.n	80083d0 <memmove+0x10>
 80083ca:	4284      	cmp	r4, r0
 80083cc:	4623      	mov	r3, r4
 80083ce:	d807      	bhi.n	80083e0 <memmove+0x20>
 80083d0:	1e43      	subs	r3, r0, #1
 80083d2:	42a1      	cmp	r1, r4
 80083d4:	d008      	beq.n	80083e8 <memmove+0x28>
 80083d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083de:	e7f8      	b.n	80083d2 <memmove+0x12>
 80083e0:	4601      	mov	r1, r0
 80083e2:	4402      	add	r2, r0
 80083e4:	428a      	cmp	r2, r1
 80083e6:	d100      	bne.n	80083ea <memmove+0x2a>
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083f2:	e7f7      	b.n	80083e4 <memmove+0x24>

080083f4 <__malloc_lock>:
 80083f4:	4801      	ldr	r0, [pc, #4]	; (80083fc <__malloc_lock+0x8>)
 80083f6:	f000 bc19 	b.w	8008c2c <__retarget_lock_acquire_recursive>
 80083fa:	bf00      	nop
 80083fc:	2000051c 	.word	0x2000051c

08008400 <__malloc_unlock>:
 8008400:	4801      	ldr	r0, [pc, #4]	; (8008408 <__malloc_unlock+0x8>)
 8008402:	f000 bc14 	b.w	8008c2e <__retarget_lock_release_recursive>
 8008406:	bf00      	nop
 8008408:	2000051c 	.word	0x2000051c

0800840c <_realloc_r>:
 800840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008410:	4680      	mov	r8, r0
 8008412:	4614      	mov	r4, r2
 8008414:	460e      	mov	r6, r1
 8008416:	b921      	cbnz	r1, 8008422 <_realloc_r+0x16>
 8008418:	4611      	mov	r1, r2
 800841a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800841e:	f7ff bdad 	b.w	8007f7c <_malloc_r>
 8008422:	b92a      	cbnz	r2, 8008430 <_realloc_r+0x24>
 8008424:	f7ff fd42 	bl	8007eac <_free_r>
 8008428:	4625      	mov	r5, r4
 800842a:	4628      	mov	r0, r5
 800842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008430:	f000 fc64 	bl	8008cfc <_malloc_usable_size_r>
 8008434:	4284      	cmp	r4, r0
 8008436:	4607      	mov	r7, r0
 8008438:	d802      	bhi.n	8008440 <_realloc_r+0x34>
 800843a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800843e:	d812      	bhi.n	8008466 <_realloc_r+0x5a>
 8008440:	4621      	mov	r1, r4
 8008442:	4640      	mov	r0, r8
 8008444:	f7ff fd9a 	bl	8007f7c <_malloc_r>
 8008448:	4605      	mov	r5, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d0ed      	beq.n	800842a <_realloc_r+0x1e>
 800844e:	42bc      	cmp	r4, r7
 8008450:	4622      	mov	r2, r4
 8008452:	4631      	mov	r1, r6
 8008454:	bf28      	it	cs
 8008456:	463a      	movcs	r2, r7
 8008458:	f7fd fe52 	bl	8006100 <memcpy>
 800845c:	4631      	mov	r1, r6
 800845e:	4640      	mov	r0, r8
 8008460:	f7ff fd24 	bl	8007eac <_free_r>
 8008464:	e7e1      	b.n	800842a <_realloc_r+0x1e>
 8008466:	4635      	mov	r5, r6
 8008468:	e7df      	b.n	800842a <_realloc_r+0x1e>

0800846a <__sfputc_r>:
 800846a:	6893      	ldr	r3, [r2, #8]
 800846c:	b410      	push	{r4}
 800846e:	3b01      	subs	r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	6093      	str	r3, [r2, #8]
 8008474:	da07      	bge.n	8008486 <__sfputc_r+0x1c>
 8008476:	6994      	ldr	r4, [r2, #24]
 8008478:	42a3      	cmp	r3, r4
 800847a:	db01      	blt.n	8008480 <__sfputc_r+0x16>
 800847c:	290a      	cmp	r1, #10
 800847e:	d102      	bne.n	8008486 <__sfputc_r+0x1c>
 8008480:	bc10      	pop	{r4}
 8008482:	f000 b949 	b.w	8008718 <__swbuf_r>
 8008486:	6813      	ldr	r3, [r2, #0]
 8008488:	1c58      	adds	r0, r3, #1
 800848a:	6010      	str	r0, [r2, #0]
 800848c:	7019      	strb	r1, [r3, #0]
 800848e:	4608      	mov	r0, r1
 8008490:	bc10      	pop	{r4}
 8008492:	4770      	bx	lr

08008494 <__sfputs_r>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	4606      	mov	r6, r0
 8008498:	460f      	mov	r7, r1
 800849a:	4614      	mov	r4, r2
 800849c:	18d5      	adds	r5, r2, r3
 800849e:	42ac      	cmp	r4, r5
 80084a0:	d101      	bne.n	80084a6 <__sfputs_r+0x12>
 80084a2:	2000      	movs	r0, #0
 80084a4:	e007      	b.n	80084b6 <__sfputs_r+0x22>
 80084a6:	463a      	mov	r2, r7
 80084a8:	4630      	mov	r0, r6
 80084aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ae:	f7ff ffdc 	bl	800846a <__sfputc_r>
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	d1f3      	bne.n	800849e <__sfputs_r+0xa>
 80084b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084b8 <_vfiprintf_r>:
 80084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084bc:	460d      	mov	r5, r1
 80084be:	4614      	mov	r4, r2
 80084c0:	4698      	mov	r8, r3
 80084c2:	4606      	mov	r6, r0
 80084c4:	b09d      	sub	sp, #116	; 0x74
 80084c6:	b118      	cbz	r0, 80084d0 <_vfiprintf_r+0x18>
 80084c8:	6983      	ldr	r3, [r0, #24]
 80084ca:	b90b      	cbnz	r3, 80084d0 <_vfiprintf_r+0x18>
 80084cc:	f000 fb10 	bl	8008af0 <__sinit>
 80084d0:	4b89      	ldr	r3, [pc, #548]	; (80086f8 <_vfiprintf_r+0x240>)
 80084d2:	429d      	cmp	r5, r3
 80084d4:	d11b      	bne.n	800850e <_vfiprintf_r+0x56>
 80084d6:	6875      	ldr	r5, [r6, #4]
 80084d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084da:	07d9      	lsls	r1, r3, #31
 80084dc:	d405      	bmi.n	80084ea <_vfiprintf_r+0x32>
 80084de:	89ab      	ldrh	r3, [r5, #12]
 80084e0:	059a      	lsls	r2, r3, #22
 80084e2:	d402      	bmi.n	80084ea <_vfiprintf_r+0x32>
 80084e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084e6:	f000 fba1 	bl	8008c2c <__retarget_lock_acquire_recursive>
 80084ea:	89ab      	ldrh	r3, [r5, #12]
 80084ec:	071b      	lsls	r3, r3, #28
 80084ee:	d501      	bpl.n	80084f4 <_vfiprintf_r+0x3c>
 80084f0:	692b      	ldr	r3, [r5, #16]
 80084f2:	b9eb      	cbnz	r3, 8008530 <_vfiprintf_r+0x78>
 80084f4:	4629      	mov	r1, r5
 80084f6:	4630      	mov	r0, r6
 80084f8:	f000 f96e 	bl	80087d8 <__swsetup_r>
 80084fc:	b1c0      	cbz	r0, 8008530 <_vfiprintf_r+0x78>
 80084fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008500:	07dc      	lsls	r4, r3, #31
 8008502:	d50e      	bpl.n	8008522 <_vfiprintf_r+0x6a>
 8008504:	f04f 30ff 	mov.w	r0, #4294967295
 8008508:	b01d      	add	sp, #116	; 0x74
 800850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850e:	4b7b      	ldr	r3, [pc, #492]	; (80086fc <_vfiprintf_r+0x244>)
 8008510:	429d      	cmp	r5, r3
 8008512:	d101      	bne.n	8008518 <_vfiprintf_r+0x60>
 8008514:	68b5      	ldr	r5, [r6, #8]
 8008516:	e7df      	b.n	80084d8 <_vfiprintf_r+0x20>
 8008518:	4b79      	ldr	r3, [pc, #484]	; (8008700 <_vfiprintf_r+0x248>)
 800851a:	429d      	cmp	r5, r3
 800851c:	bf08      	it	eq
 800851e:	68f5      	ldreq	r5, [r6, #12]
 8008520:	e7da      	b.n	80084d8 <_vfiprintf_r+0x20>
 8008522:	89ab      	ldrh	r3, [r5, #12]
 8008524:	0598      	lsls	r0, r3, #22
 8008526:	d4ed      	bmi.n	8008504 <_vfiprintf_r+0x4c>
 8008528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800852a:	f000 fb80 	bl	8008c2e <__retarget_lock_release_recursive>
 800852e:	e7e9      	b.n	8008504 <_vfiprintf_r+0x4c>
 8008530:	2300      	movs	r3, #0
 8008532:	9309      	str	r3, [sp, #36]	; 0x24
 8008534:	2320      	movs	r3, #32
 8008536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800853a:	2330      	movs	r3, #48	; 0x30
 800853c:	f04f 0901 	mov.w	r9, #1
 8008540:	f8cd 800c 	str.w	r8, [sp, #12]
 8008544:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008704 <_vfiprintf_r+0x24c>
 8008548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800854c:	4623      	mov	r3, r4
 800854e:	469a      	mov	sl, r3
 8008550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008554:	b10a      	cbz	r2, 800855a <_vfiprintf_r+0xa2>
 8008556:	2a25      	cmp	r2, #37	; 0x25
 8008558:	d1f9      	bne.n	800854e <_vfiprintf_r+0x96>
 800855a:	ebba 0b04 	subs.w	fp, sl, r4
 800855e:	d00b      	beq.n	8008578 <_vfiprintf_r+0xc0>
 8008560:	465b      	mov	r3, fp
 8008562:	4622      	mov	r2, r4
 8008564:	4629      	mov	r1, r5
 8008566:	4630      	mov	r0, r6
 8008568:	f7ff ff94 	bl	8008494 <__sfputs_r>
 800856c:	3001      	adds	r0, #1
 800856e:	f000 80aa 	beq.w	80086c6 <_vfiprintf_r+0x20e>
 8008572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008574:	445a      	add	r2, fp
 8008576:	9209      	str	r2, [sp, #36]	; 0x24
 8008578:	f89a 3000 	ldrb.w	r3, [sl]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 80a2 	beq.w	80086c6 <_vfiprintf_r+0x20e>
 8008582:	2300      	movs	r3, #0
 8008584:	f04f 32ff 	mov.w	r2, #4294967295
 8008588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800858c:	f10a 0a01 	add.w	sl, sl, #1
 8008590:	9304      	str	r3, [sp, #16]
 8008592:	9307      	str	r3, [sp, #28]
 8008594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008598:	931a      	str	r3, [sp, #104]	; 0x68
 800859a:	4654      	mov	r4, sl
 800859c:	2205      	movs	r2, #5
 800859e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a2:	4858      	ldr	r0, [pc, #352]	; (8008704 <_vfiprintf_r+0x24c>)
 80085a4:	f7ff f8de 	bl	8007764 <memchr>
 80085a8:	9a04      	ldr	r2, [sp, #16]
 80085aa:	b9d8      	cbnz	r0, 80085e4 <_vfiprintf_r+0x12c>
 80085ac:	06d1      	lsls	r1, r2, #27
 80085ae:	bf44      	itt	mi
 80085b0:	2320      	movmi	r3, #32
 80085b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b6:	0713      	lsls	r3, r2, #28
 80085b8:	bf44      	itt	mi
 80085ba:	232b      	movmi	r3, #43	; 0x2b
 80085bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c0:	f89a 3000 	ldrb.w	r3, [sl]
 80085c4:	2b2a      	cmp	r3, #42	; 0x2a
 80085c6:	d015      	beq.n	80085f4 <_vfiprintf_r+0x13c>
 80085c8:	4654      	mov	r4, sl
 80085ca:	2000      	movs	r0, #0
 80085cc:	f04f 0c0a 	mov.w	ip, #10
 80085d0:	9a07      	ldr	r2, [sp, #28]
 80085d2:	4621      	mov	r1, r4
 80085d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085d8:	3b30      	subs	r3, #48	; 0x30
 80085da:	2b09      	cmp	r3, #9
 80085dc:	d94e      	bls.n	800867c <_vfiprintf_r+0x1c4>
 80085de:	b1b0      	cbz	r0, 800860e <_vfiprintf_r+0x156>
 80085e0:	9207      	str	r2, [sp, #28]
 80085e2:	e014      	b.n	800860e <_vfiprintf_r+0x156>
 80085e4:	eba0 0308 	sub.w	r3, r0, r8
 80085e8:	fa09 f303 	lsl.w	r3, r9, r3
 80085ec:	4313      	orrs	r3, r2
 80085ee:	46a2      	mov	sl, r4
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	e7d2      	b.n	800859a <_vfiprintf_r+0xe2>
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	1d19      	adds	r1, r3, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	9103      	str	r1, [sp, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bfbb      	ittet	lt
 8008600:	425b      	neglt	r3, r3
 8008602:	f042 0202 	orrlt.w	r2, r2, #2
 8008606:	9307      	strge	r3, [sp, #28]
 8008608:	9307      	strlt	r3, [sp, #28]
 800860a:	bfb8      	it	lt
 800860c:	9204      	strlt	r2, [sp, #16]
 800860e:	7823      	ldrb	r3, [r4, #0]
 8008610:	2b2e      	cmp	r3, #46	; 0x2e
 8008612:	d10c      	bne.n	800862e <_vfiprintf_r+0x176>
 8008614:	7863      	ldrb	r3, [r4, #1]
 8008616:	2b2a      	cmp	r3, #42	; 0x2a
 8008618:	d135      	bne.n	8008686 <_vfiprintf_r+0x1ce>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	3402      	adds	r4, #2
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	9203      	str	r2, [sp, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfb8      	it	lt
 8008628:	f04f 33ff 	movlt.w	r3, #4294967295
 800862c:	9305      	str	r3, [sp, #20]
 800862e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008708 <_vfiprintf_r+0x250>
 8008632:	2203      	movs	r2, #3
 8008634:	4650      	mov	r0, sl
 8008636:	7821      	ldrb	r1, [r4, #0]
 8008638:	f7ff f894 	bl	8007764 <memchr>
 800863c:	b140      	cbz	r0, 8008650 <_vfiprintf_r+0x198>
 800863e:	2340      	movs	r3, #64	; 0x40
 8008640:	eba0 000a 	sub.w	r0, r0, sl
 8008644:	fa03 f000 	lsl.w	r0, r3, r0
 8008648:	9b04      	ldr	r3, [sp, #16]
 800864a:	3401      	adds	r4, #1
 800864c:	4303      	orrs	r3, r0
 800864e:	9304      	str	r3, [sp, #16]
 8008650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008654:	2206      	movs	r2, #6
 8008656:	482d      	ldr	r0, [pc, #180]	; (800870c <_vfiprintf_r+0x254>)
 8008658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800865c:	f7ff f882 	bl	8007764 <memchr>
 8008660:	2800      	cmp	r0, #0
 8008662:	d03f      	beq.n	80086e4 <_vfiprintf_r+0x22c>
 8008664:	4b2a      	ldr	r3, [pc, #168]	; (8008710 <_vfiprintf_r+0x258>)
 8008666:	bb1b      	cbnz	r3, 80086b0 <_vfiprintf_r+0x1f8>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	3307      	adds	r3, #7
 800866c:	f023 0307 	bic.w	r3, r3, #7
 8008670:	3308      	adds	r3, #8
 8008672:	9303      	str	r3, [sp, #12]
 8008674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008676:	443b      	add	r3, r7
 8008678:	9309      	str	r3, [sp, #36]	; 0x24
 800867a:	e767      	b.n	800854c <_vfiprintf_r+0x94>
 800867c:	460c      	mov	r4, r1
 800867e:	2001      	movs	r0, #1
 8008680:	fb0c 3202 	mla	r2, ip, r2, r3
 8008684:	e7a5      	b.n	80085d2 <_vfiprintf_r+0x11a>
 8008686:	2300      	movs	r3, #0
 8008688:	f04f 0c0a 	mov.w	ip, #10
 800868c:	4619      	mov	r1, r3
 800868e:	3401      	adds	r4, #1
 8008690:	9305      	str	r3, [sp, #20]
 8008692:	4620      	mov	r0, r4
 8008694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008698:	3a30      	subs	r2, #48	; 0x30
 800869a:	2a09      	cmp	r2, #9
 800869c:	d903      	bls.n	80086a6 <_vfiprintf_r+0x1ee>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0c5      	beq.n	800862e <_vfiprintf_r+0x176>
 80086a2:	9105      	str	r1, [sp, #20]
 80086a4:	e7c3      	b.n	800862e <_vfiprintf_r+0x176>
 80086a6:	4604      	mov	r4, r0
 80086a8:	2301      	movs	r3, #1
 80086aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80086ae:	e7f0      	b.n	8008692 <_vfiprintf_r+0x1da>
 80086b0:	ab03      	add	r3, sp, #12
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	462a      	mov	r2, r5
 80086b6:	4630      	mov	r0, r6
 80086b8:	4b16      	ldr	r3, [pc, #88]	; (8008714 <_vfiprintf_r+0x25c>)
 80086ba:	a904      	add	r1, sp, #16
 80086bc:	f7fd fdd4 	bl	8006268 <_printf_float>
 80086c0:	4607      	mov	r7, r0
 80086c2:	1c78      	adds	r0, r7, #1
 80086c4:	d1d6      	bne.n	8008674 <_vfiprintf_r+0x1bc>
 80086c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086c8:	07d9      	lsls	r1, r3, #31
 80086ca:	d405      	bmi.n	80086d8 <_vfiprintf_r+0x220>
 80086cc:	89ab      	ldrh	r3, [r5, #12]
 80086ce:	059a      	lsls	r2, r3, #22
 80086d0:	d402      	bmi.n	80086d8 <_vfiprintf_r+0x220>
 80086d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086d4:	f000 faab 	bl	8008c2e <__retarget_lock_release_recursive>
 80086d8:	89ab      	ldrh	r3, [r5, #12]
 80086da:	065b      	lsls	r3, r3, #25
 80086dc:	f53f af12 	bmi.w	8008504 <_vfiprintf_r+0x4c>
 80086e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086e2:	e711      	b.n	8008508 <_vfiprintf_r+0x50>
 80086e4:	ab03      	add	r3, sp, #12
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	462a      	mov	r2, r5
 80086ea:	4630      	mov	r0, r6
 80086ec:	4b09      	ldr	r3, [pc, #36]	; (8008714 <_vfiprintf_r+0x25c>)
 80086ee:	a904      	add	r1, sp, #16
 80086f0:	f7fe f856 	bl	80067a0 <_printf_i>
 80086f4:	e7e4      	b.n	80086c0 <_vfiprintf_r+0x208>
 80086f6:	bf00      	nop
 80086f8:	0800930c 	.word	0x0800930c
 80086fc:	0800932c 	.word	0x0800932c
 8008700:	080092ec 	.word	0x080092ec
 8008704:	08009194 	.word	0x08009194
 8008708:	0800919a 	.word	0x0800919a
 800870c:	0800919e 	.word	0x0800919e
 8008710:	08006269 	.word	0x08006269
 8008714:	08008495 	.word	0x08008495

08008718 <__swbuf_r>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	460e      	mov	r6, r1
 800871c:	4614      	mov	r4, r2
 800871e:	4605      	mov	r5, r0
 8008720:	b118      	cbz	r0, 800872a <__swbuf_r+0x12>
 8008722:	6983      	ldr	r3, [r0, #24]
 8008724:	b90b      	cbnz	r3, 800872a <__swbuf_r+0x12>
 8008726:	f000 f9e3 	bl	8008af0 <__sinit>
 800872a:	4b21      	ldr	r3, [pc, #132]	; (80087b0 <__swbuf_r+0x98>)
 800872c:	429c      	cmp	r4, r3
 800872e:	d12b      	bne.n	8008788 <__swbuf_r+0x70>
 8008730:	686c      	ldr	r4, [r5, #4]
 8008732:	69a3      	ldr	r3, [r4, #24]
 8008734:	60a3      	str	r3, [r4, #8]
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	071a      	lsls	r2, r3, #28
 800873a:	d52f      	bpl.n	800879c <__swbuf_r+0x84>
 800873c:	6923      	ldr	r3, [r4, #16]
 800873e:	b36b      	cbz	r3, 800879c <__swbuf_r+0x84>
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	6820      	ldr	r0, [r4, #0]
 8008744:	b2f6      	uxtb	r6, r6
 8008746:	1ac0      	subs	r0, r0, r3
 8008748:	6963      	ldr	r3, [r4, #20]
 800874a:	4637      	mov	r7, r6
 800874c:	4283      	cmp	r3, r0
 800874e:	dc04      	bgt.n	800875a <__swbuf_r+0x42>
 8008750:	4621      	mov	r1, r4
 8008752:	4628      	mov	r0, r5
 8008754:	f000 f938 	bl	80089c8 <_fflush_r>
 8008758:	bb30      	cbnz	r0, 80087a8 <__swbuf_r+0x90>
 800875a:	68a3      	ldr	r3, [r4, #8]
 800875c:	3001      	adds	r0, #1
 800875e:	3b01      	subs	r3, #1
 8008760:	60a3      	str	r3, [r4, #8]
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	6022      	str	r2, [r4, #0]
 8008768:	701e      	strb	r6, [r3, #0]
 800876a:	6963      	ldr	r3, [r4, #20]
 800876c:	4283      	cmp	r3, r0
 800876e:	d004      	beq.n	800877a <__swbuf_r+0x62>
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	07db      	lsls	r3, r3, #31
 8008774:	d506      	bpl.n	8008784 <__swbuf_r+0x6c>
 8008776:	2e0a      	cmp	r6, #10
 8008778:	d104      	bne.n	8008784 <__swbuf_r+0x6c>
 800877a:	4621      	mov	r1, r4
 800877c:	4628      	mov	r0, r5
 800877e:	f000 f923 	bl	80089c8 <_fflush_r>
 8008782:	b988      	cbnz	r0, 80087a8 <__swbuf_r+0x90>
 8008784:	4638      	mov	r0, r7
 8008786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008788:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <__swbuf_r+0x9c>)
 800878a:	429c      	cmp	r4, r3
 800878c:	d101      	bne.n	8008792 <__swbuf_r+0x7a>
 800878e:	68ac      	ldr	r4, [r5, #8]
 8008790:	e7cf      	b.n	8008732 <__swbuf_r+0x1a>
 8008792:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <__swbuf_r+0xa0>)
 8008794:	429c      	cmp	r4, r3
 8008796:	bf08      	it	eq
 8008798:	68ec      	ldreq	r4, [r5, #12]
 800879a:	e7ca      	b.n	8008732 <__swbuf_r+0x1a>
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 f81a 	bl	80087d8 <__swsetup_r>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d0cb      	beq.n	8008740 <__swbuf_r+0x28>
 80087a8:	f04f 37ff 	mov.w	r7, #4294967295
 80087ac:	e7ea      	b.n	8008784 <__swbuf_r+0x6c>
 80087ae:	bf00      	nop
 80087b0:	0800930c 	.word	0x0800930c
 80087b4:	0800932c 	.word	0x0800932c
 80087b8:	080092ec 	.word	0x080092ec

080087bc <__ascii_wctomb>:
 80087bc:	4603      	mov	r3, r0
 80087be:	4608      	mov	r0, r1
 80087c0:	b141      	cbz	r1, 80087d4 <__ascii_wctomb+0x18>
 80087c2:	2aff      	cmp	r2, #255	; 0xff
 80087c4:	d904      	bls.n	80087d0 <__ascii_wctomb+0x14>
 80087c6:	228a      	movs	r2, #138	; 0x8a
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	4770      	bx	lr
 80087d0:	2001      	movs	r0, #1
 80087d2:	700a      	strb	r2, [r1, #0]
 80087d4:	4770      	bx	lr
	...

080087d8 <__swsetup_r>:
 80087d8:	4b32      	ldr	r3, [pc, #200]	; (80088a4 <__swsetup_r+0xcc>)
 80087da:	b570      	push	{r4, r5, r6, lr}
 80087dc:	681d      	ldr	r5, [r3, #0]
 80087de:	4606      	mov	r6, r0
 80087e0:	460c      	mov	r4, r1
 80087e2:	b125      	cbz	r5, 80087ee <__swsetup_r+0x16>
 80087e4:	69ab      	ldr	r3, [r5, #24]
 80087e6:	b913      	cbnz	r3, 80087ee <__swsetup_r+0x16>
 80087e8:	4628      	mov	r0, r5
 80087ea:	f000 f981 	bl	8008af0 <__sinit>
 80087ee:	4b2e      	ldr	r3, [pc, #184]	; (80088a8 <__swsetup_r+0xd0>)
 80087f0:	429c      	cmp	r4, r3
 80087f2:	d10f      	bne.n	8008814 <__swsetup_r+0x3c>
 80087f4:	686c      	ldr	r4, [r5, #4]
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087fc:	0719      	lsls	r1, r3, #28
 80087fe:	d42c      	bmi.n	800885a <__swsetup_r+0x82>
 8008800:	06dd      	lsls	r5, r3, #27
 8008802:	d411      	bmi.n	8008828 <__swsetup_r+0x50>
 8008804:	2309      	movs	r3, #9
 8008806:	6033      	str	r3, [r6, #0]
 8008808:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	81a3      	strh	r3, [r4, #12]
 8008812:	e03e      	b.n	8008892 <__swsetup_r+0xba>
 8008814:	4b25      	ldr	r3, [pc, #148]	; (80088ac <__swsetup_r+0xd4>)
 8008816:	429c      	cmp	r4, r3
 8008818:	d101      	bne.n	800881e <__swsetup_r+0x46>
 800881a:	68ac      	ldr	r4, [r5, #8]
 800881c:	e7eb      	b.n	80087f6 <__swsetup_r+0x1e>
 800881e:	4b24      	ldr	r3, [pc, #144]	; (80088b0 <__swsetup_r+0xd8>)
 8008820:	429c      	cmp	r4, r3
 8008822:	bf08      	it	eq
 8008824:	68ec      	ldreq	r4, [r5, #12]
 8008826:	e7e6      	b.n	80087f6 <__swsetup_r+0x1e>
 8008828:	0758      	lsls	r0, r3, #29
 800882a:	d512      	bpl.n	8008852 <__swsetup_r+0x7a>
 800882c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800882e:	b141      	cbz	r1, 8008842 <__swsetup_r+0x6a>
 8008830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008834:	4299      	cmp	r1, r3
 8008836:	d002      	beq.n	800883e <__swsetup_r+0x66>
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff fb37 	bl	8007eac <_free_r>
 800883e:	2300      	movs	r3, #0
 8008840:	6363      	str	r3, [r4, #52]	; 0x34
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008848:	81a3      	strh	r3, [r4, #12]
 800884a:	2300      	movs	r3, #0
 800884c:	6063      	str	r3, [r4, #4]
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	f043 0308 	orr.w	r3, r3, #8
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	b94b      	cbnz	r3, 8008872 <__swsetup_r+0x9a>
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008868:	d003      	beq.n	8008872 <__swsetup_r+0x9a>
 800886a:	4621      	mov	r1, r4
 800886c:	4630      	mov	r0, r6
 800886e:	f000 fa05 	bl	8008c7c <__smakebuf_r>
 8008872:	89a0      	ldrh	r0, [r4, #12]
 8008874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008878:	f010 0301 	ands.w	r3, r0, #1
 800887c:	d00a      	beq.n	8008894 <__swsetup_r+0xbc>
 800887e:	2300      	movs	r3, #0
 8008880:	60a3      	str	r3, [r4, #8]
 8008882:	6963      	ldr	r3, [r4, #20]
 8008884:	425b      	negs	r3, r3
 8008886:	61a3      	str	r3, [r4, #24]
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	b943      	cbnz	r3, 800889e <__swsetup_r+0xc6>
 800888c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008890:	d1ba      	bne.n	8008808 <__swsetup_r+0x30>
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	0781      	lsls	r1, r0, #30
 8008896:	bf58      	it	pl
 8008898:	6963      	ldrpl	r3, [r4, #20]
 800889a:	60a3      	str	r3, [r4, #8]
 800889c:	e7f4      	b.n	8008888 <__swsetup_r+0xb0>
 800889e:	2000      	movs	r0, #0
 80088a0:	e7f7      	b.n	8008892 <__swsetup_r+0xba>
 80088a2:	bf00      	nop
 80088a4:	20000044 	.word	0x20000044
 80088a8:	0800930c 	.word	0x0800930c
 80088ac:	0800932c 	.word	0x0800932c
 80088b0:	080092ec 	.word	0x080092ec

080088b4 <abort>:
 80088b4:	2006      	movs	r0, #6
 80088b6:	b508      	push	{r3, lr}
 80088b8:	f000 fa50 	bl	8008d5c <raise>
 80088bc:	2001      	movs	r0, #1
 80088be:	f7f9 fd1e 	bl	80022fe <_exit>
	...

080088c4 <__sflush_r>:
 80088c4:	898a      	ldrh	r2, [r1, #12]
 80088c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c8:	4605      	mov	r5, r0
 80088ca:	0710      	lsls	r0, r2, #28
 80088cc:	460c      	mov	r4, r1
 80088ce:	d457      	bmi.n	8008980 <__sflush_r+0xbc>
 80088d0:	684b      	ldr	r3, [r1, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	dc04      	bgt.n	80088e0 <__sflush_r+0x1c>
 80088d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088d8:	2b00      	cmp	r3, #0
 80088da:	dc01      	bgt.n	80088e0 <__sflush_r+0x1c>
 80088dc:	2000      	movs	r0, #0
 80088de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088e2:	2e00      	cmp	r6, #0
 80088e4:	d0fa      	beq.n	80088dc <__sflush_r+0x18>
 80088e6:	2300      	movs	r3, #0
 80088e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088ec:	682f      	ldr	r7, [r5, #0]
 80088ee:	602b      	str	r3, [r5, #0]
 80088f0:	d032      	beq.n	8008958 <__sflush_r+0x94>
 80088f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	075a      	lsls	r2, r3, #29
 80088f8:	d505      	bpl.n	8008906 <__sflush_r+0x42>
 80088fa:	6863      	ldr	r3, [r4, #4]
 80088fc:	1ac0      	subs	r0, r0, r3
 80088fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008900:	b10b      	cbz	r3, 8008906 <__sflush_r+0x42>
 8008902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008904:	1ac0      	subs	r0, r0, r3
 8008906:	2300      	movs	r3, #0
 8008908:	4602      	mov	r2, r0
 800890a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800890c:	4628      	mov	r0, r5
 800890e:	6a21      	ldr	r1, [r4, #32]
 8008910:	47b0      	blx	r6
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	d106      	bne.n	8008926 <__sflush_r+0x62>
 8008918:	6829      	ldr	r1, [r5, #0]
 800891a:	291d      	cmp	r1, #29
 800891c:	d82c      	bhi.n	8008978 <__sflush_r+0xb4>
 800891e:	4a29      	ldr	r2, [pc, #164]	; (80089c4 <__sflush_r+0x100>)
 8008920:	40ca      	lsrs	r2, r1
 8008922:	07d6      	lsls	r6, r2, #31
 8008924:	d528      	bpl.n	8008978 <__sflush_r+0xb4>
 8008926:	2200      	movs	r2, #0
 8008928:	6062      	str	r2, [r4, #4]
 800892a:	6922      	ldr	r2, [r4, #16]
 800892c:	04d9      	lsls	r1, r3, #19
 800892e:	6022      	str	r2, [r4, #0]
 8008930:	d504      	bpl.n	800893c <__sflush_r+0x78>
 8008932:	1c42      	adds	r2, r0, #1
 8008934:	d101      	bne.n	800893a <__sflush_r+0x76>
 8008936:	682b      	ldr	r3, [r5, #0]
 8008938:	b903      	cbnz	r3, 800893c <__sflush_r+0x78>
 800893a:	6560      	str	r0, [r4, #84]	; 0x54
 800893c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800893e:	602f      	str	r7, [r5, #0]
 8008940:	2900      	cmp	r1, #0
 8008942:	d0cb      	beq.n	80088dc <__sflush_r+0x18>
 8008944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008948:	4299      	cmp	r1, r3
 800894a:	d002      	beq.n	8008952 <__sflush_r+0x8e>
 800894c:	4628      	mov	r0, r5
 800894e:	f7ff faad 	bl	8007eac <_free_r>
 8008952:	2000      	movs	r0, #0
 8008954:	6360      	str	r0, [r4, #52]	; 0x34
 8008956:	e7c2      	b.n	80088de <__sflush_r+0x1a>
 8008958:	6a21      	ldr	r1, [r4, #32]
 800895a:	2301      	movs	r3, #1
 800895c:	4628      	mov	r0, r5
 800895e:	47b0      	blx	r6
 8008960:	1c41      	adds	r1, r0, #1
 8008962:	d1c7      	bne.n	80088f4 <__sflush_r+0x30>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0c4      	beq.n	80088f4 <__sflush_r+0x30>
 800896a:	2b1d      	cmp	r3, #29
 800896c:	d001      	beq.n	8008972 <__sflush_r+0xae>
 800896e:	2b16      	cmp	r3, #22
 8008970:	d101      	bne.n	8008976 <__sflush_r+0xb2>
 8008972:	602f      	str	r7, [r5, #0]
 8008974:	e7b2      	b.n	80088dc <__sflush_r+0x18>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	e7ae      	b.n	80088de <__sflush_r+0x1a>
 8008980:	690f      	ldr	r7, [r1, #16]
 8008982:	2f00      	cmp	r7, #0
 8008984:	d0aa      	beq.n	80088dc <__sflush_r+0x18>
 8008986:	0793      	lsls	r3, r2, #30
 8008988:	bf18      	it	ne
 800898a:	2300      	movne	r3, #0
 800898c:	680e      	ldr	r6, [r1, #0]
 800898e:	bf08      	it	eq
 8008990:	694b      	ldreq	r3, [r1, #20]
 8008992:	1bf6      	subs	r6, r6, r7
 8008994:	600f      	str	r7, [r1, #0]
 8008996:	608b      	str	r3, [r1, #8]
 8008998:	2e00      	cmp	r6, #0
 800899a:	dd9f      	ble.n	80088dc <__sflush_r+0x18>
 800899c:	4633      	mov	r3, r6
 800899e:	463a      	mov	r2, r7
 80089a0:	4628      	mov	r0, r5
 80089a2:	6a21      	ldr	r1, [r4, #32]
 80089a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80089a8:	47e0      	blx	ip
 80089aa:	2800      	cmp	r0, #0
 80089ac:	dc06      	bgt.n	80089bc <__sflush_r+0xf8>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	e790      	b.n	80088de <__sflush_r+0x1a>
 80089bc:	4407      	add	r7, r0
 80089be:	1a36      	subs	r6, r6, r0
 80089c0:	e7ea      	b.n	8008998 <__sflush_r+0xd4>
 80089c2:	bf00      	nop
 80089c4:	20400001 	.word	0x20400001

080089c8 <_fflush_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	690b      	ldr	r3, [r1, #16]
 80089cc:	4605      	mov	r5, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	b913      	cbnz	r3, 80089d8 <_fflush_r+0x10>
 80089d2:	2500      	movs	r5, #0
 80089d4:	4628      	mov	r0, r5
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
 80089d8:	b118      	cbz	r0, 80089e2 <_fflush_r+0x1a>
 80089da:	6983      	ldr	r3, [r0, #24]
 80089dc:	b90b      	cbnz	r3, 80089e2 <_fflush_r+0x1a>
 80089de:	f000 f887 	bl	8008af0 <__sinit>
 80089e2:	4b14      	ldr	r3, [pc, #80]	; (8008a34 <_fflush_r+0x6c>)
 80089e4:	429c      	cmp	r4, r3
 80089e6:	d11b      	bne.n	8008a20 <_fflush_r+0x58>
 80089e8:	686c      	ldr	r4, [r5, #4]
 80089ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0ef      	beq.n	80089d2 <_fflush_r+0xa>
 80089f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089f4:	07d0      	lsls	r0, r2, #31
 80089f6:	d404      	bmi.n	8008a02 <_fflush_r+0x3a>
 80089f8:	0599      	lsls	r1, r3, #22
 80089fa:	d402      	bmi.n	8008a02 <_fflush_r+0x3a>
 80089fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089fe:	f000 f915 	bl	8008c2c <__retarget_lock_acquire_recursive>
 8008a02:	4628      	mov	r0, r5
 8008a04:	4621      	mov	r1, r4
 8008a06:	f7ff ff5d 	bl	80088c4 <__sflush_r>
 8008a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	07da      	lsls	r2, r3, #31
 8008a10:	d4e0      	bmi.n	80089d4 <_fflush_r+0xc>
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	059b      	lsls	r3, r3, #22
 8008a16:	d4dd      	bmi.n	80089d4 <_fflush_r+0xc>
 8008a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a1a:	f000 f908 	bl	8008c2e <__retarget_lock_release_recursive>
 8008a1e:	e7d9      	b.n	80089d4 <_fflush_r+0xc>
 8008a20:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <_fflush_r+0x70>)
 8008a22:	429c      	cmp	r4, r3
 8008a24:	d101      	bne.n	8008a2a <_fflush_r+0x62>
 8008a26:	68ac      	ldr	r4, [r5, #8]
 8008a28:	e7df      	b.n	80089ea <_fflush_r+0x22>
 8008a2a:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <_fflush_r+0x74>)
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	bf08      	it	eq
 8008a30:	68ec      	ldreq	r4, [r5, #12]
 8008a32:	e7da      	b.n	80089ea <_fflush_r+0x22>
 8008a34:	0800930c 	.word	0x0800930c
 8008a38:	0800932c 	.word	0x0800932c
 8008a3c:	080092ec 	.word	0x080092ec

08008a40 <std>:
 8008a40:	2300      	movs	r3, #0
 8008a42:	b510      	push	{r4, lr}
 8008a44:	4604      	mov	r4, r0
 8008a46:	e9c0 3300 	strd	r3, r3, [r0]
 8008a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a4e:	6083      	str	r3, [r0, #8]
 8008a50:	8181      	strh	r1, [r0, #12]
 8008a52:	6643      	str	r3, [r0, #100]	; 0x64
 8008a54:	81c2      	strh	r2, [r0, #14]
 8008a56:	6183      	str	r3, [r0, #24]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	2208      	movs	r2, #8
 8008a5c:	305c      	adds	r0, #92	; 0x5c
 8008a5e:	f7fd fb5d 	bl	800611c <memset>
 8008a62:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <std+0x38>)
 8008a64:	6224      	str	r4, [r4, #32]
 8008a66:	6263      	str	r3, [r4, #36]	; 0x24
 8008a68:	4b04      	ldr	r3, [pc, #16]	; (8008a7c <std+0x3c>)
 8008a6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a6c:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <std+0x40>)
 8008a6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a70:	4b04      	ldr	r3, [pc, #16]	; (8008a84 <std+0x44>)
 8008a72:	6323      	str	r3, [r4, #48]	; 0x30
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	bf00      	nop
 8008a78:	08008d95 	.word	0x08008d95
 8008a7c:	08008db7 	.word	0x08008db7
 8008a80:	08008def 	.word	0x08008def
 8008a84:	08008e13 	.word	0x08008e13

08008a88 <_cleanup_r>:
 8008a88:	4901      	ldr	r1, [pc, #4]	; (8008a90 <_cleanup_r+0x8>)
 8008a8a:	f000 b8af 	b.w	8008bec <_fwalk_reent>
 8008a8e:	bf00      	nop
 8008a90:	080089c9 	.word	0x080089c9

08008a94 <__sfmoreglue>:
 8008a94:	2268      	movs	r2, #104	; 0x68
 8008a96:	b570      	push	{r4, r5, r6, lr}
 8008a98:	1e4d      	subs	r5, r1, #1
 8008a9a:	4355      	muls	r5, r2
 8008a9c:	460e      	mov	r6, r1
 8008a9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008aa2:	f7ff fa6b 	bl	8007f7c <_malloc_r>
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	b140      	cbz	r0, 8008abc <__sfmoreglue+0x28>
 8008aaa:	2100      	movs	r1, #0
 8008aac:	e9c0 1600 	strd	r1, r6, [r0]
 8008ab0:	300c      	adds	r0, #12
 8008ab2:	60a0      	str	r0, [r4, #8]
 8008ab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ab8:	f7fd fb30 	bl	800611c <memset>
 8008abc:	4620      	mov	r0, r4
 8008abe:	bd70      	pop	{r4, r5, r6, pc}

08008ac0 <__sfp_lock_acquire>:
 8008ac0:	4801      	ldr	r0, [pc, #4]	; (8008ac8 <__sfp_lock_acquire+0x8>)
 8008ac2:	f000 b8b3 	b.w	8008c2c <__retarget_lock_acquire_recursive>
 8008ac6:	bf00      	nop
 8008ac8:	2000051d 	.word	0x2000051d

08008acc <__sfp_lock_release>:
 8008acc:	4801      	ldr	r0, [pc, #4]	; (8008ad4 <__sfp_lock_release+0x8>)
 8008ace:	f000 b8ae 	b.w	8008c2e <__retarget_lock_release_recursive>
 8008ad2:	bf00      	nop
 8008ad4:	2000051d 	.word	0x2000051d

08008ad8 <__sinit_lock_acquire>:
 8008ad8:	4801      	ldr	r0, [pc, #4]	; (8008ae0 <__sinit_lock_acquire+0x8>)
 8008ada:	f000 b8a7 	b.w	8008c2c <__retarget_lock_acquire_recursive>
 8008ade:	bf00      	nop
 8008ae0:	2000051e 	.word	0x2000051e

08008ae4 <__sinit_lock_release>:
 8008ae4:	4801      	ldr	r0, [pc, #4]	; (8008aec <__sinit_lock_release+0x8>)
 8008ae6:	f000 b8a2 	b.w	8008c2e <__retarget_lock_release_recursive>
 8008aea:	bf00      	nop
 8008aec:	2000051e 	.word	0x2000051e

08008af0 <__sinit>:
 8008af0:	b510      	push	{r4, lr}
 8008af2:	4604      	mov	r4, r0
 8008af4:	f7ff fff0 	bl	8008ad8 <__sinit_lock_acquire>
 8008af8:	69a3      	ldr	r3, [r4, #24]
 8008afa:	b11b      	cbz	r3, 8008b04 <__sinit+0x14>
 8008afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b00:	f7ff bff0 	b.w	8008ae4 <__sinit_lock_release>
 8008b04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b08:	6523      	str	r3, [r4, #80]	; 0x50
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <__sinit+0x68>)
 8008b0c:	4a13      	ldr	r2, [pc, #76]	; (8008b5c <__sinit+0x6c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	bf08      	it	eq
 8008b16:	2301      	moveq	r3, #1
 8008b18:	4620      	mov	r0, r4
 8008b1a:	bf08      	it	eq
 8008b1c:	61a3      	streq	r3, [r4, #24]
 8008b1e:	f000 f81f 	bl	8008b60 <__sfp>
 8008b22:	6060      	str	r0, [r4, #4]
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 f81b 	bl	8008b60 <__sfp>
 8008b2a:	60a0      	str	r0, [r4, #8]
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 f817 	bl	8008b60 <__sfp>
 8008b32:	2200      	movs	r2, #0
 8008b34:	2104      	movs	r1, #4
 8008b36:	60e0      	str	r0, [r4, #12]
 8008b38:	6860      	ldr	r0, [r4, #4]
 8008b3a:	f7ff ff81 	bl	8008a40 <std>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	2109      	movs	r1, #9
 8008b42:	68a0      	ldr	r0, [r4, #8]
 8008b44:	f7ff ff7c 	bl	8008a40 <std>
 8008b48:	2202      	movs	r2, #2
 8008b4a:	2112      	movs	r1, #18
 8008b4c:	68e0      	ldr	r0, [r4, #12]
 8008b4e:	f7ff ff77 	bl	8008a40 <std>
 8008b52:	2301      	movs	r3, #1
 8008b54:	61a3      	str	r3, [r4, #24]
 8008b56:	e7d1      	b.n	8008afc <__sinit+0xc>
 8008b58:	08008f70 	.word	0x08008f70
 8008b5c:	08008a89 	.word	0x08008a89

08008b60 <__sfp>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	4607      	mov	r7, r0
 8008b64:	f7ff ffac 	bl	8008ac0 <__sfp_lock_acquire>
 8008b68:	4b1e      	ldr	r3, [pc, #120]	; (8008be4 <__sfp+0x84>)
 8008b6a:	681e      	ldr	r6, [r3, #0]
 8008b6c:	69b3      	ldr	r3, [r6, #24]
 8008b6e:	b913      	cbnz	r3, 8008b76 <__sfp+0x16>
 8008b70:	4630      	mov	r0, r6
 8008b72:	f7ff ffbd 	bl	8008af0 <__sinit>
 8008b76:	3648      	adds	r6, #72	; 0x48
 8008b78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	d503      	bpl.n	8008b88 <__sfp+0x28>
 8008b80:	6833      	ldr	r3, [r6, #0]
 8008b82:	b30b      	cbz	r3, 8008bc8 <__sfp+0x68>
 8008b84:	6836      	ldr	r6, [r6, #0]
 8008b86:	e7f7      	b.n	8008b78 <__sfp+0x18>
 8008b88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b8c:	b9d5      	cbnz	r5, 8008bc4 <__sfp+0x64>
 8008b8e:	4b16      	ldr	r3, [pc, #88]	; (8008be8 <__sfp+0x88>)
 8008b90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b94:	60e3      	str	r3, [r4, #12]
 8008b96:	6665      	str	r5, [r4, #100]	; 0x64
 8008b98:	f000 f847 	bl	8008c2a <__retarget_lock_init_recursive>
 8008b9c:	f7ff ff96 	bl	8008acc <__sfp_lock_release>
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bac:	6025      	str	r5, [r4, #0]
 8008bae:	61a5      	str	r5, [r4, #24]
 8008bb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bb4:	f7fd fab2 	bl	800611c <memset>
 8008bb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc4:	3468      	adds	r4, #104	; 0x68
 8008bc6:	e7d9      	b.n	8008b7c <__sfp+0x1c>
 8008bc8:	2104      	movs	r1, #4
 8008bca:	4638      	mov	r0, r7
 8008bcc:	f7ff ff62 	bl	8008a94 <__sfmoreglue>
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	6030      	str	r0, [r6, #0]
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1d5      	bne.n	8008b84 <__sfp+0x24>
 8008bd8:	f7ff ff78 	bl	8008acc <__sfp_lock_release>
 8008bdc:	230c      	movs	r3, #12
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	e7ee      	b.n	8008bc0 <__sfp+0x60>
 8008be2:	bf00      	nop
 8008be4:	08008f70 	.word	0x08008f70
 8008be8:	ffff0001 	.word	0xffff0001

08008bec <_fwalk_reent>:
 8008bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	4688      	mov	r8, r1
 8008bf4:	2700      	movs	r7, #0
 8008bf6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bfe:	f1b9 0901 	subs.w	r9, r9, #1
 8008c02:	d505      	bpl.n	8008c10 <_fwalk_reent+0x24>
 8008c04:	6824      	ldr	r4, [r4, #0]
 8008c06:	2c00      	cmp	r4, #0
 8008c08:	d1f7      	bne.n	8008bfa <_fwalk_reent+0xe>
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c10:	89ab      	ldrh	r3, [r5, #12]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d907      	bls.n	8008c26 <_fwalk_reent+0x3a>
 8008c16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	d003      	beq.n	8008c26 <_fwalk_reent+0x3a>
 8008c1e:	4629      	mov	r1, r5
 8008c20:	4630      	mov	r0, r6
 8008c22:	47c0      	blx	r8
 8008c24:	4307      	orrs	r7, r0
 8008c26:	3568      	adds	r5, #104	; 0x68
 8008c28:	e7e9      	b.n	8008bfe <_fwalk_reent+0x12>

08008c2a <__retarget_lock_init_recursive>:
 8008c2a:	4770      	bx	lr

08008c2c <__retarget_lock_acquire_recursive>:
 8008c2c:	4770      	bx	lr

08008c2e <__retarget_lock_release_recursive>:
 8008c2e:	4770      	bx	lr

08008c30 <__swhatbuf_r>:
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	460e      	mov	r6, r1
 8008c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c38:	4614      	mov	r4, r2
 8008c3a:	2900      	cmp	r1, #0
 8008c3c:	461d      	mov	r5, r3
 8008c3e:	b096      	sub	sp, #88	; 0x58
 8008c40:	da08      	bge.n	8008c54 <__swhatbuf_r+0x24>
 8008c42:	2200      	movs	r2, #0
 8008c44:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c48:	602a      	str	r2, [r5, #0]
 8008c4a:	061a      	lsls	r2, r3, #24
 8008c4c:	d410      	bmi.n	8008c70 <__swhatbuf_r+0x40>
 8008c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c52:	e00e      	b.n	8008c72 <__swhatbuf_r+0x42>
 8008c54:	466a      	mov	r2, sp
 8008c56:	f000 f903 	bl	8008e60 <_fstat_r>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	dbf1      	blt.n	8008c42 <__swhatbuf_r+0x12>
 8008c5e:	9a01      	ldr	r2, [sp, #4]
 8008c60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c68:	425a      	negs	r2, r3
 8008c6a:	415a      	adcs	r2, r3
 8008c6c:	602a      	str	r2, [r5, #0]
 8008c6e:	e7ee      	b.n	8008c4e <__swhatbuf_r+0x1e>
 8008c70:	2340      	movs	r3, #64	; 0x40
 8008c72:	2000      	movs	r0, #0
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	b016      	add	sp, #88	; 0x58
 8008c78:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c7c <__smakebuf_r>:
 8008c7c:	898b      	ldrh	r3, [r1, #12]
 8008c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c80:	079d      	lsls	r5, r3, #30
 8008c82:	4606      	mov	r6, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	d507      	bpl.n	8008c98 <__smakebuf_r+0x1c>
 8008c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	2301      	movs	r3, #1
 8008c92:	6163      	str	r3, [r4, #20]
 8008c94:	b002      	add	sp, #8
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	466a      	mov	r2, sp
 8008c9a:	ab01      	add	r3, sp, #4
 8008c9c:	f7ff ffc8 	bl	8008c30 <__swhatbuf_r>
 8008ca0:	9900      	ldr	r1, [sp, #0]
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7ff f969 	bl	8007f7c <_malloc_r>
 8008caa:	b948      	cbnz	r0, 8008cc0 <__smakebuf_r+0x44>
 8008cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb0:	059a      	lsls	r2, r3, #22
 8008cb2:	d4ef      	bmi.n	8008c94 <__smakebuf_r+0x18>
 8008cb4:	f023 0303 	bic.w	r3, r3, #3
 8008cb8:	f043 0302 	orr.w	r3, r3, #2
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	e7e3      	b.n	8008c88 <__smakebuf_r+0xc>
 8008cc0:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <__smakebuf_r+0x7c>)
 8008cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	6020      	str	r0, [r4, #0]
 8008cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ccc:	81a3      	strh	r3, [r4, #12]
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	6120      	str	r0, [r4, #16]
 8008cd2:	6163      	str	r3, [r4, #20]
 8008cd4:	9b01      	ldr	r3, [sp, #4]
 8008cd6:	b15b      	cbz	r3, 8008cf0 <__smakebuf_r+0x74>
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cde:	f000 f8d1 	bl	8008e84 <_isatty_r>
 8008ce2:	b128      	cbz	r0, 8008cf0 <__smakebuf_r+0x74>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	f043 0301 	orr.w	r3, r3, #1
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	89a0      	ldrh	r0, [r4, #12]
 8008cf2:	4305      	orrs	r5, r0
 8008cf4:	81a5      	strh	r5, [r4, #12]
 8008cf6:	e7cd      	b.n	8008c94 <__smakebuf_r+0x18>
 8008cf8:	08008a89 	.word	0x08008a89

08008cfc <_malloc_usable_size_r>:
 8008cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d00:	1f18      	subs	r0, r3, #4
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfbc      	itt	lt
 8008d06:	580b      	ldrlt	r3, [r1, r0]
 8008d08:	18c0      	addlt	r0, r0, r3
 8008d0a:	4770      	bx	lr

08008d0c <_raise_r>:
 8008d0c:	291f      	cmp	r1, #31
 8008d0e:	b538      	push	{r3, r4, r5, lr}
 8008d10:	4604      	mov	r4, r0
 8008d12:	460d      	mov	r5, r1
 8008d14:	d904      	bls.n	8008d20 <_raise_r+0x14>
 8008d16:	2316      	movs	r3, #22
 8008d18:	6003      	str	r3, [r0, #0]
 8008d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d22:	b112      	cbz	r2, 8008d2a <_raise_r+0x1e>
 8008d24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d28:	b94b      	cbnz	r3, 8008d3e <_raise_r+0x32>
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 f830 	bl	8008d90 <_getpid_r>
 8008d30:	462a      	mov	r2, r5
 8008d32:	4601      	mov	r1, r0
 8008d34:	4620      	mov	r0, r4
 8008d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d3a:	f000 b817 	b.w	8008d6c <_kill_r>
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d00a      	beq.n	8008d58 <_raise_r+0x4c>
 8008d42:	1c59      	adds	r1, r3, #1
 8008d44:	d103      	bne.n	8008d4e <_raise_r+0x42>
 8008d46:	2316      	movs	r3, #22
 8008d48:	6003      	str	r3, [r0, #0]
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	e7e7      	b.n	8008d1e <_raise_r+0x12>
 8008d4e:	2400      	movs	r4, #0
 8008d50:	4628      	mov	r0, r5
 8008d52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d56:	4798      	blx	r3
 8008d58:	2000      	movs	r0, #0
 8008d5a:	e7e0      	b.n	8008d1e <_raise_r+0x12>

08008d5c <raise>:
 8008d5c:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <raise+0xc>)
 8008d5e:	4601      	mov	r1, r0
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	f7ff bfd3 	b.w	8008d0c <_raise_r>
 8008d66:	bf00      	nop
 8008d68:	20000044 	.word	0x20000044

08008d6c <_kill_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	2300      	movs	r3, #0
 8008d70:	4d06      	ldr	r5, [pc, #24]	; (8008d8c <_kill_r+0x20>)
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	4611      	mov	r1, r2
 8008d78:	602b      	str	r3, [r5, #0]
 8008d7a:	f7f9 fab0 	bl	80022de <_kill>
 8008d7e:	1c43      	adds	r3, r0, #1
 8008d80:	d102      	bne.n	8008d88 <_kill_r+0x1c>
 8008d82:	682b      	ldr	r3, [r5, #0]
 8008d84:	b103      	cbz	r3, 8008d88 <_kill_r+0x1c>
 8008d86:	6023      	str	r3, [r4, #0]
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000518 	.word	0x20000518

08008d90 <_getpid_r>:
 8008d90:	f7f9 ba9e 	b.w	80022d0 <_getpid>

08008d94 <__sread>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	460c      	mov	r4, r1
 8008d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9c:	f000 f894 	bl	8008ec8 <_read_r>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	bfab      	itete	ge
 8008da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008da6:	89a3      	ldrhlt	r3, [r4, #12]
 8008da8:	181b      	addge	r3, r3, r0
 8008daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dae:	bfac      	ite	ge
 8008db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008db2:	81a3      	strhlt	r3, [r4, #12]
 8008db4:	bd10      	pop	{r4, pc}

08008db6 <__swrite>:
 8008db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dba:	461f      	mov	r7, r3
 8008dbc:	898b      	ldrh	r3, [r1, #12]
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	05db      	lsls	r3, r3, #23
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	4616      	mov	r6, r2
 8008dc6:	d505      	bpl.n	8008dd4 <__swrite+0x1e>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd0:	f000 f868 	bl	8008ea4 <_lseek_r>
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	4632      	mov	r2, r6
 8008dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ddc:	81a3      	strh	r3, [r4, #12]
 8008dde:	4628      	mov	r0, r5
 8008de0:	463b      	mov	r3, r7
 8008de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dea:	f000 b817 	b.w	8008e1c <_write_r>

08008dee <__sseek>:
 8008dee:	b510      	push	{r4, lr}
 8008df0:	460c      	mov	r4, r1
 8008df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df6:	f000 f855 	bl	8008ea4 <_lseek_r>
 8008dfa:	1c43      	adds	r3, r0, #1
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	bf15      	itete	ne
 8008e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e0a:	81a3      	strheq	r3, [r4, #12]
 8008e0c:	bf18      	it	ne
 8008e0e:	81a3      	strhne	r3, [r4, #12]
 8008e10:	bd10      	pop	{r4, pc}

08008e12 <__sclose>:
 8008e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e16:	f000 b813 	b.w	8008e40 <_close_r>
	...

08008e1c <_write_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	4611      	mov	r1, r2
 8008e24:	2200      	movs	r2, #0
 8008e26:	4d05      	ldr	r5, [pc, #20]	; (8008e3c <_write_r+0x20>)
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7f9 fa8e 	bl	800234c <_write>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_write_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_write_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	20000518 	.word	0x20000518

08008e40 <_close_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	2300      	movs	r3, #0
 8008e44:	4d05      	ldr	r5, [pc, #20]	; (8008e5c <_close_r+0x1c>)
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	f7f9 fa9a 	bl	8002384 <_close>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_close_r+0x1a>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_close_r+0x1a>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	20000518 	.word	0x20000518

08008e60 <_fstat_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	2300      	movs	r3, #0
 8008e64:	4d06      	ldr	r5, [pc, #24]	; (8008e80 <_fstat_r+0x20>)
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	f7f9 fa94 	bl	800239a <_fstat>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d102      	bne.n	8008e7c <_fstat_r+0x1c>
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	b103      	cbz	r3, 8008e7c <_fstat_r+0x1c>
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
 8008e7e:	bf00      	nop
 8008e80:	20000518 	.word	0x20000518

08008e84 <_isatty_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	2300      	movs	r3, #0
 8008e88:	4d05      	ldr	r5, [pc, #20]	; (8008ea0 <_isatty_r+0x1c>)
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7f9 fa92 	bl	80023b8 <_isatty>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_isatty_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_isatty_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20000518 	.word	0x20000518

08008ea4 <_lseek_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	4608      	mov	r0, r1
 8008eaa:	4611      	mov	r1, r2
 8008eac:	2200      	movs	r2, #0
 8008eae:	4d05      	ldr	r5, [pc, #20]	; (8008ec4 <_lseek_r+0x20>)
 8008eb0:	602a      	str	r2, [r5, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f7f9 fa8a 	bl	80023cc <_lseek>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_lseek_r+0x1e>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_lseek_r+0x1e>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	20000518 	.word	0x20000518

08008ec8 <_read_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	4611      	mov	r1, r2
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4d05      	ldr	r5, [pc, #20]	; (8008ee8 <_read_r+0x20>)
 8008ed4:	602a      	str	r2, [r5, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f7f9 fa1b 	bl	8002312 <_read>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_read_r+0x1e>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_read_r+0x1e>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	20000518 	.word	0x20000518

08008eec <_init>:
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	bf00      	nop
 8008ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef2:	bc08      	pop	{r3}
 8008ef4:	469e      	mov	lr, r3
 8008ef6:	4770      	bx	lr

08008ef8 <_fini>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	bf00      	nop
 8008efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efe:	bc08      	pop	{r3}
 8008f00:	469e      	mov	lr, r3
 8008f02:	4770      	bx	lr
